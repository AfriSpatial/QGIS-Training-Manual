# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-07-18 19:25\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\postgres\db_intro.rst:2
# 7d96d4103b3b4faa8f7b7a4460549c0f
msgid "|LS| Introduction to Databases"
msgstr ""

#: ..\..\postgres\db_intro.rst:4
# 799cad672c0b4b5ab1d3de4c7915ec31
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ..\..\postgres\db_intro.rst:8
# e75752e9b2cd41158fe3171e62541169
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ..\..\postgres\db_intro.rst:11
# b89ee3a8b65143de91d112818d762134
msgid "What is a Database?"
msgstr ""

#: ..\..\postgres\db_intro.rst:13
# cd9875ca0cc74fbd9801e00d9ce3ac07
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ..\..\postgres\db_intro.rst:18
# 9b2e6d7d37b24b94802587af878b0d2e
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ..\..\postgres\db_intro.rst:23
# e56499b780a5410ba95fc19fe19309fd
msgid "Tables"
msgstr ""

#: ..\..\postgres\db_intro.rst:25
# 4b4977cdca674a4e998e0297ab34d9e0
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ..\..\postgres\db_intro.rst:40
# 426e3b00e5814d2baf25579a254235bc
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ..\..\postgres\db_intro.rst:43
# ae0c23089a2b47778615f2a66929fe40
msgid "Columns / Fields"
msgstr ""

#: ..\..\postgres\db_intro.rst:45
# f18e30d1af4c4dd7988ee10142fd66ad
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ..\..\postgres\db_intro.rst:52
# 25f55589842b4cd7b86a90d69051ab2a
msgid "A column:"
msgstr ""

#: ..\..\postgres\db_intro.rst:61
# 56b470592b7149169386bc769ef18fc4
msgid "A field:"
msgstr ""

#: ..\..\postgres\db_intro.rst:68
# f420570c3e3241748faf94bb45953397
msgid "Records"
msgstr ""

#: ..\..\postgres\db_intro.rst:70
# b3bf8dadcb13444a812db99fd7f758eb
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ..\..\postgres\db_intro.rst:78
# c4a5d707dd9243eb85359c5753ee2a0c
msgid "Datatypes"
msgstr ""

#: ..\..\postgres\db_intro.rst:80
# fcbda56d5ac847a391832e6cab1790c9
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ..\..\postgres\db_intro.rst:83
# 8504ded42d6d42f5a29958a721851c11
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ..\..\postgres\db_intro.rst:85
# 4fb94be771d94fabbc410d5792f6e8e5
msgid "String - to store free-form text data"
msgstr ""

#: ..\..\postgres\db_intro.rst:86
# dbf33474a213440695ce65d755fa384e
msgid "Integer - to store whole numbers"
msgstr ""

#: ..\..\postgres\db_intro.rst:87
# 5bc3c1f847354ae897aff85ba4d2d7b0
msgid "Real - to store decimal numbers"
msgstr ""

#: ..\..\postgres\db_intro.rst:88
# 82e1756d51f64efc9eb58c225938055b
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ..\..\postgres\db_intro.rst:89
# f184a1b81b5e44a897175da8571bae9f
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ..\..\postgres\db_intro.rst:91
# ca3d0900994c49dc84b0a0f45a1fca52
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ..\..\postgres\db_intro.rst:111
# e62d28e229214bedbe212731c30a9db3
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ..\..\postgres\db_intro.rst:115
# ac9c39f2c9c34e01ac247cfeea5c4c2d
msgid "Modelling an Address Database"
msgstr ""

#: ..\..\postgres\db_intro.rst:117
# 6279292f152745c9a9aa615996fd9b89
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ..\..\postgres\db_intro.rst:120
# e759f3b43a57429eaf03aa4d42689358
msgid "Write some address properties in the space provided:"
msgstr ""

#: ..\..\postgres\db_intro.rst:155
# bc3a095d31a240aea872bed7cb42af12
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ..\..\postgres\db_intro.rst:160
# f6cfeb7c289c4a6392c775ca5e148212
msgid "Database Theory"
msgstr ""

#: ..\..\postgres\db_intro.rst:162
# 91029b1ee7c54bfbbef4a156cc6c9b26
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ..\..\postgres\db_intro.rst:166
# b2a6e78c09fc4bbfac99a36a77d8b1b8
msgid "Normalisation"
msgstr ""

#: ..\..\postgres\db_intro.rst:168
# 506ca596110b42eca4972bd4d65aa447
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ..\..\postgres\db_intro.rst:171
# 745f048c743a4f4db9752b04e9150b76
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ..\..\postgres\db_intro.rst:176
# fd7638e8b29a44abbd60434a5e9025f5
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ..\..\postgres\db_intro.rst:178
# fbc16eadcef446e29d01b46774f6746f
msgid "Let's take a look at a simple example:"
msgstr ""

#: ..\..\postgres\db_intro.rst:203
# fec76bb37f28400bb5dad3ec32c9c751
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ..\..\postgres\db_intro.rst:207
# fd27fe0c4fd84470895c5bf22bfcea3e
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ..\..\postgres\db_intro.rst:237
# ab696b2fa18443459eb1b91abd55fcd4
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ..\..\postgres\db_intro.rst:241
# c0ab50bcce7f4b2bb602792cef0476fc
msgid "Indexes"
msgstr ""

#: ..\..\postgres\db_intro.rst:243
# 509baea8d04d4410b2b98be70746fe07
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ..\..\postgres\db_intro.rst:246
# d1ef6cb3099a4ae5b3d706ff0da6c43b
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ..\..\postgres\db_intro.rst:256
# b7da9b9e6de94366802f6faf48995841
msgid "Now searches on name will be faster:"
msgstr ""

#: ..\..\postgres\db_intro.rst:274
# 4a1d517bee7f448981e2bea14475a438
msgid "Sequences"
msgstr ""

#: ..\..\postgres\db_intro.rst:276
# 1a9499ee96eb4185ace05b3bc439c87a
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ..\..\postgres\db_intro.rst:279
# 6917f4832d0b4912b0ebe6234592e669
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ..\..\postgres\db_intro.rst:290
# 852241bcd28e4960ab8160e350b7293c
msgid "Entity Relationship Diagramming"
msgstr ""

#: ..\..\postgres\db_intro.rst:292
# 4bcaefc5b3f344d497d17058c47c1bac
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ..\..\postgres\db_intro.rst:305
# de12ddc3c70641a0b75fd8c33aa93faa
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ..\..\postgres\db_intro.rst:316
# 1fc6670985074a36a9f561ea24a24a57
msgid "and"
msgstr ""

#: ..\..\postgres\db_intro.rst:326
# 8d600be734e5409f8fed711cf10a3667
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ..\..\postgres\db_intro.rst:329
# af28ccaf2ccc4f0aa7776e6ea63e2f4b
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ..\..\postgres\db_intro.rst:335
# a17fe3248c3e4732a75d6e2e757d3f44
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ..\..\postgres\db_intro.rst:338
# 22719ac0fc474d4d8c1c40abdb0b553c
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ..\..\postgres\db_intro.rst:370
# b4a5f473698f4492abd9d33ce6f4e070
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ..\..\postgres\db_intro.rst:372
# 6471445807f14fa2bc93ed5c926e461d
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ..\..\postgres\db_intro.rst:377
# a0b31681e7644528a1f8889834e2c85b
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ..\..\postgres\db_intro.rst:380
# 6ad240a870ce49a49b8cd373adeafbcc
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ..\..\postgres\db_intro.rst:383
# 9434df70672b45788889e96d76b5f309
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ..\..\postgres\db_intro.rst:386
# 72ad460bdf1748bca0e7b970bbbccf43
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ..\..\postgres\db_intro.rst:406
# 398cc7b4acfa48e7b89e2c7b7a31d67f
msgid "Transactions"
msgstr ""

#: ..\..\postgres\db_intro.rst:408
# 9e599796e002483ead235e6db7ead6cb
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ..\..\postgres\db_intro.rst:414
# d297d2cd9a4444ef9f994d87d1b1e8a1
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ..\..\postgres\db_intro.rst:418
# f0ca045a5e1b4b77a68f37b1fb34424a
msgid "remove R20 from Joe"
msgstr ""

#: ..\..\postgres\db_intro.rst:419
# dfa668c1a5c148d697ffa93b94eafd18
msgid "add R20 to Anne"
msgstr ""

#: ..\..\postgres\db_intro.rst:421
# 4c7d1fc0a3274c15a953295bb2888e03
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ..\..\postgres\db_intro.rst:425
# 67db1deab95641b6b346a3e213821ad7
msgid "|IC|"
msgstr ""

#: ..\..\postgres\db_intro.rst:427
# 202cc927fa4c462cab79487e5e0edf1d
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ..\..\postgres\db_intro.rst:431
# a06e9229acf34724b7ca7c98677db4e2
msgid "|WN|"
msgstr ""

#: ..\..\postgres\db_intro.rst:433
# b029c4003654442e97edfbd8bbaea45c
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

