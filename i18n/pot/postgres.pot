# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-20 10:39\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../postgres/adding_data.rst:2
# 4b5703eff1394d18b96b390e1fa8096c
msgid "|LS| Adding Data to the Model"
msgstr ""

#: ../../postgres/adding_data.rst:4
# b4845b13019b4af5bcb1ad75da20c28b
msgid "The models we've created will now need to be populated with the data they're intended to contain."
msgstr ""

#: ../../postgres/adding_data.rst:7
# f8c27daee2d74064b1dae113543b030a
msgid "**The goal for this lesson:** To learn how to insert new data into the database models."
msgstr ""

#: ../../postgres/adding_data.rst:11
# 8afc2c06229c4d2695f10c22717d5d9d
msgid "Insert statement"
msgstr ""

#: ../../postgres/adding_data.rst:13
# f248000a971144d18d95bae49a5c33bb
msgid "How do you add data to a table? The sql :kbd:`INSERT` statement provides the functionality for this:"
msgstr ""

#: ../../postgres/adding_data.rst:20
# 116e34ebc2cf42349d1d29b9b44a2834
msgid "A couple of things to note:"
msgstr ""

#: ../../postgres/adding_data.rst:22
# 38b04c51f7344e3c86992307fb5eac5f
msgid "after the table name (:kbd:`streets`), you list the column names that you will be populating (in this case only the :kbd:`name` column)."
msgstr ""

#: ../../postgres/adding_data.rst:24
# 96a27439e1b14ea98a258aa8125f8571
msgid "after the :kbd:`values` keyword, place the list of field values."
msgstr ""

#: ../../postgres/adding_data.rst:25
# 6a6ac66b59284694940bdba4f3d91703
msgid "strings should be quoted using single quotes."
msgstr ""

#: ../../postgres/adding_data.rst:26
# b7a236de9d674b659da1ecc74be50d91
msgid "you will note that I did not insert a value for the :kbd:`id` column - that is because it is a sequence and will be autogenerated."
msgstr ""

#: ../../postgres/adding_data.rst:28
# a9132057902f4fb6a07121d76eb745e0
msgid "if you do manually set the :kbd:`id`, you may cause serious problems with the integrity of your database."
msgstr ""

#: ../../postgres/adding_data.rst:31
# 8a9c7f7c6e254438aac4450044ef0ab0
msgid "You should see :kbd:`INSERT 0 1` if it is successful."
msgstr ""

#: ../../postgres/adding_data.rst:33
# 0fb42ddd966d4feba351a94197fa02c5
msgid "You can see the result of your insert action by selecting all the data in the table:"
msgstr ""

#: ../../postgres/adding_data.rst:40
# 792fa359b65d404db4bf13af21ab3a4f
msgid "result:"
msgstr ""

#: ../../postgres/adding_data.rst:50
# b054d7e992474fe08d6cd1fa071e65fe
msgid "Now you try:"
msgstr ""

#: ../../postgres/adding_data.rst:52
# 1cb7f2916c7e425ab3d0985c6c0230a8
msgid "Use the :kbd:`INSERT` command to add a new street to the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:54
# 16beb17c64f14e378c9b363012af4aa6
msgid "Write the sql you used here:"
msgstr ""

#: ../../postgres/adding_data.rst:70
# 5143d4dd6df24a24970d4d8db30e7e5b
msgid "Sequencing data addition according to constraints"
msgstr ""

#: ../../postgres/adding_data.rst:72
# cf481b89e36141b892803c3319bae09a
msgid "Try to add a person to the people table with the following details:"
msgstr ""

#: ../../postgres/adding_data.rst:81
# cb3111aed00946029a47efb4698c2d14
msgid "Remember, we defined phone numbers as strings."
msgstr ""

#: ../../postgres/adding_data.rst:83
# 3bbb97f26de346deb7a7d53e53d297e6
msgid "What problems did you encounter?"
msgstr ""

#: ../../postgres/adding_data.rst:104
# e52be96be54a4db080489d41697fe705
msgid "You should have an error report if you try to do this without first creating a record for Main Street in the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:107
# cfbec4107d74497d84927eac02903274
msgid "What error did you get?"
msgstr ""

#: ../../postgres/adding_data.rst:110
# 5837ed3c66b94e5ba37391b91c0eba1b
msgid "You can't add the street using its name"
msgstr ""

#: ../../postgres/adding_data.rst:111
# 3fb171a380c040319d961c7e0b37e87c
msgid "You can't add a street using a street :kbd:`id` before first creating the street record on the streets table"
msgstr ""

#: ../../postgres/adding_data.rst:114
# 66d6e04462934798aa22ac77485f63b3
msgid "Remember that our two tables are linked via a Primary/Foreign Key pair. This means that no valid person can be created without there also being a valid corresponding street record."
msgstr ""

#: ../../postgres/adding_data.rst:118
# 472a9cd07cf548e6b4e968db0fb1a3dc
msgid "Here is how we made our friend:"
msgstr ""

#: ../../postgres/adding_data.rst:126
# 7ceddbb815bb4ce6b5020a7c923e41e5
msgid "If you look at the streets table again (using a select statement as before), you'll see that the :kbd:`id` for the :kbd:`Main Street` entry is :kbd:`2`. That's why we could merely enter the number :kbd:`2` above. Even though we're not seeing :kbd:`Main Street` written out fully in the entry above, the database will be able to associate that with the :kbd:`street_id` value of :kbd:`2`."
msgstr ""

#: ../../postgres/adding_data.rst:134
# 8e55735f41474c6f99e0a38faee2f6e4
msgid "Select data"
msgstr ""

#: ../../postgres/adding_data.rst:136
# f9c23e0280c749aca02a87dfe58a626c
msgid "We have already shown you the syntax for selecting records. Lets look at a few more examples:"
msgstr ""

#: ../../postgres/adding_data.rst:151
# 3796c0fae78d4b3cbc546139fbbe7f06
msgid "In later sessions we will go into more detail on how to select and filter data."
msgstr ""

#: ../../postgres/adding_data.rst:154
# f6d6e84bba1242aaa6a76310c0ccb578
msgid "Update data"
msgstr ""

#: ../../postgres/adding_data.rst:156
# 4d9fa12f98164e288ac97e44979a9dfe
msgid "What is you want to make a change to some existing data? For example a street name is changed:"
msgstr ""

#: ../../postgres/adding_data.rst:163
# f871ad59832240eb91c680594f7847b3
msgid "Be very careful using such update statements - if more than one record matches your :kbd:`WHERE` clause, they will all be updated!"
msgstr ""

#: ../../postgres/adding_data.rst:166
# 1d9709357e334e15ac9dd2afe3262e3b
msgid "A better solution is to use the primary key of the table to reference the record to be changed:"
msgstr ""

#: ../../postgres/adding_data.rst:173
# 4bdc7751f490476caf78db0a62890f2e
msgid "It should return :kbd:`UPDATE 1`."
msgstr ""

#: ../../postgres/adding_data.rst:175
# bb7e32307bd14122bb0cb10bbac6d1f9
msgid "the :kbd:`WHERE` statement criteria are case sensitive :kbd:`Main Street` <> :kbd:`Main street`"
msgstr ""

#: ../../postgres/adding_data.rst:179
# 6da85561c7bd458e9e38daa40fc5c4af
msgid "Delete Data"
msgstr ""

#: ../../postgres/adding_data.rst:181
# 19d6cf3c010d485396b89133723b315f
msgid "Some times you fall out of friendship with people. Sounds like a job for the :kbd:`DELETE` command!"
msgstr ""

#: ../../postgres/adding_data.rst:188
# 058105af831a403291fa0c6caac3cf48
msgid "Let's look at our people table now:"
msgstr ""

#: ../../postgres/adding_data.rst:197
# 95548c2c60a0462c8f42f002008c967f
msgid "**Exercise:** Use the skills you learned earlier to add some new friends to your database:"
msgstr ""

#: ../../postgres/adding_data.rst:210
#: ../../postgres/data_model.rst:483
#: ../../postgres/db_intro.rst:425
#: ../../postgres/queries.rst:314
#: ../../postgres/rules.rst:58
#: ../../postgres/views.rst:80
# 6d5526a238484e14a80b3587d6d4e341
# 7554b6af35414d0891d3117c34a9e74b
# 0fbd1a70778046da9866b6537e89b338
# 8c97e0673f3642328a97b76021f649d7
# e1eb96a312b84dfa8f46ce3135196776
# aa30183776df402bbf6e0440a1e501fd
msgid "|IC|"
msgstr ""

#: ../../postgres/adding_data.rst:212
# 804dabd4bc8441a9bced63836c412886
msgid "Now you know how to add new data to the existing models you created previously. Remember that if you want to add new kinds of data, you may want to modify and/or create new models to contain that data."
msgstr ""

#: ../../postgres/adding_data.rst:217
#: ../../postgres/data_model.rst:489
#: ../../postgres/db_intro.rst:431
#: ../../postgres/queries.rst:320
#: ../../postgres/rules.rst:64
#: ../../postgres/views.rst:85
# 7b9141aa015f4132a18b2cd74b4fa0ba
# 6c36c2312cdd43e2af51faa585585a6d
# 67f9eaea0baf4171bb02de73514f2f65
# 043c28a92d11410ba150afc7e75ec2ee
# 1e35cb7517d44db7b7f67083d48d3f80
# 7215cae28a5c40fc893bf43e45035ae1
msgid "|WN|"
msgstr ""

#: ../../postgres/adding_data.rst:219
# e1a661127bb1438d8ec9e724c509714d
msgid "Now that you've added some data, you'll learn how to use queries to access this data in various ways."
msgstr ""

#: ../../postgres/data_model.rst:2
# c4374761445e499482f573c754c30e00
msgid "|LS| Implementing the Data Model"
msgstr ""

#: ../../postgres/data_model.rst:4
# 4c14ad3a3d1745a8808400d5e2a5a37b
msgid "Now that we've covered all the theory, let's create a new database. This database will be used for our exercises for the lessons that will follow afterwards."
msgstr ""

#: ../../postgres/data_model.rst:8
# ba2504b8cc994d8b99f34e421665a58a
msgid "**The goal for this lesson:** To install the required software and use it to implement our example database."
msgstr ""

#: ../../postgres/data_model.rst:12
# 0cda76bed49744df9aa5233400256940
msgid "Install PostgreSQL"
msgstr ""

#: ../../postgres/data_model.rst:14
#: ../../postgres/data_model.rst:51
# 40f813f84ac04af4a3e1daeff8ff809b
# 2e7bfbbdc77f41fc93ff496da23a7da1
msgid "Under Ubuntu:"
msgstr ""

#: ../../postgres/data_model.rst:20
# 6d0346c6fa0a464a8352b9180ff32038
msgid "You should get a message like this:"
msgstr ""

#: ../../postgres/data_model.rst:39
# 44150b34689b40208156bf8678dd0fa2
msgid "Press :kbd:`Y` and :kbd:`Enter` and wait for the download and installation to finish."
msgstr ""

#: ../../postgres/data_model.rst:43
# 182f25e009a049db9d6f47e4de16bd4b
msgid "Help"
msgstr ""

#: ../../postgres/data_model.rst:45
# 2fcc1b3337bb4fb69e9908ceac552994
msgid "PostgreSQL has very good `online <http://www.postgresql.org/docs/9.1/static/index.html>`_ documentation."
msgstr ""

#: ../../postgres/data_model.rst:49
# 2a57681ec36349028884716dbb3e9a09
msgid "Create a database user"
msgstr ""

#: ../../postgres/data_model.rst:53
# 6d7cb4f2114d4439b288239c63e76648
msgid "After the installation is complete, run this command to become the postgres user and then create a new database user:"
msgstr ""

#: ../../postgres/data_model.rst:60
# abeae205aad0462d938736eb5076c831
msgid "Type in your normal log in password when prompted (you need to have sudo rights)."
msgstr ""

#: ../../postgres/data_model.rst:62
# d5ebf01d230a43479ec4468afc02c707
msgid "Now, at the postgres user's bash prompt, create the database user. Make sure the user name matches your unix login name: it will make your life much easier, as postgres will automatically authenticate you when you are logged in as that user."
msgstr ""

#: ../../postgres/data_model.rst:71
# e497f4e9b733463784bb545d946b679c
msgid "Enter a password when prompted. I normally use a different password to my usual unix login."
msgstr ""

#: ../../postgres/data_model.rst:74
# ad870276ff4f4e928e9badb15cee9266
msgid "What do those options mean?"
msgstr ""

#: ../../postgres/data_model.rst:86
# 91f78df2ed4b4737940b9a97ddaea657
msgid "Now you should should leave the postgres user's bash shell environment by typing:"
msgstr ""

#: ../../postgres/data_model.rst:94
# df688bbc82d94554824b68d6518b8bb7
msgid "Verify the new account"
msgstr ""

#: ../../postgres/data_model.rst:100
# 6ee1a35c1d67422aabfcfd265d414a4c
msgid "Should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:113
#: ../../postgres/data_model.rst:144
# 79916eb8824447ee8a2048a018969a54
# aafbadb7819c4b4e986fbf7640a0b78d
msgid "Type :kbd:`q` to exit."
msgstr ""

#: ../../postgres/data_model.rst:116
# 931904d0027243ae9aa1169bad865b9a
msgid "Create a database"
msgstr ""

#: ../../postgres/data_model.rst:118
# 65235eafb18a4b58853a3fceccd794b2
msgid "The :kbd:`createdb` command is used to create a new database. It should be run from the bash shell prompt."
msgstr ""

#: ../../postgres/data_model.rst:125
# 4247c279841a41d3b14b4e6fa4812849
msgid "You can verify the existence of your new database by using this command:"
msgstr ""

#: ../../postgres/data_model.rst:131
# 1b2bf5fa357c4bb78a21765331ee90c8
msgid "Which should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:147
# 43cde38106474aff9c97dc1358e504f0
msgid "Starting a database shell session"
msgstr ""

#: ../../postgres/data_model.rst:149
# 968ac49cb4274073b5a6cbb327c27604
msgid "You can connect to your database easily like this:"
msgstr ""

#: ../../postgres/data_model.rst:155
# ed9d5fa43ba648eba390050c0b3582e9
msgid "To exit out of the psql database shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:161
# 55fbb25cef6d4807acd08521755a2791
msgid "For help in using the shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:167
# 99823bae4293416682e9d1c8b308c92d
msgid "For help in using sql commands, type:"
msgstr ""

#: ../../postgres/data_model.rst:173
# 074478d9957943b19b0e9be94637e0b6
msgid "To get help on a specific command, type (for example):"
msgstr ""

#: ../../postgres/data_model.rst:179
# 0663b3fcecd24e1d9ec8b9cf23c7189d
msgid "See also the `Psql cheat sheet <../_static/postgres/psql_cheatsheet.pdf>`_ - available online `here <http://www.postgresonline.com/special_feature.php?sf_name=postgresql83_psql_cheatsheet&outputformat=html>`_."
msgstr ""

#: ../../postgres/data_model.rst:184
# 92e9bcbff59344b4b9ecfab5a81ac067
msgid "Make Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:186
# 5ef743510d294df6977e2b0b989c489c
msgid "Let's start making some tables! We will use our ER Diagram as a guide. First, let's create a streets table:"
msgstr ""

#: ../../postgres/data_model.rst:193
# 0e0b138da4554424a0924d9ba97952b1
msgid ":kbd:`serial` and :kbd:`varchar` are **data types**. :kbd:`serial` tells PostgreSQL to start an integer sequence (autonumber) to populate the :kbd:`id` automatically for every new record. :kbd:`varchar(50)` tells PostgreSQL to create a character field of 50 characters in length."
msgstr ""

#: ../../postgres/data_model.rst:198
# 29fa2bd8fcb645c48063516f5a66bd34
msgid "You will notice that the command ends with a :kbd:`;` - all SQL commands should be terminated this way. When you press enter, psql will report something like this:"
msgstr ""

#: ../../postgres/data_model.rst:210
# 823962c7243c474b806f58bf2f4f0502
msgid "That means your table was created successfully, with a primary key :kbd:`streets_pkey` using :kbd:`streets.id`."
msgstr ""

#: ../../postgres/data_model.rst:213
# be7d72fe74bc42f58dbc8ac6401483af
msgid "Note: If you hit return without entering a :kbd:`;`, then you will get a prompt like this: :kbd:`address-#`. This is because PG is expecting you to enter more. Enter :kbd:`;` to run your command."
msgstr ""

#: ../../postgres/data_model.rst:217
# 499f99d59e7f49a1a561d446ad281cad
msgid "To view your table schema, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:223
#: ../../postgres/data_model.rst:242
# 0f540cf296b34b8c9fffc3b2028fe9eb
# d73fdd6db4ee4017afd4ba6be5329f1a
msgid "Which should show something like this:"
msgstr ""

#: ../../postgres/data_model.rst:236
# 29a8378f7acf4997a820237a14b26013
msgid "To view your table contents, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:250
# 368f439634ec4f209ef53ae080c824d6
msgid "As you can see, our table is empty!"
msgstr ""

#: ../../postgres/data_model.rst:252
# dca3ababfbf84805b98fc9d1f1e557be
msgid "Use the approach shown above to make a table called people: Add fields such as phone number, home address, name, etc. (these aren't all valid names: change them to make them valid)."
msgstr ""

#: ../../postgres/data_model.rst:255
# dc4253ea79334d3f98104176bbc5b0a4
msgid "Write the SQL you create here:"
msgstr ""

#: ../../postgres/data_model.rst:296
#: ../../postgres/queries.rst:289
# a2e7b02664e244df9073c572bfe4d46e
# b0c04b496d5946568d939292fb2fb46f
msgid "Solution:"
msgstr ""

#: ../../postgres/data_model.rst:306
# 3c71c803af7948ffbe7f0c0874b102bb
msgid "The schema for the table (enter :kbd:`\\\\d people`) looks like this:"
msgstr ""

#: ../../postgres/data_model.rst:322
# 59242a3bdc534d78bcaf53fc587d225d
msgid "For illustration purposes, we have purposely omitted the fkey constraint."
msgstr ""

#: ../../postgres/data_model.rst:326
# 8f640da57ed848efa004ec75783fe0eb
msgid "Create Keys in SQL"
msgstr ""

#: ../../postgres/data_model.rst:328
# 7ead3dd1af014643b0c458e5706d128e
msgid "The problem with our solution above is that the database doesn't know that people and streets have a logical relationship. To express this relationship, we have to define a foreign key that points to the primary key of the streets table."
msgstr ""

#: ../../postgres/data_model.rst:337
# 4afe46f8026547ab93de9a1b6e1b0ee1
msgid "adding the key after the table has been created"
msgstr ""

#: ../../postgres/data_model.rst:338
# ccaa2c5306da4cb2a39495db18779b56
msgid "defining the key at time of table creation"
msgstr ""

#: ../../postgres/data_model.rst:340
# 4320c4512e03435d8696e9535a4f3a11
msgid "Our table has already been created, so let's do it the first way:"
msgstr ""

#: ../../postgres/data_model.rst:348
# 9c8b12081212469680eacfca2672c0a5
msgid "That tells the :kbd:`people` table that its :kbd:`street_id` fields must match a valid street :kbd:`id` from the :kbd:`streets` table."
msgstr ""

#: ../../postgres/data_model.rst:351
# 8dba822b00744029ac3bb9dad3210b8d
msgid "The more usual way to create a constraint is to do it when you create the table:"
msgstr ""

#: ../../postgres/data_model.rst:361
# 8b27d0b52427422189eabbcfe5e9a149
msgid "After adding the constraint, our table schema looks like this now:"
msgstr ""

#: ../../postgres/data_model.rst:381
# 1bc6779122e04c6e9a04a6d61fd08c51
msgid "Create Indexes in SQL"
msgstr ""

#: ../../postgres/data_model.rst:383
# 70293d3ac7c842ab9ccc81309c440c80
msgid "We want lightning fast searches on peoples names. To provide for this, we can create an index on the name column of our people table:"
msgstr ""

#: ../../postgres/data_model.rst:409
# 37ff7d7fb8854bdc8dca51db6ee919ed
msgid "Dropping Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:411
# 5cfedf2c81564ef8b93968da4f5cfaeb
msgid "If you want to get rid of a table you can use the :kbd:`drop` command:"
msgstr ""

#: ../../postgres/data_model.rst:418
# 0ec8da5576d54f04967b9ed959bca38e
msgid "In our example, this would not work - why?"
msgstr ""

#: ../../postgres/data_model.rst:420
# 6eda9fe16d584229b88be9a60daf4618
msgid "Some deep and inspired thoughts as to why..."
msgstr ""

#: ../../postgres/data_model.rst:436
# f3fca094597145048dd740e0a5276db1
msgid "Sometimes you just can't stand having a table any more. Maybe you are sick of all your friends. How can you get rid of them all in one easy step? Drop the table of course! Of course, right now too much hard work has gone into our table to get rid of it on a whim, but if you really hate your friends that much, nothing's stopping you from ridding yourself of them forever:"
msgstr ""

#: ../../postgres/data_model.rst:446
# 9507422d4d704642bf9b0d4e4f95811c
msgid "This time it works fine! Why? Are people less important than streets?"
msgstr ""

#: ../../postgres/data_model.rst:448
# 1caa0a599f904f38a605ee82b573ed08
msgid "Some thoughts on why you could drop people:"
msgstr ""

#: ../../postgres/data_model.rst:464
# b0163c6c9a6247f5a87fc946a8feb81e
msgid "If you actually did enter that command and dropped the :kbd:`people` table, now would be a good time to rebuild it, as you will need it in the next exercises."
msgstr ""

#: ../../postgres/data_model.rst:469
# 1f0f307ecd5e475298b021e678d55344
msgid "A word on PG Admin III"
msgstr ""

#: ../../postgres/data_model.rst:471
# bb46cdd52b4d44e899a3fb18afffc827
msgid "We are showing you the SQL commands from the psql prompt because it's a very useful way to learn about databases. However, there are quicker and easier ways to do a lot of what we are showing you. Install PGAdminIII and you can create, drop, alter etc tables using 'point and click' operations in a GUI."
msgstr ""

#: ../../postgres/data_model.rst:476
# 5f4aefd3e68449adb4ff6e8105650a7a
msgid "Under Ubuntu, you can install it like this:"
msgstr ""

#: ../../postgres/data_model.rst:485
# 9780e2d458a54623bec46dfb496821d0
msgid "You have now seen how to create a brand new database, starting completely from scratch."
msgstr ""

#: ../../postgres/data_model.rst:491
# 0ae2f629ebee40daa1dbadcf3f3350df
msgid "Next you'll learn how to use the DBMS to add new data."
msgstr ""

#: ../../postgres/db_intro.rst:2
# 52d7aaa8498344d88a7d2abb44866434
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../postgres/db_intro.rst:4
# 6ea66475dad0417783a3e0b209f7c516
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ../../postgres/db_intro.rst:8
# 3a5adf9dc35b4a2497ea8b045eabd210
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../postgres/db_intro.rst:11
# 62d7dae8f3634402a82683af9b57496e
msgid "What is a Database?"
msgstr ""

#: ../../postgres/db_intro.rst:13
# d9029806cb994a238100c65eb1f078c9
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:18
# 8aae4755a6dc4cee99e18032c57426c5
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:23
# 2f24ba1b186f4d00a5f3eedadcd85e69
msgid "Tables"
msgstr ""

#: ../../postgres/db_intro.rst:25
# ce03bf98e3714f718f503e1c1e22ae65
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:40
# 8efd21862d374e4e9960d7c3b61ceb10
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../postgres/db_intro.rst:43
# d37a24ef343c4e72b9a2a9d43397779f
msgid "Columns / Fields"
msgstr ""

#: ../../postgres/db_intro.rst:45
# 53e7bec1455041f6952e9eb5276d728d
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:52
# b54abd995d6343f49da1a52c24401fbb
msgid "A column:"
msgstr ""

#: ../../postgres/db_intro.rst:61
# a3245c605cb64a91b451ccdfa291e377
msgid "A field:"
msgstr ""

#: ../../postgres/db_intro.rst:68
# aa38e7ea6ac04a2a93b07aaab7f31b33
msgid "Records"
msgstr ""

#: ../../postgres/db_intro.rst:70
# d175fadd49a840f1996399af17dad5cb
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ../../postgres/db_intro.rst:78
# 4981b929511c4bae862079d563e8034d
msgid "Datatypes"
msgstr ""

#: ../../postgres/db_intro.rst:80
# 15b8093444f64603987a4e89722357fe
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ../../postgres/db_intro.rst:83
# e45e74aed9ac4526a332eb83c5355a14
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../postgres/db_intro.rst:85
# 1103c016120444c0b19baad2cf4646dd
msgid "String - to store free-form text data"
msgstr ""

#: ../../postgres/db_intro.rst:86
# 649fc25fc86a484aba6cf365af64fa37
msgid "Integer - to store whole numbers"
msgstr ""

#: ../../postgres/db_intro.rst:87
# f7d6bd652ebc4ef286b86241331abba6
msgid "Real - to store decimal numbers"
msgstr ""

#: ../../postgres/db_intro.rst:88
# 2114dfb6e08d42b4a5df6a8f1a669048
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../postgres/db_intro.rst:89
# 6cb63d91dd5b40cf80b2fed1cf1beeb7
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ../../postgres/db_intro.rst:91
# 26fbdb84731648c8bd84279a478c2a13
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ../../postgres/db_intro.rst:111
# dcfb35336e814b71b7af70c9bce76241
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ../../postgres/db_intro.rst:115
# d4695c10f0844f9aad78ae7324e00f33
msgid "Modelling an Address Database"
msgstr ""

#: ../../postgres/db_intro.rst:117
# 6bc652f1b81a4075a9c4372b3301c0e5
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ../../postgres/db_intro.rst:120
# 58199ffebbd1480ba6c25b9086e7c768
msgid "Write some address properties in the space provided:"
msgstr ""

#: ../../postgres/db_intro.rst:155
# c7b29b82ffab40bb9cb136e2ca221c55
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ../../postgres/db_intro.rst:160
# b45992b9016744c7aebb0ea547f5752d
msgid "Database Theory"
msgstr ""

#: ../../postgres/db_intro.rst:162
# 735878234c4c428d9b5143a6208aaf47
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ../../postgres/db_intro.rst:166
# 3eafd3d46e7f4ba189af8673a0f9c886
msgid "Normalisation"
msgstr ""

#: ../../postgres/db_intro.rst:168
# ace63217d0b64a5aaa63e7bf31c1c75b
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ../../postgres/db_intro.rst:171
# 07942f6c9caa45b18d270076a5f54b49
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:176
# f4e8311fe440480dab1abc4326e16e19
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../postgres/db_intro.rst:178
# 66b8b042b7b140de91aa43177e629487
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../postgres/db_intro.rst:203
# 0b5f4d49b6594f97b56b7e214dac2476
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ../../postgres/db_intro.rst:207
# 2021dac2a75343daa249854c1194b497
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ../../postgres/db_intro.rst:237
# a1afd701b6944a7fbc788558d1a57952
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../postgres/db_intro.rst:241
# ddbd4b4ce37648c487c9aee23e1db10c
msgid "Indexes"
msgstr ""

#: ../../postgres/db_intro.rst:243
# a19e7924c2e04543b1c9965b6e77ebf9
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:246
# 9b473aa81ebc41348b5db688ef177980
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ../../postgres/db_intro.rst:256
# ab700802463c4cea9a96a693cf465509
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../postgres/db_intro.rst:274
# 95ecd7000a834c449833edeb468a4fb0
msgid "Sequences"
msgstr ""

#: ../../postgres/db_intro.rst:276
# a98a0aa9cedd4c29990500b883f0c897
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ../../postgres/db_intro.rst:279
# b187b94bd7e04b1a8b4bcc75f5fca1c9
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ../../postgres/db_intro.rst:290
# ace70c8b7a1a406ca01ed863e4d0ba20
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../postgres/db_intro.rst:292
# ce22fc5cfe1b4e75904a3727c4aae084
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ../../postgres/db_intro.rst:305
# c54e65ceac3045d992be114d20116289
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../postgres/db_intro.rst:316
# 11949bc30f884e5b8f1139bd0c5ea723
msgid "and"
msgstr ""

#: ../../postgres/db_intro.rst:326
# 34cb0f3bd59949f3b70baced05a6b1cf
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ../../postgres/db_intro.rst:329
# 6c932c36a80d496aa05a4a86506a9422
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ../../postgres/db_intro.rst:335
# 22a79a7634fb44ba8b49f15c0d0a475f
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ../../postgres/db_intro.rst:338
# f3c88c772aa84e41a24813425074f1ad
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ../../postgres/db_intro.rst:370
# 1c1b620334b2457d9f0fbfe2f36c898f
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../postgres/db_intro.rst:372
# b3cd673ddcfb4c31bf549de43ac10f14
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../postgres/db_intro.rst:377
# ab57c2d3b4ac4b7f870ec24c40550b1b
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../postgres/db_intro.rst:380
# 72147be5008a44be996e905e6dc017c2
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ../../postgres/db_intro.rst:383
# 07ce37e422a54081bbcbae4251c683d6
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ../../postgres/db_intro.rst:386
# 9d0f4956a0e140a0a1368e125326a241
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ../../postgres/db_intro.rst:406
# 3dfe7fe77feb4f52a5ebedf755befd4f
msgid "Transactions"
msgstr ""

#: ../../postgres/db_intro.rst:408
# 478c642325c043e9af172730b15014a0
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ../../postgres/db_intro.rst:414
# 52e429fbe4ef418d92df6fda3d37918a
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ../../postgres/db_intro.rst:418
# 37d3ac92da034067a1add1e101bd02a7
msgid "remove R20 from Joe"
msgstr ""

#: ../../postgres/db_intro.rst:419
# 3e64e7bd27ec45299c0ed11cdf43a2e1
msgid "add R20 to Anne"
msgstr ""

#: ../../postgres/db_intro.rst:421
# c7a99fba453b48d2affab821b82abc8c
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ../../postgres/db_intro.rst:427
# c6cdbe66979440269b214ff124638721
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ../../postgres/db_intro.rst:433
# 66a9309557cc4189ae51efd91607dc25
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

#: ../../postgres/index.rst:3
# 549ab2a3ea4a4fd58b5444458c5d8f91
msgid "|MOD| PostgreSQL"
msgstr ""

#: ../../postgres/index.rst:5
# b13ccba2bf4f447a891fcdf043d3d21c
msgid "PostgreSQL is a Database Management System (DBMS). In this module, you'll be shown how to use PostgreSQL to create a new database, as well as accessing other typical DBMS functions."
msgstr ""

#: ../../postgres/queries.rst:2
# b7e59391b95d4055b1da882a781b7cdc
msgid "|LS| Queries"
msgstr ""

#: ../../postgres/queries.rst:4
# 53e7a011a6544fc0b10f8cdc9c38ca21
msgid "When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information."
msgstr ""

#: ../../postgres/queries.rst:7
# 46bf9aed98614be090793fb674471105
msgid "**The goal of this lesson:** To learn how to create queries that will return useful information."
msgstr ""

#: ../../postgres/queries.rst:11
# f1dec8a104584a4695a59e293897ba5e
msgid "Follow-up from previous lesson"
msgstr ""

#: ../../postgres/queries.rst:13
# 3e7d8c5604314fea9c17680a4b5b0bb3
msgid "Let's check that you added a few people to the database successfully:"
msgstr ""

#: ../../postgres/queries.rst:27
# 1ee3307d038b438f85230f293ec3c42b
msgid "Ordering results"
msgstr ""

#: ../../postgres/queries.rst:29
# 9c3a236551bd4a03a2bb2905fa1cb18f
msgid "Let's get a list of people ordered by their house numbers:"
msgstr ""

#: ../../postgres/queries.rst:35
#: ../../postgres/queries.rst:53
#: ../../postgres/queries.rst:187
#: ../../postgres/queries.rst:212
#: ../../postgres/queries.rst:237
#: ../../postgres/queries.rst:254
#: ../../postgres/queries.rst:298
#: ../../postgres/views.rst:30
# 1205677a28234edb85ebdd72a73064db
# c7be1df6a4574e44abca3794b8ca5801
# 44e37bd0d27e4d44904dece439756eda
# 18c378b1481645b7972c3d47916bc0d4
# 4bb06aba2c374741a0e34fa4b88895b0
# 248c677fb54e490ebb0971faca666ca6
# 6c092bb69d9e42c4b86ed9942755074d
# 8a1f56fa864c42aebf0051bb8482c5b3
msgid "Result:"
msgstr ""

#: ../../postgres/queries.rst:47
# 6ea0870059de4004ad26bb08fab72bd7
msgid "You can sort by more than one column:"
msgstr ""

#: ../../postgres/queries.rst:66
# 11795c1954d748c4afb94bfc09edfbac
msgid "Filtering"
msgstr ""

#: ../../postgres/queries.rst:68
# 1524f3b160ed4f5893d81f5873d3f45c
msgid "Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two. Never fear, you can filter the results!"
msgstr ""

#: ../../postgres/queries.rst:72
# 19efa6ac2ae04d02afc27e956cdab8da
msgid "Here is an example of a numerical filter:"
msgstr ""

#: ../../postgres/queries.rst:83
# 41b0d520c7f04c7b949087402076a0a3
msgid "You can combine filters (defined using the :kbd:`WHERE` clause) with sorting (defined using the :kbd:`ORDER BY`)"
msgstr ""

#: ../../postgres/queries.rst:96
# ea27e20590e54b72b98b4b44feac994a
msgid "You can also filter based on text data:"
msgstr ""

#: ../../postgres/queries.rst:107
# 83ed655c1bcc4147ab989a40b2ea2758
msgid "Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`i` in them. If you want to search for a string of letters regardless of case, you can do a case insensitive search using the :kbd:`ILIKE` clause:"
msgstr ""

#: ../../postgres/queries.rst:120
# 51aacbc1edfb42c3ae39947a9395b8b1
msgid "That found everyone with a :kbd:`k` or :kbd:`K` in their name. Using the normal :kbd:`ILIKE` clause, you'd get:"
msgstr ""

#: ../../postgres/queries.rst:132
# a214ffad019644d3910b2ea97530bd36
msgid "Joins"
msgstr ""

#: ../../postgres/queries.rst:134
# 4d8e2db7bb3845d8be58fe6211aeb7bd
msgid "What if you want to see the person's details and their street name (not its id)? In order to do that, you need to join the two tables together in a single query. Lets look at an example:"
msgstr ""

#: ../../postgres/queries.rst:144
# 9ae2c42501704be59dba223d031ae449
msgid "With joins, you will always state the two tables the information is coming from, in this case people and streets.  You also need to specify which two keys must match (foreign key & primary key). If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!"
msgstr ""

#: ../../postgres/queries.rst:150
# 1de5c090cf9b4954adde98003652872c
msgid "Here is what the correct output will look like:"
msgstr ""

#: ../../postgres/queries.rst:162
# bdd70a52324f44a78ad8add989eecfbd
msgid "We will revisit joins as we create more complex queries later. Just remember they provide a simple way to combine the information from two or more tables."
msgstr ""

#: ../../postgres/queries.rst:166
# 984042aa57d040b895dd6d21aba92bb9
msgid "Subselect"
msgstr ""

#: ../../postgres/queries.rst:168
# 6d527ef66aa7483da603e22be7ec3c66
msgid "First, let's do a little tweaking to our data:"
msgstr ""

#: ../../postgres/queries.rst:178
# f3923ecec9214fc49e1b9dcbfbd61989
msgid "Let's take a quick look at our data after those changes - we reuse our query from the previous section:"
msgstr ""

#: ../../postgres/queries.rst:199
# 591f2c8342684e7a91359d2ec25ba210
msgid "Now let's show you a subselection on this data. We want to show only people who live in :kbd:`street_id` number :kbd:`1`."
msgstr ""

#: ../../postgres/queries.rst:222
# 0cf7e304311649cbb41e9746f2d1d62a
msgid "This is a contrived example and in the above situations it may have been overkill. However when you have to filter based on a selection, subselects are really useful!"
msgstr ""

#: ../../postgres/queries.rst:227
# bf9802d11c6848e39c7559b71f87fc5a
msgid "Aggregate Queries"
msgstr ""

#: ../../postgres/queries.rst:229
# 7792c93ebd4341cc92fa97267808240d
msgid "One of the powerful features of a database is its ability to summarise the data in its tables. These summaries are called aggregate queries. Here is a typical example:"
msgstr ""

#: ../../postgres/queries.rst:246
# 36166722accd4c8a94e6d4430d9e3d6a
msgid "If we want the counts summarised by street name we can do this:"
msgstr ""

#: ../../postgres/queries.rst:265
# 13be582825ad4f799b110647a73b6677
msgid "Because there is no :kbd:`ORDER BY` clause, on your computer these data may not be in the same order as shown here."
msgstr ""

#: ../../postgres/queries.rst:268
# c7b7502fa28c47659d72b4943a4acd8a
msgid "Exercise:"
msgstr ""

#: ../../postgres/queries.rst:270
# f863f52c1e4f4385ac68d4bd5d8ca894
msgid "Summarise the people by street name and show the actual street names instead of the street_id's"
msgstr ""

#: ../../postgres/queries.rst:309
# 374d2e5802d24c258cddd5ae8cc4ea60
msgid "You will notice that we have prefixed field names with table names (e.g. people.name and streets.name). This needs to be done whenever the field name is ambiguous."
msgstr ""

#: ../../postgres/queries.rst:316
# 23cd59dce1f84033b0dcd990a642ad1b
msgid "You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it."
msgstr ""

#: ../../postgres/queries.rst:322
# be9d30036bb5440dbb534d288ece5851
msgid "Next you'll see how to create views from the queries that you've written."
msgstr ""

#: ../../postgres/rules.rst:2
# 562a9b5d7e734194afebc2d186e8f714
msgid "|LS| Rules"
msgstr ""

#: ../../postgres/rules.rst:4
# f2d75a324033491d9da686a138bb9524
msgid "Rules allow the \"query tree\" of an incoming query to be rewritten. One common usage is to implement views, including updatable view. *- Wikipedia*"
msgstr ""

#: ../../postgres/rules.rst:7
# 1f3f4f3d38334e09bf55d609ca6e3554
msgid "**The goal for this lesson:** To learn how to create new rules for the database."
msgstr ""

#: ../../postgres/rules.rst:11
# 3b8f1dbb6789494ea539bf39fe7d44db
msgid "Materialised Views (Rule based views)"
msgstr ""

#: ../../postgres/rules.rst:13
# fd428eb4335b4065b862c8b022c1849e
msgid "Say you want to log every change of phone_no in your people table in to a people_log table. So you set up a new table"
msgstr ""

#: ../../postgres/rules.rst:20
# 8f903907d8bb470b8ba5a65b2328afb9
msgid "In the next step create a rule, that logs every change of a phone_no in the people table into the people_log table:"
msgstr ""

#: ../../postgres/rules.rst:29
# 1fd8860cdd4c474da8f7cd93fa9f8572
msgid "To test that the rule works, let's modify a phone number:"
msgstr ""

#: ../../postgres/rules.rst:35
# 1bb27f01d8d2493faaa9ad463efb8e6b
msgid "Check that the table was updated correctly:"
msgstr ""

#: ../../postgres/rules.rst:44
# ec883c10cae34649be19e669130d7f63
msgid "Now, thanks to the rule we created, the :kbd:`people_log` table will look like this:"
msgstr ""

#: ../../postgres/rules.rst:54
# 614402b09d8147c89bbee73325aff87a
msgid "The value of the :kbd:`time` field will depend on the current date and time."
msgstr ""

#: ../../postgres/rules.rst:60
# d6fc95010b39476fb09cd734b43e8d0d
msgid "Rules allow you to automatically add or change data in your database to reflect changes in other parts of the database."
msgstr ""

#: ../../postgres/rules.rst:66
# 78249866c7d6466bbca69133476760e4
msgid "The next module will introduce you to PostGIS, which takes these database concepts and applies them to GIS data."
msgstr ""

#: ../../postgres/views.rst:2
# 372e85ef1ec94abdb76e84b8c1591112
msgid "|LS| Views"
msgstr ""

#: ../../postgres/views.rst:4
# 23304babccbf4fd98ab5c3a694f3ee83
msgid "When you write a query, you need to spend a lot of time and effort formulating it. With views, you can save the definition of a sql query in a reusable 'virtual table'."
msgstr ""

#: ../../postgres/views.rst:8
# 18f8fa60aa694492b46ff7dae9aa5178
msgid "**The goal for this lesson:** To save a query as a view."
msgstr ""

#: ../../postgres/views.rst:11
# 0e8bf49fca9d419984cadf536f8fda48
msgid "Creating a View"
msgstr ""

#: ../../postgres/views.rst:13
# cb30bf7dcee94f4e8d4bf58c082cf9e3
msgid "You can treat a view just like a table, but its data is sourced from a query. Let's make a simple view based on the above."
msgstr ""

#: ../../postgres/views.rst:23
# e9b9003a34af44a0a95426bfa85af887
msgid "As you can see the only change is the :kbd:`create view roads_count_v as` part at the beginning. The nice thing is that we can now select data from that view:"
msgstr ""

#: ../../postgres/views.rst:42
# b5d384f7b69a4207a0c9a10c31112aa5
msgid "Modifying a View"
msgstr ""

#: ../../postgres/views.rst:44
# f2b484f4f20149f1a596b6b14a5ae834
msgid "A view is not fixed, and it contains no 'real data'. This means you can easily change it without impacting on any data in your database."
msgstr ""

#: ../../postgres/views.rst:55
# b2fa544f4af24cdda44b865cae73b4a2
msgid "(This example also shows the best practice convention of using UPPER CASE for all SQL keywords.)"
msgstr ""

#: ../../postgres/views.rst:58
# 8d0d9f1655914664a8e8a3f8e803590d
msgid "You will see that we have added an :kbd:`ORDER BY` clause so that our view rows are nicely sorted:"
msgstr ""

#: ../../postgres/views.rst:71
# 2af5e0746fa445e781e356ec05aa5af5
msgid "Dropping a View"
msgstr ""

#: ../../postgres/views.rst:73
# aaf7f1b1e3094265a000b2a21f7d6a5d
msgid "If you no longer need a view, you can delete it like this:"
msgstr ""

#: ../../postgres/views.rst:82
# a22eccc326ee47928169c6f1cca3597c
msgid "Using views, you can save a query and access its results as if it were a table."
msgstr ""

#: ../../postgres/views.rst:87
# 1dd4135a62c744f9a201df1a7cfe10dc
msgid "Sometimes, when changing data, you want your changes to have effects elsewhere in the database. The next lesson will show you how to do this."
msgstr ""

