# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-19 00:01\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../postgres/adding_data.rst:2
# 71ef1d52c4a04c8a96d6f0d50763d2cf
msgid "|LS| Adding Data to the Model"
msgstr ""

#: ../../postgres/adding_data.rst:4
# 2f9706f836454d688b7134bc3b095aba
msgid "The models we've created will now need to be populated with the data they're intended to contain."
msgstr ""

#: ../../postgres/adding_data.rst:7
# f4f8d1e617714db8ade597ece6033bd6
msgid "**The goal for this lesson:** To learn how to insert new data into the database models."
msgstr ""

#: ../../postgres/adding_data.rst:11
# 98846bdc1037427d9f45d7e93d9b92a9
msgid "Insert statement"
msgstr ""

#: ../../postgres/adding_data.rst:13
# 710bcda2364c438d9f3613bc41f13811
msgid "How do you add data to a table? The sql :kbd:`INSERT` statement provides the functionality for this:"
msgstr ""

#: ../../postgres/adding_data.rst:20
# f5f470b3f5aa438e9e17e18a0430eadc
msgid "A couple of things to note:"
msgstr ""

#: ../../postgres/adding_data.rst:22
# a6e11a4b7af54f47ab748f594c8e19be
msgid "after the table name (:kbd:`streets`), you list the column names that you will be populating (in this case only the :kbd:`name` column)."
msgstr ""

#: ../../postgres/adding_data.rst:24
# a572208710fa42d281b2b71e40882463
msgid "after the :kbd:`values` keyword, place the list of field values."
msgstr ""

#: ../../postgres/adding_data.rst:25
# edd1682d4147420ab92cb8698824c5e0
msgid "strings should be quoted using single quotes."
msgstr ""

#: ../../postgres/adding_data.rst:26
# 27594eff97cb482396f3217c365a5d5c
msgid "you will note that I did not insert a value for the :kbd:`id` column - that is because it is a sequence and will be autogenerated."
msgstr ""

#: ../../postgres/adding_data.rst:28
# 7931aedfada14948b51436ba38cd7282
msgid "if you do manually set the :kbd:`id`, you may cause serious problems with the integrity of your database."
msgstr ""

#: ../../postgres/adding_data.rst:31
# fb9e9075ae0440b09844a0e63044cc43
msgid "You should see :kbd:`INSERT 0 1` if it is successful."
msgstr ""

#: ../../postgres/adding_data.rst:33
# b0545aaf558140e4b2ffea82bafd1351
msgid "You can see the result of your insert action by selecting all the data in the table:"
msgstr ""

#: ../../postgres/adding_data.rst:40
# fef2a65a34af4718b3008e684effa4a1
msgid "result:"
msgstr ""

#: ../../postgres/adding_data.rst:50
# 9e36d9a4f4d34549bf75ef1488b3287d
msgid "Now you try:"
msgstr ""

#: ../../postgres/adding_data.rst:52
# c997ddea328f4aa88e8e76fb3be1e937
msgid "Use the :kbd:`INSERT` command to add a new street to the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:54
# 215c3959312d4178861a47e8fddc3641
msgid "Write the sql you used here:"
msgstr ""

#: ../../postgres/adding_data.rst:70
# 6ef33a7ce782422184da95560d991670
msgid "Sequencing data addition according to constraints"
msgstr ""

#: ../../postgres/adding_data.rst:72
# c6d051a4c35949f1a01e5cf1ffed82e5
msgid "Try to add a person to the people table with the following details:"
msgstr ""

#: ../../postgres/adding_data.rst:81
# 3d96af2df2454d6eb2a1470276facbf4
msgid "Remember, we defined phone numbers as strings."
msgstr ""

#: ../../postgres/adding_data.rst:83
# 707d2ea4d19944e5bbff2f187522ec50
msgid "What problems did you encounter?"
msgstr ""

#: ../../postgres/adding_data.rst:104
# d3a2a76a013a43e587f6ca5b5c55639f
msgid "You should have an error report if you try to do this without first creating a record for Main Street in the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:107
# 60a1d6ae57d6458789bb09636a5a3e04
msgid "What error did you get?"
msgstr ""

#: ../../postgres/adding_data.rst:110
# a5a449701f254717aeb1af1b280e23fb
msgid "You can't add the street using its name"
msgstr ""

#: ../../postgres/adding_data.rst:111
# 459d2a85d9dc4f0184c9c341fcfb5d35
msgid "You can't add a street using a street :kbd:`id` before first creating the street record on the streets table"
msgstr ""

#: ../../postgres/adding_data.rst:114
# 1987bc4f0c844b6b8a676b6c34da3756
msgid "Remember that our two tables are linked via a Primary/Foreign Key pair. This means that no valid person can be created without there also being a valid corresponding street record."
msgstr ""

#: ../../postgres/adding_data.rst:118
# 3ca4b844d83b4bd9b9a183f47c6968e6
msgid "Here is how we made our friend:"
msgstr ""

#: ../../postgres/adding_data.rst:126
# 34486dbaca8d41eb8def59dac213a9b0
msgid "If you look at the streets table again (using a select statement as before), you'll see that the :kbd:`id` for the :kbd:`Main Street` entry is :kbd:`2`. That's why we could merely enter the number :kbd:`2` above. Even though we're not seeing :kbd:`Main Street` written out fully in the entry above, the database will be able to associate that with the :kbd:`street_id` value of :kbd:`2`."
msgstr ""

#: ../../postgres/adding_data.rst:134
# 12efc2d75ade473f828ae6c629b59773
msgid "Select data"
msgstr ""

#: ../../postgres/adding_data.rst:136
# 9eb339381d6e4f69a458679d0ab96149
msgid "We have already shown you the syntax for selecting records. Lets look at a few more examples:"
msgstr ""

#: ../../postgres/adding_data.rst:151
# b2d5a6427fac43f19f409f93990fb119
msgid "In later sessions we will go into more detail on how to select and filter data."
msgstr ""

#: ../../postgres/adding_data.rst:154
# 1b3c52d566f247e08610d7a69965352c
msgid "Update data"
msgstr ""

#: ../../postgres/adding_data.rst:156
# 4449cd8d2f6441108542abbbfa2e2016
msgid "What is you want to make a change to some existing data? For example a street name is changed:"
msgstr ""

#: ../../postgres/adding_data.rst:163
# c2612b6d69b44ca19a18b112e14a4cd1
msgid "Be very careful using such update statements - if more than one record matches your :kbd:`WHERE` clause, they will all be updated!"
msgstr ""

#: ../../postgres/adding_data.rst:166
# 3118fec36dae4d52b9bded158b12bf4d
msgid "A better solution is to use the primary key of the table to reference the record to be changed:"
msgstr ""

#: ../../postgres/adding_data.rst:173
# f7fca90c5c634129b4902f6e40a6b9eb
msgid "It should return :kbd:`UPDATE 1`."
msgstr ""

#: ../../postgres/adding_data.rst:175
# 9ead478daec140a5959b3e5235c35f2c
msgid "the :kbd:`WHERE` statement criteria are case sensitive :kbd:`Main Street` <> :kbd:`Main street`"
msgstr ""

#: ../../postgres/adding_data.rst:179
# ca0ea0ec9e8046539a883cfbfaec2e66
msgid "Delete Data"
msgstr ""

#: ../../postgres/adding_data.rst:181
# c3deb17c69c84e6aa2038dcbfd73ef9f
msgid "Some times you fall out of friendship with people. Sounds like a job for the :kbd:`DELETE` command!"
msgstr ""

#: ../../postgres/adding_data.rst:188
# 1a48e0f19731416ba5df81efcba91d85
msgid "Let's look at our people table now:"
msgstr ""

#: ../../postgres/adding_data.rst:197
# dcf37fb902924a1f888299fbc447c30c
msgid "**Exercise:** Use the skills you learned earlier to add some new friends to your database:"
msgstr ""

#: ../../postgres/adding_data.rst:210
#: ../../postgres/data_model.rst:483
#: ../../postgres/db_intro.rst:425
#: ../../postgres/queries.rst:314
#: ../../postgres/rules.rst:58
#: ../../postgres/views.rst:80
# cadb3d0bf13646caa9fafb59a3a7eab4
# 929fbba3bfb14fb38d930f9d000c43fc
# a45b0a2e0d1242f3acae692aaaef88e0
# 03ea98e5ef3c417b929df5776b632a21
# de159e14b3e14e52b1f50e61766175e3
# cb7f4d348abd4e509934ec4463396390
msgid "|IC|"
msgstr ""

#: ../../postgres/adding_data.rst:212
# 92bdbd5b1b8847828a9ec34bf71ba1fb
msgid "Now you know how to add new data to the existing models you created previously. Remember that if you want to add new kinds of data, you may want to modify and/or create new models to contain that data."
msgstr ""

#: ../../postgres/adding_data.rst:217
#: ../../postgres/data_model.rst:489
#: ../../postgres/db_intro.rst:431
#: ../../postgres/queries.rst:320
#: ../../postgres/rules.rst:64
#: ../../postgres/views.rst:85
# 8552bc2b82b94fc59e8e660cbe775d62
# 9edb849fe1ee47388503d4f9cdd234a1
# b59650595d7c4cb2830c8b54e7bc0576
# 4ee9f800ea4d42ceb606137885a96896
# f4caecee769c4eaaaf88b7f5a789072c
# fac450d9485846a8a01b3dcbd8faf3b8
msgid "|WN|"
msgstr ""

#: ../../postgres/adding_data.rst:219
# e5bd403b2c084bdebc770546e9d38803
msgid "Now that you've added some data, you'll learn how to use queries to access this data in various ways."
msgstr ""

#: ../../postgres/data_model.rst:2
# a76276d18bfa40b1a9028eb55ad98278
msgid "|LS| Implementing the Data Model"
msgstr ""

#: ../../postgres/data_model.rst:4
# 93e250dadbfc497cba5756c5a7df7e64
msgid "Now that we've covered all the theory, let's create a new database. This database will be used for our exercises for the lessons that will follow afterwards."
msgstr ""

#: ../../postgres/data_model.rst:8
# 5bb5afb3aebf446aa73053808508d4a2
msgid "**The goal for this lesson:** To install the required software and use it to implement our example database."
msgstr ""

#: ../../postgres/data_model.rst:12
# bbe89ebeddfa4605bfad4163c20a94ba
msgid "Install PostgreSQL"
msgstr ""

#: ../../postgres/data_model.rst:14
#: ../../postgres/data_model.rst:51
# 3290f35383164f37bcb74d7205a7a35a
# 978a38332c6248eca7f4c06b3edf7b0b
msgid "Under Ubuntu:"
msgstr ""

#: ../../postgres/data_model.rst:20
# 73e0dc16593147f09cd3b67e4e40d585
msgid "You should get a message like this:"
msgstr ""

#: ../../postgres/data_model.rst:39
# bff0c16e841f495480f5729ae0f9dabc
msgid "Press :kbd:`Y` and :kbd:`Enter` and wait for the download and installation to finish."
msgstr ""

#: ../../postgres/data_model.rst:43
# 92d08369d9354127bc327272547b2ffb
msgid "Help"
msgstr ""

#: ../../postgres/data_model.rst:45
# 1c0c0b442b6e4726bd382f0b25d82bd6
msgid "PostgreSQL has very good `online <http://www.postgresql.org/docs/9.1/static/index.html>`_ documentation."
msgstr ""

#: ../../postgres/data_model.rst:49
# aacdb7b08dea4a1e8fec66aceb33ad14
msgid "Create a database user"
msgstr ""

#: ../../postgres/data_model.rst:53
# adbabc8521ac4c5b91a6f0ab1de0bd2e
msgid "After the installation is complete, run this command to become the postgres user and then create a new database user:"
msgstr ""

#: ../../postgres/data_model.rst:60
# 4203bbfe86ec474589c1ea15ceffc267
msgid "Type in your normal log in password when prompted (you need to have sudo rights)."
msgstr ""

#: ../../postgres/data_model.rst:62
# 3634fa4169b84d7fa3b90b2d7af72615
msgid "Now, at the postgres user's bash prompt, create the database user. Make sure the user name matches your unix login name: it will make your life much easier, as postgres will automatically authenticate you when you are logged in as that user."
msgstr ""

#: ../../postgres/data_model.rst:71
# 8bb99c54caa2452c9952881401842f9d
msgid "Enter a password when prompted. I normally use a different password to my usual unix login."
msgstr ""

#: ../../postgres/data_model.rst:74
# db358f5290df46378e40d3aa224d3688
msgid "What do those options mean?"
msgstr ""

#: ../../postgres/data_model.rst:86
# b62c5a928d92452da7a4dfd45affcf22
msgid "Now you should should leave the postgres user's bash shell environment by typing:"
msgstr ""

#: ../../postgres/data_model.rst:94
# 34ecb2637e464899a5fde866c155a98b
msgid "Verify the new account"
msgstr ""

#: ../../postgres/data_model.rst:100
# 34308a4cfaef4b1ba794e95525b1d3b7
msgid "Should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:113
#: ../../postgres/data_model.rst:144
# ce13ae16aa2f402db87d35d34d2ddb36
# dbc03726de6d4569892c9454e7567748
msgid "Type :kbd:`q` to exit."
msgstr ""

#: ../../postgres/data_model.rst:116
# 0f734b38f92a496aa1a9c2ac68130da3
msgid "Create a database"
msgstr ""

#: ../../postgres/data_model.rst:118
# 464d0e70bed14598bb3e206f7430cfca
msgid "The :kbd:`createdb` command is used to create a new database. It should be run from the bash shell prompt."
msgstr ""

#: ../../postgres/data_model.rst:125
# f0a3fe2b3601452183e4e643261313e3
msgid "You can verify the existence of your new database by using this command:"
msgstr ""

#: ../../postgres/data_model.rst:131
# 41e55f2b96034f1bae0f6f150bfa8e50
msgid "Which should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:147
# d081dba9623247d39060fb25859f5d20
msgid "Starting a database shell session"
msgstr ""

#: ../../postgres/data_model.rst:149
# 528cfb3994aa48299a16be6bfdc39c31
msgid "You can connect to your database easily like this:"
msgstr ""

#: ../../postgres/data_model.rst:155
# c47c65a7128b4a79ba8bda47d4bfb3b2
msgid "To exit out of the psql database shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:161
# 2e9714a40daf46da9e2522ae310a8528
msgid "For help in using the shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:167
# 9882ab4387c042e8ac7c988e741476d6
msgid "For help in using sql commands, type:"
msgstr ""

#: ../../postgres/data_model.rst:173
# 461aa67a42af4e3fb595190c9afa2ec6
msgid "To get help on a specific command, type (for example):"
msgstr ""

#: ../../postgres/data_model.rst:179
# 90acc5a464d844b68f22579d50c8bfcd
msgid "See also the `Psql cheat sheet <../_static/postgres/psql_cheatsheet.pdf>`_ - available online `here <http://www.postgresonline.com/special_feature.php?sf_name=postgresql83_psql_cheatsheet&outputformat=html>`_."
msgstr ""

#: ../../postgres/data_model.rst:184
# 848374967ce6450c82ad997119c4afde
msgid "Make Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:186
# 3c9cc021ea48465f938b728204b20886
msgid "Let's start making some tables! We will use our ER Diagram as a guide. First, let's create a streets table:"
msgstr ""

#: ../../postgres/data_model.rst:193
# c2e4da90a5c94dc688b892cd0c009560
msgid ":kbd:`serial` and :kbd:`varchar` are **data types**. :kbd:`serial` tells PostgreSQL to start an integer sequence (autonumber) to populate the :kbd:`id` automatically for every new record. :kbd:`varchar(50)` tells PostgreSQL to create a character field of 50 characters in length."
msgstr ""

#: ../../postgres/data_model.rst:198
# fe2ef38008474149826d6b757db919e6
msgid "You will notice that the command ends with a :kbd:`;` - all SQL commands should be terminated this way. When you press enter, psql will report something like this:"
msgstr ""

#: ../../postgres/data_model.rst:210
# 589c7195c59e4ff7bd4f6491f650e5c4
msgid "That means your table was created successfully, with a primary key :kbd:`streets_pkey` using :kbd:`streets.id`."
msgstr ""

#: ../../postgres/data_model.rst:213
# ca9336c4fdaa4194b81cae9c9dbb1a1e
msgid "Note: If you hit return without entering a :kbd:`;`, then you will get a prompt like this: :kbd:`address-#`. This is because PG is expecting you to enter more. Enter :kbd:`;` to run your command."
msgstr ""

#: ../../postgres/data_model.rst:217
# 4db5ea0f2c9a461489092b7b8cf3df10
msgid "To view your table schema, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:223
#: ../../postgres/data_model.rst:242
# 0d10957e547b4c16bb23f1c44304c1da
# e23913a5385641c6833e00170143a485
msgid "Which should show something like this:"
msgstr ""

#: ../../postgres/data_model.rst:236
# 2c131b12bd8f4b4badfe7908bb61ff33
msgid "To view your table contents, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:250
# 377cd7ac792c4e00a959512f03c13deb
msgid "As you can see, our table is empty!"
msgstr ""

#: ../../postgres/data_model.rst:252
# 6f603c7f9da24a67a9096c6f671951a4
msgid "Use the approach shown above to make a table called people: Add fields such as phone number, home address, name, etc. (these aren't all valid names: change them to make them valid)."
msgstr ""

#: ../../postgres/data_model.rst:255
# 0ebe431bc4cd4a85bb3e73aa3b8bd1f4
msgid "Write the SQL you create here:"
msgstr ""

#: ../../postgres/data_model.rst:296
#: ../../postgres/queries.rst:289
# fe4dcfc14c0742d2b4e07f7db0e96e16
# 611f6a01de4747968a8272a208d1b631
msgid "Solution:"
msgstr ""

#: ../../postgres/data_model.rst:306
# f3f8ea74b36a4d49aff86c6854ddead4
msgid "The schema for the table (enter :kbd:`\\\\d people`) looks like this:"
msgstr ""

#: ../../postgres/data_model.rst:322
# dbbbfef9f43242afa121ce0b075ce774
msgid "For illustration purposes, we have purposely omitted the fkey constraint."
msgstr ""

#: ../../postgres/data_model.rst:326
# 72f5661e4075449b9898207a6419ee5a
msgid "Create Keys in SQL"
msgstr ""

#: ../../postgres/data_model.rst:328
# d5122791439f4ec791d58bdb6d85b4e1
msgid "The problem with our solution above is that the database doesn't know that people and streets have a logical relationship. To express this relationship, we have to define a foreign key that points to the primary key of the streets table."
msgstr ""

#: ../../postgres/data_model.rst:337
# 382d1180a02246e8932fb703ea739567
msgid "adding the key after the table has been created"
msgstr ""

#: ../../postgres/data_model.rst:338
# 753f753837c141a6804bbefba908f51d
msgid "defining the key at time of table creation"
msgstr ""

#: ../../postgres/data_model.rst:340
# 85b10dfc9cff48069a4da688c0b220a3
msgid "Our table has already been created, so let's do it the first way:"
msgstr ""

#: ../../postgres/data_model.rst:348
# ba7d1e5e592c422189597d712bf87969
msgid "That tells the :kbd:`people` table that its :kbd:`street_id` fields must match a valid street :kbd:`id` from the :kbd:`streets` table."
msgstr ""

#: ../../postgres/data_model.rst:351
# ba3fe25ec3664155b3ae8d946591769e
msgid "The more usual way to create a constraint is to do it when you create the table:"
msgstr ""

#: ../../postgres/data_model.rst:361
# 1f866d3b62e5437fb788fc732fef78cb
msgid "After adding the constraint, our table schema looks like this now:"
msgstr ""

#: ../../postgres/data_model.rst:381
# 7303b800be5c404a9bf2f7cfb9d61403
msgid "Create Indexes in SQL"
msgstr ""

#: ../../postgres/data_model.rst:383
# a2710722ed5c4f42a3a38be9359ba5f4
msgid "We want lightning fast searches on peoples names. To provide for this, we can create an index on the name column of our people table:"
msgstr ""

#: ../../postgres/data_model.rst:409
# 0fe1bbe852284fb39877da8c4b53d388
msgid "Dropping Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:411
# ec56479e4dc7412a802b3a81f178aeaa
msgid "If you want to get rid of a table you can use the :kbd:`drop` command:"
msgstr ""

#: ../../postgres/data_model.rst:418
# d62291cecdb14026ba6be39a314e1ed9
msgid "In our example, this would not work - why?"
msgstr ""

#: ../../postgres/data_model.rst:420
# a190ff4f68e54b618a208b611385dff3
msgid "Some deep and inspired thoughts as to why..."
msgstr ""

#: ../../postgres/data_model.rst:436
# b5aa13dedb964d93841ed6dc6ccd083c
msgid "Sometimes you just can't stand having a table any more. Maybe you are sick of all your friends. How can you get rid of them all in one easy step? Drop the table of course! Of course, right now too much hard work has gone into our table to get rid of it on a whim, but if you really hate your friends that much, nothing's stopping you from ridding yourself of them forever:"
msgstr ""

#: ../../postgres/data_model.rst:446
# 5364580c886245c48178d84d94c71c9f
msgid "This time it works fine! Why? Are people less important than streets?"
msgstr ""

#: ../../postgres/data_model.rst:448
# a59276dab5984723b21ad81e4a266bbc
msgid "Some thoughts on why you could drop people:"
msgstr ""

#: ../../postgres/data_model.rst:464
# 3ad964dbc03f4c38bd8c0e159573e027
msgid "If you actually did enter that command and dropped the :kbd:`people` table, now would be a good time to rebuild it, as you will need it in the next exercises."
msgstr ""

#: ../../postgres/data_model.rst:469
# fc45575b14ae47ca8cabc531d3f34b3d
msgid "A word on PG Admin III"
msgstr ""

#: ../../postgres/data_model.rst:471
# 669931c1a9be400b84df6923485c3030
msgid "We are showing you the SQL commands from the psql prompt because it's a very useful way to learn about databases. However, there are quicker and easier ways to do a lot of what we are showing you. Install PGAdminIII and you can create, drop, alter etc tables using 'point and click' operations in a GUI."
msgstr ""

#: ../../postgres/data_model.rst:476
# 4c5af33482c04e4a816414e365a97714
msgid "Under Ubuntu, you can install it like this:"
msgstr ""

#: ../../postgres/data_model.rst:485
# d2b1f827b1bf462787fc0b4264ae5036
msgid "You have now seen how to create a brand new database, starting completely from scratch."
msgstr ""

#: ../../postgres/data_model.rst:491
# a68f44ef528b43858db51dcc3cb0cc23
msgid "Next you'll learn how to use the DBMS to add new data."
msgstr ""

#: ../../postgres/db_intro.rst:2
# 8c16911a652e49fcbf5ec0e6086671fd
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../postgres/db_intro.rst:4
# 3dc7ea6aae1d4c8dad9f24450d5c992e
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ../../postgres/db_intro.rst:8
# d1816893950f4b63ab0f8917d3924f64
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../postgres/db_intro.rst:11
# 58ed3c2228754b7c83bc55607c844b21
msgid "What is a Database?"
msgstr ""

#: ../../postgres/db_intro.rst:13
# 21b6fad5469f475ba9ab9a866cd8357c
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:18
# 6a9b5320090d48c684343e64a5a2c17a
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:23
# d96ffdbeb5704f2783bfe5ff73e685f6
msgid "Tables"
msgstr ""

#: ../../postgres/db_intro.rst:25
# bf65dba814bb41cfb152f1af4b18718e
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:40
# a31e28e74beb4201a0722d8e4309995e
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../postgres/db_intro.rst:43
# 80cadbf564284bfcb82d0315e494a24e
msgid "Columns / Fields"
msgstr ""

#: ../../postgres/db_intro.rst:45
# 906bd52fb8f144d7a4d5ed4bef80c6b0
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:52
# e0bcdfe14d6440518642f7f7056571ed
msgid "A column:"
msgstr ""

#: ../../postgres/db_intro.rst:61
# b9b2132ce9dd4699b06a7080bfe63c6d
msgid "A field:"
msgstr ""

#: ../../postgres/db_intro.rst:68
# 4cd0c0454c6f47fa9644f3a6a260f987
msgid "Records"
msgstr ""

#: ../../postgres/db_intro.rst:70
# e1fe8df608404851ac8b70f5753b0282
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ../../postgres/db_intro.rst:78
# c143d8e9ee5347dabb1609b79c0a11f7
msgid "Datatypes"
msgstr ""

#: ../../postgres/db_intro.rst:80
# 1d39692cd80c41339eb080fa4a0cda68
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ../../postgres/db_intro.rst:83
# 7b65786f470b4981917056c428938dda
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../postgres/db_intro.rst:85
# d04f898f32f14b7e9ba0b1450a8ec266
msgid "String - to store free-form text data"
msgstr ""

#: ../../postgres/db_intro.rst:86
# 7f8d61f360984c3f806a3934b4c58056
msgid "Integer - to store whole numbers"
msgstr ""

#: ../../postgres/db_intro.rst:87
# a5749ec60473452c93f178cc58356f61
msgid "Real - to store decimal numbers"
msgstr ""

#: ../../postgres/db_intro.rst:88
# 5466532faeaf444ea1f947040e06c04a
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../postgres/db_intro.rst:89
# b31c4a6ea06b482587c2b9d773f88a39
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ../../postgres/db_intro.rst:91
# 17ab4616d1214099959d0ed866a93019
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ../../postgres/db_intro.rst:111
# 275831a52cf64dad9cb7db274eefb92e
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ../../postgres/db_intro.rst:115
# a48b0df3957342c6af81905092603f2d
msgid "Modelling an Address Database"
msgstr ""

#: ../../postgres/db_intro.rst:117
# b73dcfb54d8b4047af0ab48c1884889b
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ../../postgres/db_intro.rst:120
# cf41bc2398bc4a44b7d0a670ca492d5b
msgid "Write some address properties in the space provided:"
msgstr ""

#: ../../postgres/db_intro.rst:155
# 3618c67c48b04c328725cfcba6a145d7
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ../../postgres/db_intro.rst:160
# 9715d87b9a1641679ba1c7a84d8be8fd
msgid "Database Theory"
msgstr ""

#: ../../postgres/db_intro.rst:162
# 646a17a3976244149e3e8d9819883ebf
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ../../postgres/db_intro.rst:166
# dec33ec2418f4ee0869b1978a3a81fa7
msgid "Normalisation"
msgstr ""

#: ../../postgres/db_intro.rst:168
# db70a92d21e0405197954d3bcbc8145a
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ../../postgres/db_intro.rst:171
# f29bbb56d58d414eb0ed8ce13e62adbd
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:176
# d4fe86b5475e4202afe6fe2d67c98327
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../postgres/db_intro.rst:178
# 444a1b9e8b394462ac5f8b20d17b1686
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../postgres/db_intro.rst:203
# 7d16402cf05b4161b10c6d612a3d68aa
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ../../postgres/db_intro.rst:207
# 66cfde7568e249879a63fc09945212cc
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ../../postgres/db_intro.rst:237
# 160a025bc3f34fcb9815573d7633aac2
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../postgres/db_intro.rst:241
# ea80335a46cb41868b368ad64263c198
msgid "Indexes"
msgstr ""

#: ../../postgres/db_intro.rst:243
# ba58c21d91a749938e367e817dae5de4
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:246
# 3a0fcfc601744efcbc199e2a8caea858
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ../../postgres/db_intro.rst:256
# 6dbd5a758fdd498d827e5b8b745a6c08
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../postgres/db_intro.rst:274
# b07c50fb046c49d799e8eb49aa257436
msgid "Sequences"
msgstr ""

#: ../../postgres/db_intro.rst:276
# bf3e1fce03b546539c5bff7fa1f3e406
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ../../postgres/db_intro.rst:279
# 1ff3f5ee974f4a358d497642a2837d6f
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ../../postgres/db_intro.rst:290
# f7d55c66bbe24edbb517c4257a5c7b88
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../postgres/db_intro.rst:292
# fd88029b0dcf44b8adceb7f01e836a6e
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ../../postgres/db_intro.rst:305
# 427998f23d7b41b5872b591266bc0816
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../postgres/db_intro.rst:316
# 133e0c78b8b24ca0b9a71ba4eb5762ee
msgid "and"
msgstr ""

#: ../../postgres/db_intro.rst:326
# e0dc6659bf5842bb9b34dde37eddcf48
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ../../postgres/db_intro.rst:329
# 7b85a13eb36d4e58b29c9871ac5121e7
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ../../postgres/db_intro.rst:335
# 1ff8ebf39c3f43c594874eee1d31ee33
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ../../postgres/db_intro.rst:338
# 64a29dc34409421c8aa41e652021e4d6
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ../../postgres/db_intro.rst:370
# d76d7fcabb2f4378929eae708c5c7019
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../postgres/db_intro.rst:372
# 354a45bae3bb430b941847df99a3c2ac
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../postgres/db_intro.rst:377
# be9c71d2cfff4ce5ad0c8a35ee873c0b
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../postgres/db_intro.rst:380
# 4c9f8a602c0f4136b70319a0e93e6f57
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ../../postgres/db_intro.rst:383
# f0592b092f0547a6804aaa6a86234ab4
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ../../postgres/db_intro.rst:386
# 3e3ff8cfe1714814ac67dbc4293dd395
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ../../postgres/db_intro.rst:406
# 3d24fa1b57e247cebd43764d73c9d50c
msgid "Transactions"
msgstr ""

#: ../../postgres/db_intro.rst:408
# 3d5635e0228a431295ceacfb2b66ef0f
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ../../postgres/db_intro.rst:414
# c2b449bcbd3e41db8140ab26bf0859aa
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ../../postgres/db_intro.rst:418
# c44f85f8eea14cffa896b7168dc0c992
msgid "remove R20 from Joe"
msgstr ""

#: ../../postgres/db_intro.rst:419
# 8ef4c54b3f004734b5b1ed506ee9eb25
msgid "add R20 to Anne"
msgstr ""

#: ../../postgres/db_intro.rst:421
# 747207629098408788ee910558b45027
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ../../postgres/db_intro.rst:427
# 3699a634189844928d6585d9739dc8b3
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ../../postgres/db_intro.rst:433
# 55ccacc5ac894f5e85b87a8de889b1a6
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

#: ../../postgres/index.rst:3
# 80cb6d97af454ecb98e5d7b2acd78b26
msgid "|MOD| PostgreSQL"
msgstr ""

#: ../../postgres/index.rst:5
# 6257dab9a5d44957b684eb41372f840a
msgid "PostgreSQL is a Database Management System (DBMS). In this module, you'll be shown how to use PostgreSQL to create a new database, as well as accessing other typical DBMS functions."
msgstr ""

#: ../../postgres/queries.rst:2
# c9284b44ed0f40e8822e4d4593d1d997
msgid "|LS| Queries"
msgstr ""

#: ../../postgres/queries.rst:4
# c2a811e6cabe4d35baeaa468f69d7c52
msgid "When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information."
msgstr ""

#: ../../postgres/queries.rst:7
# 3242db644529425aa53f4f9d89dfe717
msgid "**The goal of this lesson:** To learn how to create queries that will return useful information."
msgstr ""

#: ../../postgres/queries.rst:11
# 7a46a2b3e73d4621bbdcb0a6f8146cd9
msgid "Follow-up from previous lesson"
msgstr ""

#: ../../postgres/queries.rst:13
# 6cf8e3084ced4f4482faaf9b9546a13e
msgid "Let's check that you added a few people to the database successfully:"
msgstr ""

#: ../../postgres/queries.rst:27
# 039d2678f34a4f598c8cc3cabd7cf54f
msgid "Ordering results"
msgstr ""

#: ../../postgres/queries.rst:29
# 108e53c8e35a4a76abddadaadc8ba9c8
msgid "Let's get a list of people ordered by their house numbers:"
msgstr ""

#: ../../postgres/queries.rst:35
#: ../../postgres/queries.rst:53
#: ../../postgres/queries.rst:187
#: ../../postgres/queries.rst:212
#: ../../postgres/queries.rst:237
#: ../../postgres/queries.rst:254
#: ../../postgres/queries.rst:298
#: ../../postgres/views.rst:30
# c1d2135ab3224f6088d26779c9c8765f
# f779c23f20124eec8ef49f0dca08ab06
# 8cd777b7440e4d40a9789ecd0bee867d
# 2ab7874e13bc45229100e004a6cfbad9
# cf0890afc3a74840ba2daa32a0b78eee
# 74b12543a43b4fab8b79b26f8f152fe0
# dfeaaca642434fd4837259b73cb4cb7d
# 4cf121d2033e4727842a3da191c2ba26
msgid "Result:"
msgstr ""

#: ../../postgres/queries.rst:47
# d6a10224ccc4448a948d9277c5deaa64
msgid "You can sort by more than one column:"
msgstr ""

#: ../../postgres/queries.rst:66
# 68aeb4ed17d144c1a410c68e496ece79
msgid "Filtering"
msgstr ""

#: ../../postgres/queries.rst:68
# 3e2c2fdd0c5c4b33af29559c4170371e
msgid "Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two. Never fear, you can filter the results!"
msgstr ""

#: ../../postgres/queries.rst:72
# f54608feb0ed4f34a32575ea4cafb506
msgid "Here is an example of a numerical filter:"
msgstr ""

#: ../../postgres/queries.rst:83
# a4ed1db78af04ef5b93fc1f7930935c2
msgid "You can combine filters (defined using the :kbd:`WHERE` clause) with sorting (defined using the :kbd:`ORDER BY`)"
msgstr ""

#: ../../postgres/queries.rst:96
# e1bc18cd79354f5081834e25a6f82c89
msgid "You can also filter based on text data:"
msgstr ""

#: ../../postgres/queries.rst:107
# 724fe2fb689c4ab2a9cec15d6d75aefe
msgid "Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`i` in them. If you want to search for a string of letters regardless of case, you can do a case insensitive search using the :kbd:`ILIKE` clause:"
msgstr ""

#: ../../postgres/queries.rst:120
# b19ba2db708844f5b1b84945ae8c39b6
msgid "That found everyone with a :kbd:`k` or :kbd:`K` in their name. Using the normal :kbd:`ILIKE` clause, you'd get:"
msgstr ""

#: ../../postgres/queries.rst:132
# ee059fe4117d478bb2af2b3697a96a60
msgid "Joins"
msgstr ""

#: ../../postgres/queries.rst:134
# 0bbaee7139a143dea77a190116399268
msgid "What if you want to see the person's details and their street name (not its id)? In order to do that, you need to join the two tables together in a single query. Lets look at an example:"
msgstr ""

#: ../../postgres/queries.rst:144
# cedda73c457644d6b1509be7422017ac
msgid "With joins, you will always state the two tables the information is coming from, in this case people and streets.  You also need to specify which two keys must match (foreign key & primary key). If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!"
msgstr ""

#: ../../postgres/queries.rst:150
# ae1685b8370c4138970e28e17b313210
msgid "Here is what the correct output will look like:"
msgstr ""

#: ../../postgres/queries.rst:162
# 712bad5891b54e73b1a9f0b8009a1dea
msgid "We will revisit joins as we create more complex queries later. Just remember they provide a simple way to combine the information from two or more tables."
msgstr ""

#: ../../postgres/queries.rst:166
# ea4e8f3adf0a4b6583259c899fb9f251
msgid "Subselect"
msgstr ""

#: ../../postgres/queries.rst:168
# f04c08ab058548888051b8a099644b60
msgid "First, let's do a little tweaking to our data:"
msgstr ""

#: ../../postgres/queries.rst:178
# 2204e5ebe9f14f949f60f78a982b693a
msgid "Let's take a quick look at our data after those changes - we reuse our query from the previous section:"
msgstr ""

#: ../../postgres/queries.rst:199
# e4b97d3764624a6a8a25949023d30c6e
msgid "Now let's show you a subselection on this data. We want to show only people who live in :kbd:`street_id` number :kbd:`1`."
msgstr ""

#: ../../postgres/queries.rst:222
# f08445c3c3d546c88bf9fe7ce5e98fd9
msgid "This is a contrived example and in the above situations it may have been overkill. However when you have to filter based on a selection, subselects are really useful!"
msgstr ""

#: ../../postgres/queries.rst:227
# c0e5330e372645f48a58e047ccb9f111
msgid "Aggregate Queries"
msgstr ""

#: ../../postgres/queries.rst:229
# 7b3666229a1245f782cab821a9ccbd7f
msgid "One of the powerful features of a database is its ability to summarise the data in its tables. These summaries are called aggregate queries. Here is a typical example:"
msgstr ""

#: ../../postgres/queries.rst:246
# 8f50871ecd284baa94dd5e9790fa8669
msgid "If we want the counts summarised by street name we can do this:"
msgstr ""

#: ../../postgres/queries.rst:265
# 30488703d4544edcb57c2396b7191766
msgid "Because there is no :kbd:`ORDER BY` clause, on your computer these data may not be in the same order as shown here."
msgstr ""

#: ../../postgres/queries.rst:268
# 56bc78747a5b44e7b45704a2f2ccf751
msgid "Exercise:"
msgstr ""

#: ../../postgres/queries.rst:270
# c3315af76f51420b861e43635fb43033
msgid "Summarise the people by street name and show the actual street names instead of the street_id's"
msgstr ""

#: ../../postgres/queries.rst:309
# 96a6818b975944d4805aeb81dd0f13e6
msgid "You will notice that we have prefixed field names with table names (e.g. people.name and streets.name). This needs to be done whenever the field name is ambiguous."
msgstr ""

#: ../../postgres/queries.rst:316
# 657054eb769c4c279ade3ceaf23d3acd
msgid "You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it."
msgstr ""

#: ../../postgres/queries.rst:322
# 5c0740d1fa844a839d15e4d359f91837
msgid "Next you'll see how to create views from the queries that you've written."
msgstr ""

#: ../../postgres/rules.rst:2
# dc6096633b5d49c39b238d8b43a28b4b
msgid "|LS| Rules"
msgstr ""

#: ../../postgres/rules.rst:4
# f4e429f4b7734787ab02aa685696e623
msgid "Rules allow the \"query tree\" of an incoming query to be rewritten. One common usage is to implement views, including updatable view. *- Wikipedia*"
msgstr ""

#: ../../postgres/rules.rst:7
# d1c295033f1e460f8c6c0188cf689408
msgid "**The goal for this lesson:** To learn how to create new rules for the database."
msgstr ""

#: ../../postgres/rules.rst:11
# 04ad4419e1ad4ca8968a72aa5732e2d3
msgid "Materialised Views (Rule based views)"
msgstr ""

#: ../../postgres/rules.rst:13
# 50206807881a4def9a0140cc46d35e75
msgid "Say you want to log every change of phone_no in your people table in to a people_log table. So you set up a new table"
msgstr ""

#: ../../postgres/rules.rst:20
# 498c9993b05f4ba6923cfd8f85f26892
msgid "In the next step create a rule, that logs every change of a phone_no in the people table into the people_log table:"
msgstr ""

#: ../../postgres/rules.rst:29
# ba08c3ea1c8d44458b579cbf5e27834f
msgid "To test that the rule works, let's modify a phone number:"
msgstr ""

#: ../../postgres/rules.rst:35
# 242df64c09fe4f63ae4353b175bf74f4
msgid "Check that the table was updated correctly:"
msgstr ""

#: ../../postgres/rules.rst:44
# 5a2dfc0a273e48f290a68ddc54b3970c
msgid "Now, thanks to the rule we created, the :kbd:`people_log` table will look like this:"
msgstr ""

#: ../../postgres/rules.rst:54
# a6b6293d66d240a089eaf8c9b0425890
msgid "The value of the :kbd:`time` field will depend on the current date and time."
msgstr ""

#: ../../postgres/rules.rst:60
# a38b983980dc4979afc7d1e80f910012
msgid "Rules allow you to automatically add or change data in your database to reflect changes in other parts of the database."
msgstr ""

#: ../../postgres/rules.rst:66
# 37e98a49b3fe4848a1af813ebf93be56
msgid "The next module will introduce you to PostGIS, which takes these database concepts and applies them to GIS data."
msgstr ""

#: ../../postgres/views.rst:2
# 5d68bd1add56414dacb698124590281b
msgid "|LS| Views"
msgstr ""

#: ../../postgres/views.rst:4
# e3b63b84801240998577d03ff190cbf1
msgid "When you write a query, you need to spend a lot of time and effort formulating it. With views, you can save the definition of a sql query in a reusable 'virtual table'."
msgstr ""

#: ../../postgres/views.rst:8
# cb2a1fdc1fba4150bee47d87e6367d71
msgid "**The goal for this lesson:** To save a query as a view."
msgstr ""

#: ../../postgres/views.rst:11
# 4c1d4c1a43894107a258fa34abb57fba
msgid "Creating a View"
msgstr ""

#: ../../postgres/views.rst:13
# b88ae6b684b04f91bbe94977f0065445
msgid "You can treat a view just like a table, but its data is sourced from a query. Let's make a simple view based on the above."
msgstr ""

#: ../../postgres/views.rst:23
# f135f6ce47b148cf99cf315e4ff7c2b9
msgid "As you can see the only change is the :kbd:`create view roads_count_v as` part at the beginning. The nice thing is that we can now select data from that view:"
msgstr ""

#: ../../postgres/views.rst:42
# 5834e3c2852e4bc69b4e52ce343135b9
msgid "Modifying a View"
msgstr ""

#: ../../postgres/views.rst:44
# 6113d670c50440ac8bb2d510fc747dc8
msgid "A view is not fixed, and it contains no 'real data'. This means you can easily change it without impacting on any data in your database."
msgstr ""

#: ../../postgres/views.rst:55
# cbb7f717dd444b60bb4923611e0ed610
msgid "(This example also shows the best practice convention of using UPPER CASE for all SQL keywords.)"
msgstr ""

#: ../../postgres/views.rst:58
# 353fa0f117ad420db07058a86b379fb0
msgid "You will see that we have added an :kbd:`ORDER BY` clause so that our view rows are nicely sorted:"
msgstr ""

#: ../../postgres/views.rst:71
# d0cdd23238f242f899da650b1592d8d2
msgid "Dropping a View"
msgstr ""

#: ../../postgres/views.rst:73
# f4c37c5677a6438eb68584557dc16c46
msgid "If you no longer need a view, you can delete it like this:"
msgstr ""

#: ../../postgres/views.rst:82
# 377522fa54984501b567a80a2c740f7a
msgid "Using views, you can save a query and access its results as if it were a table."
msgstr ""

#: ../../postgres/views.rst:87
# 163817ec7df54baabe1c1a854a8c5de5
msgid "Sometimes, when changing data, you want your changes to have effects elsewhere in the database. The next lesson will show you how to do this."
msgstr ""

