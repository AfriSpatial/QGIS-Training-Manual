# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-07-20 09:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../postgres/adding_data.rst:2
# 21a7360e8d5c46ce989c13e4564a14e9
msgid "|LS| Adding Data to the Model"
msgstr ""

#: ../../postgres/adding_data.rst:4
# 6a43edbd9035473bbc4872321718a856
msgid "The models we've created will now need to be populated with the data they're intended to contain."
msgstr ""

#: ../../postgres/adding_data.rst:7
# 99d5c5ce5ce945cc9df476ae6c9cad62
msgid "**The goal for this lesson:** To learn how to insert new data into the database models."
msgstr ""

#: ../../postgres/adding_data.rst:11
# 743f53dcc1db4e2ea45196d9ea36e39d
msgid "Insert statement"
msgstr ""

#: ../../postgres/adding_data.rst:13
# 8cdc4d6d26fb4889b6ed16c3e024b39a
msgid "How do you add data to a table? The sql :kbd:`INSERT` statement provides the functionality for this:"
msgstr ""

#: ../../postgres/adding_data.rst:20
# 0d1af62a25c64a589f547133272c940c
msgid "A couple of things to note:"
msgstr ""

#: ../../postgres/adding_data.rst:22
# f33e658e54f04921955ca66b8bcb753f
msgid "after the table name (:kbd:`streets`), you list the column names that you will be populating (in this case only the :kbd:`name` column)."
msgstr ""

#: ../../postgres/adding_data.rst:24
# 357498506a6c44fd953ec27b685b0552
msgid "after the :kbd:`values` keyword, place the list of field values."
msgstr ""

#: ../../postgres/adding_data.rst:25
# 27b54550a79c49ea99a18eed6f08a26d
msgid "strings should be quoted using single quotes."
msgstr ""

#: ../../postgres/adding_data.rst:26
# 135804d3c728463ea81abd66121a672f
msgid "you will note that I did not insert a value for the :kbd:`id` column - that is because it is a sequence and will be autogenerated."
msgstr ""

#: ../../postgres/adding_data.rst:28
# ce4b8bdd85204c13884253a62ea7b74a
msgid "if you do manually set the :kbd:`id`, you may cause serious problems with the integrity of your database."
msgstr ""

#: ../../postgres/adding_data.rst:31
# d85b5d5ba3124efd9a0fdda9932c54ce
msgid "You should see :kbd:`INSERT 0 1` if it is successful."
msgstr ""

#: ../../postgres/adding_data.rst:33
# 72491d9105ae41eabe37dbfeb10b072e
msgid "You can see the result of your insert action by selecting all the data in the table:"
msgstr ""

#: ../../postgres/adding_data.rst:40
# f49431cc5b4c447e94d57ba6de2b165f
msgid "result:"
msgstr ""

#: ../../postgres/adding_data.rst:50
# c057541cda054573845d482b6ee025d9
msgid "Now you try:"
msgstr ""

#: ../../postgres/adding_data.rst:52
# b5ac00f82ca049cfad4cf3e6ece32170
msgid "Use the :kbd:`INSERT` command to add a new street to the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:54
# 42d6adb30cee4997b9a642c133fadfd6
msgid "Write the sql you used here:"
msgstr ""

#: ../../postgres/adding_data.rst:70
# 0152e32f76df44338202506fc98525da
msgid "Sequencing data addition according to constraints"
msgstr ""

#: ../../postgres/adding_data.rst:72
# 0ffebb86d4d140ca990d34e23fb2643f
msgid "Try to add a person to the people table with the following details:"
msgstr ""

#: ../../postgres/adding_data.rst:81
# 25c134dd98bc4e428651e078cc190b69
msgid "Remember, we defined phone numbers as strings."
msgstr ""

#: ../../postgres/adding_data.rst:83
# 7d42515c5e634dd6a20a77067f7405db
msgid "What problems did you encounter?"
msgstr ""

#: ../../postgres/adding_data.rst:104
# 6e047d7a0d114b3abf9c459903791efb
msgid "You should have an error report if you try to do this without first creating a record for Main Street in the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:107
# 0fd0df05eaeb412bae5e33ae3df0bdfd
msgid "What error did you get?"
msgstr ""

#: ../../postgres/adding_data.rst:110
# f40ff5776b7f4db79105aa8b09d06a24
msgid "You can't add the street using its name"
msgstr ""

#: ../../postgres/adding_data.rst:111
# 1273aaa50f054fb1be2d36428ca76a1c
msgid "You can't add a street using a street :kbd:`id` before first creating the street record on the streets table"
msgstr ""

#: ../../postgres/adding_data.rst:114
# 420021bb2970402d82b938f8d8accc36
msgid "Remember that our two tables are linked via a Primary/Foreign Key pair. This means that no valid person can be created without there also being a valid corresponding street record."
msgstr ""

#: ../../postgres/adding_data.rst:118
# d7592b06c7c64750ab71186521594772
msgid "Here is how we made our friend:"
msgstr ""

#: ../../postgres/adding_data.rst:126
# d511f86cd4794089b3c6a4e18f9ced4c
msgid "If you look at the streets table again (using a select statement as before), you'll see that the :kbd:`id` for the :kbd:`Main Street` entry is :kbd:`2`. That's why we could merely enter the number :kbd:`2` above. Even though we're not seeing :kbd:`Main Street` written out fully in the entry above, the database will be able to associate that with the :kbd:`street_id` value of :kbd:`2`."
msgstr ""

#: ../../postgres/adding_data.rst:134
# 37d45c865eb74ed38cc2d954257cf0b0
msgid "Select data"
msgstr ""

#: ../../postgres/adding_data.rst:136
# b143ec94128b4533bdae202e7245dcac
msgid "We have already shown you the syntax for selecting records. Lets look at a few more examples:"
msgstr ""

#: ../../postgres/adding_data.rst:151
# d696f1a034924d18a09515f6a0c960b0
msgid "In later sessions we will go into more detail on how to select and filter data."
msgstr ""

#: ../../postgres/adding_data.rst:154
# 6a2e0c012065447e975abbcdba859c29
msgid "Update data"
msgstr ""

#: ../../postgres/adding_data.rst:156
# a5ed74b9595841ca8b62c913a2e4e874
msgid "What is you want to make a change to some existing data? For example a street name is changed:"
msgstr ""

#: ../../postgres/adding_data.rst:163
# 89f1c39ca2634b00ad9f3e13401351b4
msgid "Be very careful using such update statements - if more than one record matches your :kbd:`WHERE` clause, they will all be updated!"
msgstr ""

#: ../../postgres/adding_data.rst:166
# 9caabd732453489babfd990a67a8a487
msgid "A better solution is to use the primary key of the table to reference the record to be changed:"
msgstr ""

#: ../../postgres/adding_data.rst:173
# 75036f133a8046f080d7b6100b9524ec
msgid "It should return :kbd:`UPDATE 1`."
msgstr ""

#: ../../postgres/adding_data.rst:175
# 1d3d28b15b9b4261a15d11fe6a822a89
msgid "the :kbd:`WHERE` statement criteria are case sensitive :kbd:`Main Street` <> :kbd:`Main street`"
msgstr ""

#: ../../postgres/adding_data.rst:179
# 1e6307a1f64145e8a2d9150901088c5b
msgid "Delete Data"
msgstr ""

#: ../../postgres/adding_data.rst:181
# a0e05db80ac4418f934ceaa1c345a4bc
msgid "Some times you fall out of friendship with people. Sounds like a job for the :kbd:`DELETE` command!"
msgstr ""

#: ../../postgres/adding_data.rst:188
# a7c86d8c9eab4e58a938e41fad8f47b6
msgid "Let's look at our people table now:"
msgstr ""

#: ../../postgres/adding_data.rst:197
# 074390fd0f3c48b98273ffaa0be3f540
msgid "**Exercise:** Use the skills you learned earlier to add some new friends to your database:"
msgstr ""

#: ../../postgres/adding_data.rst:210
#: ../../postgres/data_model.rst:483
#: ../../postgres/db_intro.rst:425
#: ../../postgres/queries.rst:314
#: ../../postgres/rules.rst:58
#: ../../postgres/views.rst:80
# 829e8d6e3b5f4b959bcbf2cf0579e37e
# 80c44e92f2e742e985efaec78b1e9e68
# e816b10ea01e4fafbb111c58db32bb24
# 8efc0523e93e4d90a8ae8c121ef285c7
# a7d0052cb62a4712b877533da97a4f11
# f034db187fd64e698bff1420ead76de0
msgid "|IC|"
msgstr ""

#: ../../postgres/adding_data.rst:212
# 99443b54d2994c19bf60477b8d625080
msgid "Now you know how to add new data to the existing models you created previously. Remember that if you want to add new kinds of data, you may want to modify and/or create new models to contain that data."
msgstr ""

#: ../../postgres/adding_data.rst:217
#: ../../postgres/data_model.rst:489
#: ../../postgres/db_intro.rst:431
#: ../../postgres/queries.rst:320
#: ../../postgres/rules.rst:64
#: ../../postgres/views.rst:85
# aa047dd8cbed4747b765568908484fb7
# b1f042e0fd184ecf8b5a9e3d6f04f76c
# 9b581093a10042979e064fb44c4b5abc
# fafdd785454340f393c981e0e96e29a4
# fdf30f83e9e043b0bb33731f91636055
# 7ad1f01fa4a643479b4309713c5c8540
msgid "|WN|"
msgstr ""

#: ../../postgres/adding_data.rst:219
# 21356b370da848bfbdfae57f2904f12e
msgid "Now that you've added some data, you'll learn how to use queries to access this data in various ways."
msgstr ""

#: ../../postgres/data_model.rst:2
# 58b76f4b819d47aeb2bdfd23e776432c
msgid "|LS| Implementing the Data Model"
msgstr ""

#: ../../postgres/data_model.rst:4
# 63df2aebd7824bc8a3f50991dc8f39f3
msgid "Now that we've covered all the theory, let's create a new database. This database will be used for our exercises for the lessons that will follow afterwards."
msgstr ""

#: ../../postgres/data_model.rst:8
# 13faac0d4f4b4b9ca2abd1d091d52f36
msgid "**The goal for this lesson:** To install the required software and use it to implement our example database."
msgstr ""

#: ../../postgres/data_model.rst:12
# e549a0b8c6f44d1a814140a4903d85c6
msgid "Install PostgreSQL"
msgstr ""

#: ../../postgres/data_model.rst:14
#: ../../postgres/data_model.rst:51
# f683db3cab924c2b9f35f25663882caf
# 0620f19b27144cd69b760d0bca91dd84
msgid "Under Ubuntu:"
msgstr ""

#: ../../postgres/data_model.rst:20
# 0e3b1b2d51654b58a8423ad7bcf9d598
msgid "You should get a message like this:"
msgstr ""

#: ../../postgres/data_model.rst:39
# 8ddc93ef11004b10bdb6f0d481a16599
msgid "Press :kbd:`Y` and :kbd:`Enter` and wait for the download and installation to finish."
msgstr ""

#: ../../postgres/data_model.rst:43
# 24f312fbd38145448c716ad40de68d4d
msgid "Help"
msgstr ""

#: ../../postgres/data_model.rst:45
# 17f9a8e6cac74c9882e9044d39c792fc
msgid "PostgreSQL has very good `online <http://www.postgresql.org/docs/9.1/static/index.html>`_ documentation."
msgstr ""

#: ../../postgres/data_model.rst:49
# 85c188c363f24c7a93ee4f31340d3fee
msgid "Create a database user"
msgstr ""

#: ../../postgres/data_model.rst:53
# bc4c18a69e1441ba843a9cc2e8361073
msgid "After the installation is complete, run this command to become the postgres user and then create a new database user:"
msgstr ""

#: ../../postgres/data_model.rst:60
# 1598fe84aa564e489d5a6601e9794437
msgid "Type in your normal log in password when prompted (you need to have sudo rights)."
msgstr ""

#: ../../postgres/data_model.rst:62
# 149f8c49cd734467b4ad2fabbc200895
msgid "Now, at the postgres user's bash prompt, create the database user. Make sure the user name matches your unix login name: it will make your life much easier, as postgres will automatically authenticate you when you are logged in as that user."
msgstr ""

#: ../../postgres/data_model.rst:71
# f4921c32de3c421787c4138aa4abb146
msgid "Enter a password when prompted. I normally use a different password to my usual unix login."
msgstr ""

#: ../../postgres/data_model.rst:74
# 5f180b942d3b44298eeb95727217679b
msgid "What do those options mean?"
msgstr ""

#: ../../postgres/data_model.rst:86
# fbd2464185e24ae8925290d59159398a
msgid "Now you should should leave the postgres user's bash shell environment by typing:"
msgstr ""

#: ../../postgres/data_model.rst:94
# a10cb5db316c4589848cb78f15e43265
msgid "Verify the new account"
msgstr ""

#: ../../postgres/data_model.rst:100
# 95e5b056a7d7442197545c893e58eaec
msgid "Should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:113
#: ../../postgres/data_model.rst:144
# c55c82b4b5d5448aae62d90bb2e8c479
# 1acd9dbdee204512a1995d2015d54c55
msgid "Type :kbd:`q` to exit."
msgstr ""

#: ../../postgres/data_model.rst:116
# 98ee26706e454700aa97d5c88f79fd83
msgid "Create a database"
msgstr ""

#: ../../postgres/data_model.rst:118
# c02c199aa2e94a0896e732a77006ba50
msgid "The :kbd:`createdb` command is used to create a new database. It should be run from the bash shell prompt."
msgstr ""

#: ../../postgres/data_model.rst:125
# 7828ea375e3843ebb6dab006940d6891
msgid "You can verify the existence of your new database by using this command:"
msgstr ""

#: ../../postgres/data_model.rst:131
# daca9ea36ea24080ad515b0116c5bcd5
msgid "Which should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:147
# fd0916be24214588ad8731bb3844cdc4
msgid "Starting a database shell session"
msgstr ""

#: ../../postgres/data_model.rst:149
# 7246a3d63cd24e6bb1ba57a3ffe1a79c
msgid "You can connect to your database easily like this:"
msgstr ""

#: ../../postgres/data_model.rst:155
# 90f6d72d03fb4907a5c28024c1c9bf58
msgid "To exit out of the psql database shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:161
# df882f8bd4ff4842a38bf83f2782c0d0
msgid "For help in using the shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:167
# 083c022469174025b53158ba001f4154
msgid "For help in using sql commands, type:"
msgstr ""

#: ../../postgres/data_model.rst:173
# 078867e972794efb98f1ec450c953d09
msgid "To get help on a specific command, type (for example):"
msgstr ""

#: ../../postgres/data_model.rst:179
# 7870cb4d4a3a4c72ab836b6805207249
msgid "See also the `Psql cheat sheet <../_static/postgres/psql_cheatsheet.pdf>`_ - available online `here <http://www.postgresonline.com/special_feature.php?sf_name=postgresql83_psql_cheatsheet&outputformat=html>`_."
msgstr ""

#: ../../postgres/data_model.rst:184
# d1c7e968400f465bb248c75b7876c2c8
msgid "Make Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:186
# 1118ee49f89841cea676ec631eaa1352
msgid "Let's start making some tables! We will use our ER Diagram as a guide. First, let's create a streets table:"
msgstr ""

#: ../../postgres/data_model.rst:193
# 87efdb6808d94fc19e6b3da8181bf98d
msgid ":kbd:`serial` and :kbd:`varchar` are **data types**. :kbd:`serial` tells PostgreSQL to start an integer sequence (autonumber) to populate the :kbd:`id` automatically for every new record. :kbd:`varchar(50)` tells PostgreSQL to create a character field of 50 characters in length."
msgstr ""

#: ../../postgres/data_model.rst:198
# 964bb7ce80f1448f88937b01888263e6
msgid "You will notice that the command ends with a :kbd:`;` - all SQL commands should be terminated this way. When you press enter, psql will report something like this:"
msgstr ""

#: ../../postgres/data_model.rst:210
# 084255bea7c64df896435033e794fa13
msgid "That means your table was created successfully, with a primary key :kbd:`streets_pkey` using :kbd:`streets.id`."
msgstr ""

#: ../../postgres/data_model.rst:213
# 76e76a4f97aa4d2cae499499af27d4ad
msgid "Note: If you hit return without entering a :kbd:`;`, then you will get a prompt like this: :kbd:`address-#`. This is because PG is expecting you to enter more. Enter :kbd:`;` to run your command."
msgstr ""

#: ../../postgres/data_model.rst:217
# c7e8cda38ae648db9f7781b44076175c
msgid "To view your table schema, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:223
#: ../../postgres/data_model.rst:242
# 0ea9b455169d4f9b96b50fe14d3d53fd
# ecb37c97613449ea92bc876f83e98759
msgid "Which should show something like this:"
msgstr ""

#: ../../postgres/data_model.rst:236
# 9c50374a44294cd4aa9ad8da4a33ffe9
msgid "To view your table contents, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:250
# 2393b719a8814529b8a2aaf81ad56354
msgid "As you can see, our table is empty!"
msgstr ""

#: ../../postgres/data_model.rst:252
# 088aa20259fd4dc58697daedc09cef3f
msgid "Use the approach shown above to make a table called people: Add fields such as phone number, home address, name, etc. (these aren't all valid names: change them to make them valid)."
msgstr ""

#: ../../postgres/data_model.rst:255
# db2e5bc59cc54296bae95877d36fa786
msgid "Write the SQL you create here:"
msgstr ""

#: ../../postgres/data_model.rst:296
#: ../../postgres/queries.rst:289
# a67332cdfff64458b8fe72aa51f10e61
# 405f01f6d8c5490dbb4c8c3d351a864f
msgid "Solution:"
msgstr ""

#: ../../postgres/data_model.rst:306
# e5094da6a45f4327aef6d49c68e5d06a
msgid "The schema for the table (enter :kbd:`\\\\d people`) looks like this:"
msgstr ""

#: ../../postgres/data_model.rst:322
# 7a476e46bffb468fbd43c637f5b23395
msgid "For illustration purposes, we have purposely omitted the fkey constraint."
msgstr ""

#: ../../postgres/data_model.rst:326
# e4bf9923a62247b482f776b463daa5ad
msgid "Create Keys in SQL"
msgstr ""

#: ../../postgres/data_model.rst:328
# 3b7e78ce1e92485ab13b6c9bf0467105
msgid "The problem with our solution above is that the database doesn't know that people and streets have a logical relationship. To express this relationship, we have to define a foreign key that points to the primary key of the streets table."
msgstr ""

#: ../../postgres/data_model.rst:337
# 2875c949887049d6842cf80ef5ac250e
msgid "adding the key after the table has been created"
msgstr ""

#: ../../postgres/data_model.rst:338
# 68e439e84f344c23b947c33253431d89
msgid "defining the key at time of table creation"
msgstr ""

#: ../../postgres/data_model.rst:340
# 3e9caad44bec423cbb45dd816d5b8a44
msgid "Our table has already been created, so let's do it the first way:"
msgstr ""

#: ../../postgres/data_model.rst:348
# eaaa84cf95ba4ec5a667a84a7b033d61
msgid "That tells the :kbd:`people` table that its :kbd:`street_id` fields must match a valid street :kbd:`id` from the :kbd:`streets` table."
msgstr ""

#: ../../postgres/data_model.rst:351
# d081642e8d274c3885342977b2ccb0d4
msgid "The more usual way to create a constraint is to do it when you create the table:"
msgstr ""

#: ../../postgres/data_model.rst:361
# 2a8968579f074dec9d24a34cc2c10e2f
msgid "After adding the constraint, our table schema looks like this now:"
msgstr ""

#: ../../postgres/data_model.rst:381
# 693f01a419d942a68bdbec05ec6e1854
msgid "Create Indexes in SQL"
msgstr ""

#: ../../postgres/data_model.rst:383
# 9fe2c9d4741848b3af62503a71a51baf
msgid "We want lightning fast searches on peoples names. To provide for this, we can create an index on the name column of our people table:"
msgstr ""

#: ../../postgres/data_model.rst:409
# 1ae3b320554b4343b06fa13fad3469f1
msgid "Dropping Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:411
# 223915360242486a9b3e907a855fcc23
msgid "If you want to get rid of a table you can use the :kbd:`drop` command:"
msgstr ""

#: ../../postgres/data_model.rst:418
# 813e05b1367c4c7cb92b40acee215c49
msgid "In our example, this would not work - why?"
msgstr ""

#: ../../postgres/data_model.rst:420
# 2023fc9f3c0142309ad14102740dda24
msgid "Some deep and inspired thoughts as to why..."
msgstr ""

#: ../../postgres/data_model.rst:436
# ac9abff315f84871847e6ef84de249ac
msgid "Sometimes you just can't stand having a table any more. Maybe you are sick of all your friends. How can you get rid of them all in one easy step? Drop the table of course! Of course, right now too much hard work has gone into our table to get rid of it on a whim, but if you really hate your friends that much, nothing's stopping you from ridding yourself of them forever:"
msgstr ""

#: ../../postgres/data_model.rst:446
# 41b9dc7c35ba43a4953daad14b4f4a4a
msgid "This time it works fine! Why? Are people less important than streets?"
msgstr ""

#: ../../postgres/data_model.rst:448
# 78048a4fa4ba420abfa0b0dd936f5c98
msgid "Some thoughts on why you could drop people:"
msgstr ""

#: ../../postgres/data_model.rst:464
# cd98369bb83e4c7ca7618b0023e1b042
msgid "If you actually did enter that command and dropped the :kbd:`people` table, now would be a good time to rebuild it, as you will need it in the next exercises."
msgstr ""

#: ../../postgres/data_model.rst:469
# 2ac63e89e78a4194b62f3288d03f3573
msgid "A word on PG Admin III"
msgstr ""

#: ../../postgres/data_model.rst:471
# 3c4d9d23a64e4d1a8c23060471dfbeca
msgid "We are showing you the SQL commands from the psql prompt because it's a very useful way to learn about databases. However, there are quicker and easier ways to do a lot of what we are showing you. Install PGAdminIII and you can create, drop, alter etc tables using 'point and click' operations in a GUI."
msgstr ""

#: ../../postgres/data_model.rst:476
# f17b265a30d24a7a8bf6d2eb5baf0a69
msgid "Under Ubuntu, you can install it like this:"
msgstr ""

#: ../../postgres/data_model.rst:485
# 510824a326054fdabb68c0d56b9e8b22
msgid "You have now seen how to create a brand new database, starting completely from scratch."
msgstr ""

#: ../../postgres/data_model.rst:491
# 3490c24539d74af685b1cad3b1efa14d
msgid "Next you'll learn how to use the DBMS to add new data."
msgstr ""

#: ../../postgres/db_intro.rst:2
# ecacd4c80b494d34a48e0c0436a21c68
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../postgres/db_intro.rst:4
# 8114fa51399f4852862d7a810207d9d9
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ../../postgres/db_intro.rst:8
# 59316f01fb3e4ee9a01efcbdaf21b081
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../postgres/db_intro.rst:11
# fa7dc238321342998f45456aa7201c55
msgid "What is a Database?"
msgstr ""

#: ../../postgres/db_intro.rst:13
# 8f09f0f785c14be1bba7bcd83f750b72
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:18
# f05515fe75bd429d900251f26bb5edf4
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:23
# 1c944ec0ed9f4d2cb4206e11b328cb33
msgid "Tables"
msgstr ""

#: ../../postgres/db_intro.rst:25
# 1658521ac18a4cd1a55cd569d7da1b91
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:40
# 0d31f519d5e6492fa5e7f251c0e2d3f5
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../postgres/db_intro.rst:43
# 844f447f11924710a9370363c265867f
msgid "Columns / Fields"
msgstr ""

#: ../../postgres/db_intro.rst:45
# abd9eb72cfbc4ec3a571ca45d07970c2
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:52
# dd345c9e400847b496b1ee3fb96f1704
msgid "A column:"
msgstr ""

#: ../../postgres/db_intro.rst:61
# d3a5fcdabb534c4f899ac42a6e39bf11
msgid "A field:"
msgstr ""

#: ../../postgres/db_intro.rst:68
# 4a613f9c1f1e4d3c8cc34ea89757216d
msgid "Records"
msgstr ""

#: ../../postgres/db_intro.rst:70
# 5106a067141e4cc4b88a4e26ae72afe6
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ../../postgres/db_intro.rst:78
# 384994ab8adf4d9aba6837fefd890c14
msgid "Datatypes"
msgstr ""

#: ../../postgres/db_intro.rst:80
# 1db5fb71d8984ed68220f01e99a2ccff
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ../../postgres/db_intro.rst:83
# e5fba9c40bce4aef81caac03a4b72f88
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../postgres/db_intro.rst:85
# 34d08e2981f44f30881fdd2e82036562
msgid "String - to store free-form text data"
msgstr ""

#: ../../postgres/db_intro.rst:86
# 47a8446b667240b8be9b092871060a9f
msgid "Integer - to store whole numbers"
msgstr ""

#: ../../postgres/db_intro.rst:87
# 24e9cbf240ca4e43ae914c0f4f2363d5
msgid "Real - to store decimal numbers"
msgstr ""

#: ../../postgres/db_intro.rst:88
# d91ca42847814318895138c9d3bbb28f
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../postgres/db_intro.rst:89
# 90c1dd8ad1444b0a86b372b7854b4f03
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ../../postgres/db_intro.rst:91
# 228a0037aa9f4138b131c446d72cf7a9
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ../../postgres/db_intro.rst:111
# fdd9adca70b74f52b2a6aab849d8a820
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ../../postgres/db_intro.rst:115
# e811f290121a4257935434cf93fdd725
msgid "Modelling an Address Database"
msgstr ""

#: ../../postgres/db_intro.rst:117
# 4f539bc443ba4c8ca64da430599ec973
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ../../postgres/db_intro.rst:120
# 91968c99ca0e444ab4497282373ac56d
msgid "Write some address properties in the space provided:"
msgstr ""

#: ../../postgres/db_intro.rst:155
# aa23fed8491643e3a118f894f2cb1def
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ../../postgres/db_intro.rst:160
# 68d0e8c88a1a4c4caedfaf66282bea6f
msgid "Database Theory"
msgstr ""

#: ../../postgres/db_intro.rst:162
# 79b1505812b344a9b1983e6a60b7a42b
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ../../postgres/db_intro.rst:166
# 50f4a77e5bbd4d1887ff986ea538abc6
msgid "Normalisation"
msgstr ""

#: ../../postgres/db_intro.rst:168
# e9cf738fba58457db4112dc5fea6b941
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ../../postgres/db_intro.rst:171
# 7612165ad3d947c6b5e21531954bd789
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:176
# bb4e60c57ec4427fab4852c3fe07f709
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../postgres/db_intro.rst:178
# 00fffb5e2f8f4a0aaf653282f76e05e3
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../postgres/db_intro.rst:203
# 4cd77e0a202e462a8707aa3ca0e55cec
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ../../postgres/db_intro.rst:207
# 2da9c54a0f5645c1ab7a6d01e9dc1041
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ../../postgres/db_intro.rst:237
# 6f86cd54cdf34c528114e239d16e72eb
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../postgres/db_intro.rst:241
# 3ba8688408f94a0e98746e06667074c7
msgid "Indexes"
msgstr ""

#: ../../postgres/db_intro.rst:243
# bef6e52106de463b8770282a813d9d8d
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:246
# 277a2e52da314a06b63bc509f7011b2e
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ../../postgres/db_intro.rst:256
# 6a15049b19cc45338c1f8c54efd2b296
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../postgres/db_intro.rst:274
# e89d09bdc63849b190f395cec1a296ea
msgid "Sequences"
msgstr ""

#: ../../postgres/db_intro.rst:276
# 58467e66110146f98e5946ac11bd02e8
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ../../postgres/db_intro.rst:279
# 7cd2593e2ab5483aa5677018bee9ce19
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ../../postgres/db_intro.rst:290
# c9db57cddcac4a01bb587873a478f9d7
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../postgres/db_intro.rst:292
# b7801e37cbb54c459189ce6fc0ebc49a
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ../../postgres/db_intro.rst:305
# d885c1da219e489a8773bbd3ef3aa205
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../postgres/db_intro.rst:316
# d715803f07ae4b1cbe89a9280c2f042b
msgid "and"
msgstr ""

#: ../../postgres/db_intro.rst:326
# 0bfff65582704076afe034a07fbe4ade
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ../../postgres/db_intro.rst:329
# 76321cde129d444887482ab30eb479c2
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ../../postgres/db_intro.rst:335
# 9ec9cf2ceb254f08bdddd22b9099f941
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ../../postgres/db_intro.rst:338
# 63f0c00be64243a38bdc000afd2649d4
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ../../postgres/db_intro.rst:370
# a89e6139ac1840a99f83225dbc7faaa3
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../postgres/db_intro.rst:372
# e92979e5bef8499091581360a4010e73
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../postgres/db_intro.rst:377
# bc46e8c294324b58b6b52fcdef4672c5
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../postgres/db_intro.rst:380
# ae347577cd794bc59b7cabc78605340f
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ../../postgres/db_intro.rst:383
# e3dde0ed8ec042a096a26123da338af1
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ../../postgres/db_intro.rst:386
# 368bba7359f240debaad887bf3c4836d
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ../../postgres/db_intro.rst:406
# 88b80acd50994002b214c55703799fdf
msgid "Transactions"
msgstr ""

#: ../../postgres/db_intro.rst:408
# 0f9cac39375a49afb59633d739ed98e4
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ../../postgres/db_intro.rst:414
# 46cc6477a25a456dbb8de63018f34ea0
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ../../postgres/db_intro.rst:418
# d55c3b3a0a6b4fc8a2c318e1d1e76b19
msgid "remove R20 from Joe"
msgstr ""

#: ../../postgres/db_intro.rst:419
# 546056811b3147d4bee0a639c74c2c6f
msgid "add R20 to Anne"
msgstr ""

#: ../../postgres/db_intro.rst:421
# ba71c531918641d890ba8e41651f7116
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ../../postgres/db_intro.rst:427
# 0b1dc6cae70e4885b57bc84fe86b0c7e
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ../../postgres/db_intro.rst:433
# aa9b08a8ef504b5db3204f6b8ce30de8
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

#: ../../postgres/index.rst:3
# ea5fc5cf0f2943b38d5f4ca233727703
msgid "|MOD| PostgreSQL"
msgstr ""

#: ../../postgres/index.rst:5
# 44995241e98b4220a7531a55ce077c90
msgid "PostgreSQL is a Database Management System (DBMS). In this module, you'll be shown how to use PostgreSQL to create a new database, as well as accessing other typical DBMS functions."
msgstr ""

#: ../../postgres/queries.rst:2
# 62214360c1b24b89bce96bb14523efc9
msgid "|LS| Queries"
msgstr ""

#: ../../postgres/queries.rst:4
# aef7492cb84e4d369d4eaa78d8326368
msgid "When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information."
msgstr ""

#: ../../postgres/queries.rst:7
# ed9ecb88048d4f5e937e5ae0e47bc0d0
msgid "**The goal of this lesson:** To learn how to create queries that will return useful information."
msgstr ""

#: ../../postgres/queries.rst:11
# 16c988efdd5d4abbbeaed3c0a6ee3189
msgid "Follow-up from previous lesson"
msgstr ""

#: ../../postgres/queries.rst:13
# 979807cabd654a299d614808a4ec33e1
msgid "Let's check that you added a few people to the database successfully:"
msgstr ""

#: ../../postgres/queries.rst:27
# 44e18e01dfe844258c20afd5d8750953
msgid "Ordering results"
msgstr ""

#: ../../postgres/queries.rst:29
# 5104182d489c4568acf78d55a11b28e9
msgid "Let's get a list of people ordered by their house numbers:"
msgstr ""

#: ../../postgres/queries.rst:35
#: ../../postgres/queries.rst:53
#: ../../postgres/queries.rst:187
#: ../../postgres/queries.rst:212
#: ../../postgres/queries.rst:237
#: ../../postgres/queries.rst:254
#: ../../postgres/queries.rst:298
#: ../../postgres/views.rst:30
# f29e64af5da44434b5c044a83e1e5d42
# cc427070701143ff8d286cad3f444adc
# 5d6c1e04e8db4fd6917f03a205ec57bf
# b37d8d4994ba478e9a791ed486097d68
# eace0a2120fa4c9090ca5439906ee016
# c69737c01a374951b460d49abb0f4a05
# 50106f73646d4e019db9658fb2ac9b64
# 1a7cd22f2b144892ad8c94c63627bc02
msgid "Result:"
msgstr ""

#: ../../postgres/queries.rst:47
# 1cc886ef0c1440f38c7b8f825e4e143c
msgid "You can sort by more than one column:"
msgstr ""

#: ../../postgres/queries.rst:66
# b988140efb374ababc82f803fffe5e82
msgid "Filtering"
msgstr ""

#: ../../postgres/queries.rst:68
# 2c403e53d850472bb62ec866341e1e12
msgid "Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two. Never fear, you can filter the results!"
msgstr ""

#: ../../postgres/queries.rst:72
# 0445d713b00a45fc9719bc81d47aee02
msgid "Here is an example of a numerical filter:"
msgstr ""

#: ../../postgres/queries.rst:83
# 6f81ba5602624d81a73a7f6c7ffddea6
msgid "You can combine filters (defined using the :kbd:`WHERE` clause) with sorting (defined using the :kbd:`ORDER BY`)"
msgstr ""

#: ../../postgres/queries.rst:96
# 96e8347038f44966917d393a03933269
msgid "You can also filter based on text data:"
msgstr ""

#: ../../postgres/queries.rst:107
# 9ecfc53284974748aedf453682e69eb9
msgid "Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`i` in them. If you want to search for a string of letters regardless of case, you can do a case insensitive search using the :kbd:`ILIKE` clause:"
msgstr ""

#: ../../postgres/queries.rst:120
# cd67ccb352f34456a45212ab1fa692e4
msgid "That found everyone with a :kbd:`k` or :kbd:`K` in their name. Using the normal :kbd:`ILIKE` clause, you'd get:"
msgstr ""

#: ../../postgres/queries.rst:132
# cbfe2372e6ab440d98171b102ab45394
msgid "Joins"
msgstr ""

#: ../../postgres/queries.rst:134
# ae132cabecb54c138db3c444670977df
msgid "What if you want to see the person's details and their street name (not its id)? In order to do that, you need to join the two tables together in a single query. Lets look at an example:"
msgstr ""

#: ../../postgres/queries.rst:144
# bc444e5b08b74a72a18215a9d8cb2e6d
msgid "With joins, you will always state the two tables the information is coming from, in this case people and streets.  You also need to specify which two keys must match (foreign key & primary key). If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!"
msgstr ""

#: ../../postgres/queries.rst:150
# 5e6f6b6505a84bf4933e42ff08df16ff
msgid "Here is what the correct output will look like:"
msgstr ""

#: ../../postgres/queries.rst:162
# 10da238b792549c7818b76fde3c5027c
msgid "We will revisit joins as we create more complex queries later. Just remember they provide a simple way to combine the information from two or more tables."
msgstr ""

#: ../../postgres/queries.rst:166
# 3be96dc97aed4cdeac01e8203fe2f2df
msgid "Subselect"
msgstr ""

#: ../../postgres/queries.rst:168
# 77b7f2f8c23b41c98ea7e109fcd144b2
msgid "First, let's do a little tweaking to our data:"
msgstr ""

#: ../../postgres/queries.rst:178
# 55c87cd38bed455c94b3eeee2a73a9d4
msgid "Let's take a quick look at our data after those changes - we reuse our query from the previous section:"
msgstr ""

#: ../../postgres/queries.rst:199
# b7a7015de4e945469532d04e315e1035
msgid "Now let's show you a subselection on this data. We want to show only people who live in :kbd:`street_id` number :kbd:`1`."
msgstr ""

#: ../../postgres/queries.rst:222
# ca42be0622b34881bcdad3709f8166ea
msgid "This is a contrived example and in the above situations it may have been overkill. However when you have to filter based on a selection, subselects are really useful!"
msgstr ""

#: ../../postgres/queries.rst:227
# 4ce45542cb294e9ca4ada2e270464bff
msgid "Aggregate Queries"
msgstr ""

#: ../../postgres/queries.rst:229
# 0623b85c96d94e3f8aa26409da706949
msgid "One of the powerful features of a database is its ability to summarise the data in its tables. These summaries are called aggregate queries. Here is a typical example:"
msgstr ""

#: ../../postgres/queries.rst:246
# 64407e8a9c9d40fa8faf96816bd448c5
msgid "If we want the counts summarised by street name we can do this:"
msgstr ""

#: ../../postgres/queries.rst:265
# 93048d09a054432fa568cab2ca71d58a
msgid "Because there is no :kbd:`ORDER BY` clause, on your computer these data may not be in the same order as shown here."
msgstr ""

#: ../../postgres/queries.rst:268
# 00fa88fca0874c4ba13d06a9beff91f1
msgid "Exercise:"
msgstr ""

#: ../../postgres/queries.rst:270
# ab2ee9a98d5041c39eed33edca1679dd
msgid "Summarise the people by street name and show the actual street names instead of the street_id's"
msgstr ""

#: ../../postgres/queries.rst:309
# a672ef4b3c794731a4a51bd281fff80e
msgid "You will notice that we have prefixed field names with table names (e.g. people.name and streets.name). This needs to be done whenever the field name is ambiguous."
msgstr ""

#: ../../postgres/queries.rst:316
# e81abcc3f9084fbba4a8acd7c06301c1
msgid "You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it."
msgstr ""

#: ../../postgres/queries.rst:322
# 30fbce6d70da4c209fc12104f88b2b8b
msgid "Next you'll see how to create views from the queries that you've written."
msgstr ""

#: ../../postgres/rules.rst:2
# c9e5499d4f6d4d8499fd5735acdc170e
msgid "|LS| Rules"
msgstr ""

#: ../../postgres/rules.rst:4
# 14deb1857b5048de80785915c05fc1d8
msgid "Rules allow the \"query tree\" of an incoming query to be rewritten. One common usage is to implement views, including updatable view. *- Wikipedia*"
msgstr ""

#: ../../postgres/rules.rst:7
# 1bb8890e3066477b812a1478b36e4bec
msgid "**The goal for this lesson:** To learn how to create new rules for the database."
msgstr ""

#: ../../postgres/rules.rst:11
# 76aa4d826927427c9df2650c01e978f2
msgid "Materialised Views (Rule based views)"
msgstr ""

#: ../../postgres/rules.rst:13
# 4d91f876424546c0b677304dcc1f397d
msgid "Say you want to log every change of phone_no in your people table in to a people_log table. So you set up a new table"
msgstr ""

#: ../../postgres/rules.rst:20
# 55bd0286708d4006b1209a06c121b613
msgid "In the next step create a rule, that logs every change of a phone_no in the people table into the people_log table:"
msgstr ""

#: ../../postgres/rules.rst:29
# c115cfdfb99d427dbf34b7aea2e780b6
msgid "To test that the rule works, let's modify a phone number:"
msgstr ""

#: ../../postgres/rules.rst:35
# 761257abc8c349549e03e5d3d87e70ab
msgid "Check that the table was updated correctly:"
msgstr ""

#: ../../postgres/rules.rst:44
# 8d869d4792314a6ea8fadd298515a701
msgid "Now, thanks to the rule we created, the :kbd:`people_log` table will look like this:"
msgstr ""

#: ../../postgres/rules.rst:54
# 67513df56aa84be2a9dc35c0d33406ce
msgid "The value of the :kbd:`time` field will depend on the current date and time."
msgstr ""

#: ../../postgres/rules.rst:60
# 9140690860b0446f8312975211ba6971
msgid "Rules allow you to automatically add or change data in your database to reflect changes in other parts of the database."
msgstr ""

#: ../../postgres/rules.rst:66
# c4d09e865616476287d23f84a9c642fe
msgid "The next module will introduce you to PostGIS, which takes these database concepts and applies them to GIS data."
msgstr ""

#: ../../postgres/views.rst:2
# dfe8818f77a042478c80257a8dcb9e49
msgid "|LS| Views"
msgstr ""

#: ../../postgres/views.rst:4
# 42c3e19286554d409bd765de64b18e84
msgid "When you write a query, you need to spend a lot of time and effort formulating it. With views, you can save the definition of a sql query in a reusable 'virtual table'."
msgstr ""

#: ../../postgres/views.rst:8
# e5543150ff084e9d861296bbd8660534
msgid "**The goal for this lesson:** To save a query as a view."
msgstr ""

#: ../../postgres/views.rst:11
# f57179e15b34405d99b3bea058dcafc2
msgid "Creating a View"
msgstr ""

#: ../../postgres/views.rst:13
# 1dc28fe70c8249c692d606f8563c0435
msgid "You can treat a view just like a table, but its data is sourced from a query. Let's make a simple view based on the above."
msgstr ""

#: ../../postgres/views.rst:23
# 05e0fed9ba1443e3a7c3616b9eb013ad
msgid "As you can see the only change is the :kbd:`create view roads_count_v as` part at the beginning. The nice thing is that we can now select data from that view:"
msgstr ""

#: ../../postgres/views.rst:42
# 5f3c82e7cf254edbb934624cbabb2d10
msgid "Modifying a View"
msgstr ""

#: ../../postgres/views.rst:44
# 748f18e2d78a40faa0bf3732f851c3ed
msgid "A view is not fixed, and it contains no 'real data'. This means you can easily change it without impacting on any data in your database."
msgstr ""

#: ../../postgres/views.rst:55
# 863607cf6442418c99f5b6a9e77c8152
msgid "(This example also shows the best practice convention of using UPPER CASE for all SQL keywords.)"
msgstr ""

#: ../../postgres/views.rst:58
# 2b8d964f049c43dd93497a3e6b22d96a
msgid "You will see that we have added an :kbd:`ORDER BY` clause so that our view rows are nicely sorted:"
msgstr ""

#: ../../postgres/views.rst:71
# c1f8e3ceb34043d794a861edac6b60a1
msgid "Dropping a View"
msgstr ""

#: ../../postgres/views.rst:73
# e17c0abe827942d8bb9a0b805ed9edd9
msgid "If you no longer need a view, you can delete it like this:"
msgstr ""

#: ../../postgres/views.rst:82
# 056f398c48cd42a6acf0e54adb30feff
msgid "Using views, you can save a query and access its results as if it were a table."
msgstr ""

#: ../../postgres/views.rst:87
# 8c78ceb6e29f4450839863587f202ccf
msgid "Sometimes, when changing data, you want your changes to have effects elsewhere in the database. The next lesson will show you how to do this."
msgstr ""

