# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-10-09 10:09\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../postgres/adding_data.rst:2
# c8ba1c5a8a4243dc9209d339de2e3853
msgid "|LS| Adding Data to the Model"
msgstr ""

#: ../../postgres/adding_data.rst:4
# a7187330d4394cbe9efd6dce18c1b74e
msgid "The models we've created will now need to be populated with the data they're intended to contain."
msgstr ""

#: ../../postgres/adding_data.rst:7
# ae4d84b7cb4f4e73970d988c048b7ff2
msgid "**The goal for this lesson:** To learn how to insert new data into the database models."
msgstr ""

#: ../../postgres/adding_data.rst:11
# 7a39b2f7abbc40e9b0e91584797619c0
msgid "Insert statement"
msgstr ""

#: ../../postgres/adding_data.rst:13
# fd110308ecb7439ab828e4a8a7b027a3
msgid "How do you add data to a table? The sql :kbd:`INSERT` statement provides the functionality for this:"
msgstr ""

#: ../../postgres/adding_data.rst:20
# cd19f8305caf414f9b1e1944d8515a3d
msgid "A couple of things to note:"
msgstr ""

#: ../../postgres/adding_data.rst:22
# 93da6382a52f429d8496c346a4bbb9b7
msgid "after the table name (:kbd:`streets`), you list the column names that you will be populating (in this case only the :kbd:`name` column)."
msgstr ""

#: ../../postgres/adding_data.rst:24
# b84ac47dc73140fbaf2fbf498ffa9897
msgid "after the :kbd:`values` keyword, place the list of field values."
msgstr ""

#: ../../postgres/adding_data.rst:25
# 4a572cb9415b4b0fb76b2fca89ffb038
msgid "strings should be quoted using single quotes."
msgstr ""

#: ../../postgres/adding_data.rst:26
# 1e753fed97174165b9245cb54882d886
msgid "you will note that I did not insert a value for the :kbd:`id` column - that is because it is a sequence and will be autogenerated."
msgstr ""

#: ../../postgres/adding_data.rst:28
# b8221591d59c4fc0803212c6109296da
msgid "if you do manually set the :kbd:`id`, you may cause serious problems with the integrity of your database."
msgstr ""

#: ../../postgres/adding_data.rst:31
# 66203849a0d14f6a8c8f9f18ed62784d
msgid "You should see :kbd:`INSERT 0 1` if it is successful."
msgstr ""

#: ../../postgres/adding_data.rst:33
# 3bbe8d5974e3409c9346492b59b4bb9d
msgid "You can see the result of your insert action by selecting all the data in the table:"
msgstr ""

#: ../../postgres/adding_data.rst:40
# 9d77261ccbcf4ec397d61fce0fa07e0c
msgid "result:"
msgstr ""

#: ../../postgres/adding_data.rst:50
# 4af042f440ae499f9986bbea370000ea
msgid "Now you try:"
msgstr ""

#: ../../postgres/adding_data.rst:52
# 783b8b8415f740eb9efb2201ac87e944
msgid "Use the :kbd:`INSERT` command to add a new street to the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:54
# 25ae9eab4f4640bf9a55ac218f369a72
msgid "Write the sql you used here:"
msgstr ""

#: ../../postgres/adding_data.rst:70
# 154ed1d9eb0d425a8d95b7ef910a5156
msgid "Sequencing data addition according to constraints"
msgstr ""

#: ../../postgres/adding_data.rst:72
# 7d56e400bd99440da1eb7e6ce71191b8
msgid "Try to add a person to the people table with the following details:"
msgstr ""

#: ../../postgres/adding_data.rst:81
# e8cf9e0f3a564f40b7dae134de8ee6cf
msgid "Remember, we defined phone numbers as strings."
msgstr ""

#: ../../postgres/adding_data.rst:83
# dcaf9af1711544eda3296733d703bd2a
msgid "What problems did you encounter?"
msgstr ""

#: ../../postgres/adding_data.rst:104
# ac9a5bd5435d4705b64945ab5a1f12e0
msgid "You should have an error report if you try to do this without first creating a record for Main Street in the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:107
# ee386491bbb84c37a466351e34655c39
msgid "What error did you get?"
msgstr ""

#: ../../postgres/adding_data.rst:110
# af05f67f93054039a378cc67b4bf80f6
msgid "You can't add the street using its name"
msgstr ""

#: ../../postgres/adding_data.rst:111
# 989045905a29436886c10bd1b16eba15
msgid "You can't add a street using a street :kbd:`id` before first creating the street record on the streets table"
msgstr ""

#: ../../postgres/adding_data.rst:114
# 24ef6557b7a04a38b5b9225600fb04da
msgid "Remember that our two tables are linked via a Primary/Foreign Key pair. This means that no valid person can be created without there also being a valid corresponding street record."
msgstr ""

#: ../../postgres/adding_data.rst:118
# b7b80b32ff5143778718361921c80902
msgid "Here is how we made our friend:"
msgstr ""

#: ../../postgres/adding_data.rst:126
# 49dfc6316f764b0ba9528d5e71ecd4ca
msgid "If you look at the streets table again (using a select statement as before), you'll see that the :kbd:`id` for the :kbd:`Main Street` entry is :kbd:`2`. That's why we could merely enter the number :kbd:`2` above. Even though we're not seeing :kbd:`Main Street` written out fully in the entry above, the database will be able to associate that with the :kbd:`street_id` value of :kbd:`2`."
msgstr ""

#: ../../postgres/adding_data.rst:134
# f64fd5fba4014dcd823df94a76d779d8
msgid "Select data"
msgstr ""

#: ../../postgres/adding_data.rst:136
# 2e2a3fe0f47542d0a9ea14e8730865e0
msgid "We have already shown you the syntax for selecting records. Lets look at a few more examples:"
msgstr ""

#: ../../postgres/adding_data.rst:151
# c6789cddc5994bf9a850370b2aafbecd
msgid "In later sessions we will go into more detail on how to select and filter data."
msgstr ""

#: ../../postgres/adding_data.rst:154
# 66b339812842475992bb54bbdac3d91a
msgid "Update data"
msgstr ""

#: ../../postgres/adding_data.rst:156
# d8a9c86415ad4c53a2f36cf2237b434b
msgid "What is you want to make a change to some existing data? For example a street name is changed:"
msgstr ""

#: ../../postgres/adding_data.rst:163
# ff768824988b4ceca6d0d311ebd35ec5
msgid "Be very careful using such update statements - if more than one record matches your :kbd:`WHERE` clause, they will all be updated!"
msgstr ""

#: ../../postgres/adding_data.rst:166
# 54f41896470d4e1bbb8b312b502dbad7
msgid "A better solution is to use the primary key of the table to reference the record to be changed:"
msgstr ""

#: ../../postgres/adding_data.rst:173
# 1e94ea366e8e471da80f6724096c999e
msgid "It should return :kbd:`UPDATE 1`."
msgstr ""

#: ../../postgres/adding_data.rst:175
# 00b47f21d58f43109156317e04b56c4b
msgid "the :kbd:`WHERE` statement criteria are case sensitive :kbd:`Main Street` <> :kbd:`Main street`"
msgstr ""

#: ../../postgres/adding_data.rst:179
# 442634f691b94094900b3fd82fc295c4
msgid "Delete Data"
msgstr ""

#: ../../postgres/adding_data.rst:181
# 120222f49d484c4c948a048bbe2aeae8
msgid "Some times you fall out of friendship with people. Sounds like a job for the :kbd:`DELETE` command!"
msgstr ""

#: ../../postgres/adding_data.rst:188
# 62c09f5161174e87afeede92c8c5ac6e
msgid "Let's look at our people table now:"
msgstr ""

#: ../../postgres/adding_data.rst:197
# 3b0b0f878f4644df882089d0b70e1cce
msgid "**Exercise:** Use the skills you learned earlier to add some new friends to your database:"
msgstr ""

#: ../../postgres/adding_data.rst:210
#: ../../postgres/data_model.rst:483
#: ../../postgres/db_intro.rst:425
#: ../../postgres/queries.rst:314
#: ../../postgres/rules.rst:58
#: ../../postgres/views.rst:80
# 84c77247d421446eae09deb8e2f06116
# 09cf3f432ee44e64b76cca2b563e0551
# 2e5fcc410186477f8680e5f27f761eb6
# dfbe75211ed04ac5899270a261dc98d0
# 00493b6c06f4464db7f70d5390226207
# c6d9b5c5450e4f008e9c2cb98d1e87d5
msgid "|IC|"
msgstr ""

#: ../../postgres/adding_data.rst:212
# 05b9ac344db143ea9346e7c728bb364a
msgid "Now you know how to add new data to the existing models you created previously. Remember that if you want to add new kinds of data, you may want to modify and/or create new models to contain that data."
msgstr ""

#: ../../postgres/adding_data.rst:217
#: ../../postgres/data_model.rst:489
#: ../../postgres/db_intro.rst:431
#: ../../postgres/queries.rst:320
#: ../../postgres/rules.rst:64
#: ../../postgres/views.rst:85
# d6f33cdcfa964724b57b772a6ae61550
# ba139ac17a6e4932b3c832651b0a8bcd
# 77db36c42a1b407cbff3d5b13b7509f6
# f8ad3423e18649cc9712b889ae918300
# d5db155b1c7b4d19acc8d149ea759948
# 007ab682a8c6408db04527fc7e2361d8
msgid "|WN|"
msgstr ""

#: ../../postgres/adding_data.rst:219
# 0903cc6f98484a5d96c72739a232f300
msgid "Now that you've added some data, you'll learn how to use queries to access this data in various ways."
msgstr ""

#: ../../postgres/data_model.rst:2
# 520a4070d740421fad1289a56889dc47
msgid "|LS| Implementing the Data Model"
msgstr ""

#: ../../postgres/data_model.rst:4
# 88382b1bb1a24bb49e01f9c2cf0f6582
msgid "Now that we've covered all the theory, let's create a new database. This database will be used for our exercises for the lessons that will follow afterwards."
msgstr ""

#: ../../postgres/data_model.rst:8
# f95515c2e15c41448236eb87c7a24e5c
msgid "**The goal for this lesson:** To install the required software and use it to implement our example database."
msgstr ""

#: ../../postgres/data_model.rst:12
# 04a90adeb8544b918c18e222fb084fb6
msgid "Install PostgreSQL"
msgstr ""

#: ../../postgres/data_model.rst:14
#: ../../postgres/data_model.rst:51
# 3e84b4d8c71d4be4a0e39ec27fd80986
# 0ee1b0c512c34e2086419eb02f37b52b
msgid "Under Ubuntu:"
msgstr ""

#: ../../postgres/data_model.rst:20
# 42b0c3a052004980a0646e4642279c28
msgid "You should get a message like this:"
msgstr ""

#: ../../postgres/data_model.rst:39
# 9a5120083c2b445caed261fd6e0c4801
msgid "Press :kbd:`Y` and :kbd:`Enter` and wait for the download and installation to finish."
msgstr ""

#: ../../postgres/data_model.rst:43
# f8912f92e19548b79cee0eb09f45dc80
msgid "Help"
msgstr ""

#: ../../postgres/data_model.rst:45
# 214215fe485c445b9d1a3d45934f8d2b
msgid "PostgreSQL has very good `online <http://www.postgresql.org/docs/9.1/static/index.html>`_ documentation."
msgstr ""

#: ../../postgres/data_model.rst:49
# 10a806ddfd8148af8b1b42d6c4932565
msgid "Create a database user"
msgstr ""

#: ../../postgres/data_model.rst:53
# 79e173916bf045439677c6942e180654
msgid "After the installation is complete, run this command to become the postgres user and then create a new database user:"
msgstr ""

#: ../../postgres/data_model.rst:60
# 1e7600f68a1d4b1d94dd5d399ccb6d0e
msgid "Type in your normal log in password when prompted (you need to have sudo rights)."
msgstr ""

#: ../../postgres/data_model.rst:62
# 1ebd707dd03747ffb36062622961dde5
msgid "Now, at the postgres user's bash prompt, create the database user. Make sure the user name matches your unix login name: it will make your life much easier, as postgres will automatically authenticate you when you are logged in as that user."
msgstr ""

#: ../../postgres/data_model.rst:71
# b08d406575134bd2abf8e708131937f0
msgid "Enter a password when prompted. I normally use a different password to my usual unix login."
msgstr ""

#: ../../postgres/data_model.rst:74
# b8cddad2002744bdb14de5bfd91e8cd0
msgid "What do those options mean?"
msgstr ""

#: ../../postgres/data_model.rst:86
# ebde5743e7e34793b0f8c65b1d9a2521
msgid "Now you should should leave the postgres user's bash shell environment by typing:"
msgstr ""

#: ../../postgres/data_model.rst:94
# b74a07f6a5554a65ad17c2cc42b82ee0
msgid "Verify the new account"
msgstr ""

#: ../../postgres/data_model.rst:100
# 615f0aa2050541b8b3a9b1f55dd58555
msgid "Should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:113
#: ../../postgres/data_model.rst:144
# b0f4aca79382417981b6736a100aa1d8
# 15259c4f3343420aaf0fa37dc15f1a0d
msgid "Type :kbd:`q` to exit."
msgstr ""

#: ../../postgres/data_model.rst:116
# 5e658e0c8d4345bb9204f3f5c879b8b4
msgid "Create a database"
msgstr ""

#: ../../postgres/data_model.rst:118
# f8274441a2894f0db769332e7d869e50
msgid "The :kbd:`createdb` command is used to create a new database. It should be run from the bash shell prompt."
msgstr ""

#: ../../postgres/data_model.rst:125
# fc3c2ce4791f4d6d8bdd7547f21380a9
msgid "You can verify the existence of your new database by using this command:"
msgstr ""

#: ../../postgres/data_model.rst:131
# 39abad5699aa477bb2a5a6007ce00cc3
msgid "Which should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:147
# 7651462b7bc141e0bad7fa3ce52fdaad
msgid "Starting a database shell session"
msgstr ""

#: ../../postgres/data_model.rst:149
# 32e83b7e473b480c8c32b275d6849848
msgid "You can connect to your database easily like this:"
msgstr ""

#: ../../postgres/data_model.rst:155
# 8db3d81020c949bc8c66b9bffdcd0e1f
msgid "To exit out of the psql database shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:161
# 56559035750c470db428e63908c746cd
msgid "For help in using the shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:167
# 0b5349b318cb489bafa2ad58946d7ddb
msgid "For help in using sql commands, type:"
msgstr ""

#: ../../postgres/data_model.rst:173
# fb94e39f956b44e9817113e7aaf54fbc
msgid "To get help on a specific command, type (for example):"
msgstr ""

#: ../../postgres/data_model.rst:179
# 5af03ce4dab74cecb97b6422cc4474a4
msgid "See also the `Psql cheat sheet <../_static/postgres/psql_cheatsheet.pdf>`_ - available online `here <http://www.postgresonline.com/special_feature.php?sf_name=postgresql83_psql_cheatsheet&outputformat=html>`_."
msgstr ""

#: ../../postgres/data_model.rst:184
# 893c211eb6534c11b6941d08199baf66
msgid "Make Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:186
# eaaf0788690a45e59ea94d5cf76dda15
msgid "Let's start making some tables! We will use our ER Diagram as a guide. First, let's create a streets table:"
msgstr ""

#: ../../postgres/data_model.rst:193
# 210825199f304e2ab5787c91fe2df04d
msgid ":kbd:`serial` and :kbd:`varchar` are **data types**. :kbd:`serial` tells PostgreSQL to start an integer sequence (autonumber) to populate the :kbd:`id` automatically for every new record. :kbd:`varchar(50)` tells PostgreSQL to create a character field of 50 characters in length."
msgstr ""

#: ../../postgres/data_model.rst:198
# c8310d63ade74e08b6017582837a890f
msgid "You will notice that the command ends with a :kbd:`;` - all SQL commands should be terminated this way. When you press enter, psql will report something like this:"
msgstr ""

#: ../../postgres/data_model.rst:210
# 9f25804470a347a696a69eeb7addb561
msgid "That means your table was created successfully, with a primary key :kbd:`streets_pkey` using :kbd:`streets.id`."
msgstr ""

#: ../../postgres/data_model.rst:213
# dc9e4341beb24015be27878cda73ebe0
msgid "Note: If you hit return without entering a :kbd:`;`, then you will get a prompt like this: :kbd:`address-#`. This is because PG is expecting you to enter more. Enter :kbd:`;` to run your command."
msgstr ""

#: ../../postgres/data_model.rst:217
# 3863a0b392e34373be3f0197000d0b68
msgid "To view your table schema, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:223
#: ../../postgres/data_model.rst:242
# 65ebc54bfa3648c8a5cc148a652f277b
# 44ba90aeaab04fc5b1741a9bfa21f5f4
msgid "Which should show something like this:"
msgstr ""

#: ../../postgres/data_model.rst:236
# 8f66d1c73d63465e9ecd301a322bcca5
msgid "To view your table contents, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:250
# 9a91e89285c54cb5852a726f230b62ef
msgid "As you can see, our table is empty!"
msgstr ""

#: ../../postgres/data_model.rst:252
# 00a2991dad88488db660e03f0e792563
msgid "Use the approach shown above to make a table called people: Add fields such as phone number, home address, name, etc. (these aren't all valid names: change them to make them valid)."
msgstr ""

#: ../../postgres/data_model.rst:255
# ffd4496f611e44d3b50186007b311b59
msgid "Write the SQL you create here:"
msgstr ""

#: ../../postgres/data_model.rst:296
#: ../../postgres/queries.rst:289
# 1a2138eec4b649b0beab3fe6c10787d9
# 2ab96a75b19e4ce98e3517134bc7bc87
msgid "Solution:"
msgstr ""

#: ../../postgres/data_model.rst:306
# 39f6881532f84756b14ef4ad6aaab9a1
msgid "The schema for the table (enter :kbd:`\\\\d people`) looks like this:"
msgstr ""

#: ../../postgres/data_model.rst:322
# 4acf1021969449b4b001a78444b4a70e
msgid "For illustration purposes, we have purposely omitted the fkey constraint."
msgstr ""

#: ../../postgres/data_model.rst:326
# c35a7bed5dda442a8bfe085254aeea46
msgid "Create Keys in SQL"
msgstr ""

#: ../../postgres/data_model.rst:328
# b94338d6d8ad4b2fb4a489c5fa2bc4ad
msgid "The problem with our solution above is that the database doesn't know that people and streets have a logical relationship. To express this relationship, we have to define a foreign key that points to the primary key of the streets table."
msgstr ""

#: ../../postgres/data_model.rst:337
# 2027089f23dc4a34a3e5c26d6fd12851
msgid "adding the key after the table has been created"
msgstr ""

#: ../../postgres/data_model.rst:338
# a309cf3b19904f138cf750cb36fe1eeb
msgid "defining the key at time of table creation"
msgstr ""

#: ../../postgres/data_model.rst:340
# 169cd7d6ad6243fb8aa0224b7df4a3f9
msgid "Our table has already been created, so let's do it the first way:"
msgstr ""

#: ../../postgres/data_model.rst:348
# 345d92e0dc9b4e318d6940c0bc9502dd
msgid "That tells the :kbd:`people` table that its :kbd:`street_id` fields must match a valid street :kbd:`id` from the :kbd:`streets` table."
msgstr ""

#: ../../postgres/data_model.rst:351
# 5fcd9945ece846db9efffd87f74242c4
msgid "The more usual way to create a constraint is to do it when you create the table:"
msgstr ""

#: ../../postgres/data_model.rst:361
# 1571ab4588254c81b4187ec08c95a935
msgid "After adding the constraint, our table schema looks like this now:"
msgstr ""

#: ../../postgres/data_model.rst:381
# 0379f47f316d4fb88d88f39acdedbec5
msgid "Create Indexes in SQL"
msgstr ""

#: ../../postgres/data_model.rst:383
# 7dff2b5f5e3143d8a5a21a3043912894
msgid "We want lightning fast searches on peoples names. To provide for this, we can create an index on the name column of our people table:"
msgstr ""

#: ../../postgres/data_model.rst:409
# 66e0cda2ef0946e7b38cef1c6b43f0aa
msgid "Dropping Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:411
# 1afef98eab9f426ebfc8fe4bf3d2a759
msgid "If you want to get rid of a table you can use the :kbd:`drop` command:"
msgstr ""

#: ../../postgres/data_model.rst:418
# 5d1df9b64c784eaa9fa91a0e6f09d1cc
msgid "In our example, this would not work - why?"
msgstr ""

#: ../../postgres/data_model.rst:420
# f9e0c1f80cf74319936e76e6fc26aca1
msgid "Some deep and inspired thoughts as to why..."
msgstr ""

#: ../../postgres/data_model.rst:436
# 0afea7f21426484986f4714bd60f53e1
msgid "Sometimes you just can't stand having a table any more. Maybe you are sick of all your friends. How can you get rid of them all in one easy step? Drop the table of course! Of course, right now too much hard work has gone into our table to get rid of it on a whim, but if you really hate your friends that much, nothing's stopping you from ridding yourself of them forever:"
msgstr ""

#: ../../postgres/data_model.rst:446
# f839beb33d3847d0877815d9910995fe
msgid "This time it works fine! Why? Are people less important than streets?"
msgstr ""

#: ../../postgres/data_model.rst:448
# 61048286fa5c478c931ec8221d17b6cb
msgid "Some thoughts on why you could drop people:"
msgstr ""

#: ../../postgres/data_model.rst:464
# 9a9153b9d12d4ad1a828999fa46dc5df
msgid "If you actually did enter that command and dropped the :kbd:`people` table, now would be a good time to rebuild it, as you will need it in the next exercises."
msgstr ""

#: ../../postgres/data_model.rst:469
# 3b3fe560c6064f238f0a16a6625b5870
msgid "A word on PG Admin III"
msgstr ""

#: ../../postgres/data_model.rst:471
# 2a65df9cd32a439ba6461756c93d13bc
msgid "We are showing you the SQL commands from the psql prompt because it's a very useful way to learn about databases. However, there are quicker and easier ways to do a lot of what we are showing you. Install PGAdminIII and you can create, drop, alter etc tables using 'point and click' operations in a GUI."
msgstr ""

#: ../../postgres/data_model.rst:476
# 2c2b8e6404aa4984b685192707303bc8
msgid "Under Ubuntu, you can install it like this:"
msgstr ""

#: ../../postgres/data_model.rst:485
# cef6c902b37b43ae983659443b544c2f
msgid "You have now seen how to create a brand new database, starting completely from scratch."
msgstr ""

#: ../../postgres/data_model.rst:491
# 3d02efc1470046848985e7a73bb40a50
msgid "Next you'll learn how to use the DBMS to add new data."
msgstr ""

#: ../../postgres/db_intro.rst:2
# 94218ad4222c4dddbd00866736f6f642
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../postgres/db_intro.rst:4
# 5c7bc5177af94a0ab841f58da1b6d4d3
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ../../postgres/db_intro.rst:8
# bec1adade46c46ff8c4e83bf7d3c6d18
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../postgres/db_intro.rst:11
# 86dad6a098c2409ea783369f15774c14
msgid "What is a Database?"
msgstr ""

#: ../../postgres/db_intro.rst:13
# 02f2a6f399714ceb9f233d98e585c7ff
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:18
# 4e72f3c8b0114c708861e7585d1caf86
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:23
# 149bff9c6471451fb670b5f9310ace2d
msgid "Tables"
msgstr ""

#: ../../postgres/db_intro.rst:25
# f427bbdb588943709e34db6021f017ad
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:40
# bd88900458f341ffbc9b694be5b21e80
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../postgres/db_intro.rst:43
# 590463cae2f142238cf2629b9ae3b5ef
msgid "Columns / Fields"
msgstr ""

#: ../../postgres/db_intro.rst:45
# cfc1caa5c56e4e4c9894b160c204d9c7
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:52
# 45e0582b7dba4fbf9d544fd8148e055e
msgid "A column:"
msgstr ""

#: ../../postgres/db_intro.rst:61
# a92af98c0af24f92a34b74efc7332cec
msgid "A field:"
msgstr ""

#: ../../postgres/db_intro.rst:68
# 6bab6f0a4af34e54a8041a30dbc3298f
msgid "Records"
msgstr ""

#: ../../postgres/db_intro.rst:70
# 5e5937faf6914310b9cc1ef9be214375
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ../../postgres/db_intro.rst:78
# 524c96dff26147dcbabc97230a5b2789
msgid "Datatypes"
msgstr ""

#: ../../postgres/db_intro.rst:80
# 28f37c1c85f34f25aad883f084c5b03e
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ../../postgres/db_intro.rst:83
# 00b5c5e41a664a668efe526b9f05b634
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../postgres/db_intro.rst:85
# 25d3778c7314443d8aacc73504d2770f
msgid "String - to store free-form text data"
msgstr ""

#: ../../postgres/db_intro.rst:86
# b2946458606e4ba69b01ecaee3cc79b9
msgid "Integer - to store whole numbers"
msgstr ""

#: ../../postgres/db_intro.rst:87
# a941d8b7c7b64157bea2d3d78ccd6660
msgid "Real - to store decimal numbers"
msgstr ""

#: ../../postgres/db_intro.rst:88
# 8f04b7c207f44efcba580aa5a42808d8
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../postgres/db_intro.rst:89
# 81a34f3480364a72bef6658bc4e2bcb3
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ../../postgres/db_intro.rst:91
# 679c201cb9a74d719c612e15228e1c4e
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ../../postgres/db_intro.rst:111
# 7d0126f9e5e64435b56a52c0f43c6958
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ../../postgres/db_intro.rst:115
# eabaa0338f1d4de58e144ff7c2ea619f
msgid "Modelling an Address Database"
msgstr ""

#: ../../postgres/db_intro.rst:117
# f86ea05ecd36469dbe8067618fd9417c
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ../../postgres/db_intro.rst:120
# 277976b7340048b5a5fc88aae0d1cce9
msgid "Write some address properties in the space provided:"
msgstr ""

#: ../../postgres/db_intro.rst:155
# 3a17b0726385468798f183969da50ae3
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ../../postgres/db_intro.rst:160
# 8a69c7d381534a70bdbb809297cfe5ba
msgid "Database Theory"
msgstr ""

#: ../../postgres/db_intro.rst:162
# 5b1539d79b03435ea23b0d922e3d2ec9
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ../../postgres/db_intro.rst:166
# 965ec34b2316401aa690c0e50ca9b9ea
msgid "Normalisation"
msgstr ""

#: ../../postgres/db_intro.rst:168
# 82cb2ee13d104d8399d94b84a6733871
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ../../postgres/db_intro.rst:171
# 558b585adf104dfcaae90f12c2a080bd
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:176
# 3a6d3acd46c34a44aa830a0964c45f98
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../postgres/db_intro.rst:178
# 5b25776a87e44cb0be148aa22b286046
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../postgres/db_intro.rst:203
# fa8e45a014dc471491febad40ee5d334
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ../../postgres/db_intro.rst:207
# b2f827a7daf74e1685a2fd569bae00e4
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ../../postgres/db_intro.rst:237
# a88189d5e44e4cde82f307ac0f6d27fd
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../postgres/db_intro.rst:241
# e1bf532ced5f485d88893c29e72b0c71
msgid "Indexes"
msgstr ""

#: ../../postgres/db_intro.rst:243
# 03f3f2a1bbf64bf5972676ced595eb9c
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:246
# 11b02c01c82c44fdb11e7a5afce939f5
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ../../postgres/db_intro.rst:256
# 7cf1ff7ba3c44f86b2c2a36cacffd566
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../postgres/db_intro.rst:274
# a88e8362307244448cadd60ea96f38db
msgid "Sequences"
msgstr ""

#: ../../postgres/db_intro.rst:276
# d3afa2c6591a44ed84635c29bcb3a829
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ../../postgres/db_intro.rst:279
# ca3a4fe58813490c83b89d957e2851a1
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ../../postgres/db_intro.rst:290
# 0d8f02da7e004f66bc94be718d816910
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../postgres/db_intro.rst:292
# 2eb68868726f411babd5b3d3835f7874
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ../../postgres/db_intro.rst:305
# 205810c824b247519294569e851d61a0
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../postgres/db_intro.rst:316
# e109c66ab811436faf106e82f1ab55bb
msgid "and"
msgstr ""

#: ../../postgres/db_intro.rst:326
# b9e04075648d44e1addf8f6a52651b5a
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ../../postgres/db_intro.rst:329
# 6599a303317842a4ae861fa1f7b9bd7a
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ../../postgres/db_intro.rst:335
# d8a0c9c077f148a996cf15969a5e0050
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ../../postgres/db_intro.rst:338
# b95310dc3d3941179c65961fb3a32b7b
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ../../postgres/db_intro.rst:370
# 72c62edba8b744bbbeddf9c879d11845
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../postgres/db_intro.rst:372
# 2cf16e40b9094ee7b2005a4f615bbe43
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../postgres/db_intro.rst:377
# d6721a2f339146358213da3fc6362f85
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../postgres/db_intro.rst:380
# 5bdcd5c031874dfa987fe24ed65c8eef
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ../../postgres/db_intro.rst:383
# 7c5d64f25ba240f5809651e194c6b376
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ../../postgres/db_intro.rst:386
# fc79699034bf4520882e1900e1d603ae
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ../../postgres/db_intro.rst:406
# b5a579b2b39947a388c7a3addf65a6e9
msgid "Transactions"
msgstr ""

#: ../../postgres/db_intro.rst:408
# 229b5f68126641bcad9bdbad632ada6f
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ../../postgres/db_intro.rst:414
# 7e8dae58f114446a8c8c0e5920067d88
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ../../postgres/db_intro.rst:418
# fd8b3889c05a46999fb1a273de342ec3
msgid "remove R20 from Joe"
msgstr ""

#: ../../postgres/db_intro.rst:419
# f70c9e8190214f2986213e1af03612f5
msgid "add R20 to Anne"
msgstr ""

#: ../../postgres/db_intro.rst:421
# b67c79dfa7c54abaa39eb31959be8904
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ../../postgres/db_intro.rst:427
# a7bacae07aa54482a5e48616ef1f2dea
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ../../postgres/db_intro.rst:433
# f24918d01a504c23abe6e8939f693fe4
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

#: ../../postgres/index.rst:3
# 96252c913d244b6793518df506e7753c
msgid "|MOD| PostgreSQL"
msgstr ""

#: ../../postgres/index.rst:5
# 07f6d3ecc6354c1b9d1c66d16b333b84
msgid "PostgreSQL is a Database Management System (DBMS). In this module, you'll be shown how to use PostgreSQL to create a new database, as well as accessing other typical DBMS functions."
msgstr ""

#: ../../postgres/queries.rst:2
# fabcc0a759034ac08907e1b9150a5499
msgid "|LS| Queries"
msgstr ""

#: ../../postgres/queries.rst:4
# 7cbcfa6843794fd28b5f2ada0f3af77b
msgid "When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information."
msgstr ""

#: ../../postgres/queries.rst:7
# 86488f74069745d8a4349cc7f418ac57
msgid "**The goal of this lesson:** To learn how to create queries that will return useful information."
msgstr ""

#: ../../postgres/queries.rst:11
# 055c297b520745f2a74af08882c5207c
msgid "Follow-up from previous lesson"
msgstr ""

#: ../../postgres/queries.rst:13
# aeda68ca7f0c4c89adbf1bb4d47887dd
msgid "Let's check that you added a few people to the database successfully:"
msgstr ""

#: ../../postgres/queries.rst:27
# 887711f306ac430eb29e49e897b6deca
msgid "Ordering results"
msgstr ""

#: ../../postgres/queries.rst:29
# 0c4dc69f357a424a9625f16edeab117f
msgid "Let's get a list of people ordered by their house numbers:"
msgstr ""

#: ../../postgres/queries.rst:35
#: ../../postgres/queries.rst:53
#: ../../postgres/queries.rst:187
#: ../../postgres/queries.rst:212
#: ../../postgres/queries.rst:237
#: ../../postgres/queries.rst:254
#: ../../postgres/queries.rst:298
#: ../../postgres/views.rst:30
# f032d20ef79c4a67855fdb2589cd4d50
# 8b7b54030229491d94396384e33008d5
# c047175cacd749bf87f66837dda06e1c
# 6dde9f3af5c14befb2e5b78ea3b66d9c
# f2a3d271f32a411a948a626699402b33
# 5b345deb3a084aad93d35d92f3793cbb
# 9a9be776810d4c2aa47314813dfd8a41
# 3e2ef379c3ab4cd3bb561aac107d1f97
msgid "Result:"
msgstr ""

#: ../../postgres/queries.rst:47
# 18e06640480b4558b3f99c12f585cf0d
msgid "You can sort by more than one column:"
msgstr ""

#: ../../postgres/queries.rst:66
# 3497275789d14fdb9677cd0f9147a3f9
msgid "Filtering"
msgstr ""

#: ../../postgres/queries.rst:68
# 275cf21dd25440f9b6c3e8b35b0b3f58
msgid "Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two. Never fear, you can filter the results!"
msgstr ""

#: ../../postgres/queries.rst:72
# 9ba4aa3f8c8548d287a4653a483ef88c
msgid "Here is an example of a numerical filter:"
msgstr ""

#: ../../postgres/queries.rst:83
# 5a0e2355b8844d428c10564b821b0e1d
msgid "You can combine filters (defined using the :kbd:`WHERE` clause) with sorting (defined using the :kbd:`ORDER BY`)"
msgstr ""

#: ../../postgres/queries.rst:96
# c2c2cfada3e24c5598f3aa256802c94c
msgid "You can also filter based on text data:"
msgstr ""

#: ../../postgres/queries.rst:107
# c3d1be945e5d4d0c8702ad7aa55c922b
msgid "Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`i` in them. If you want to search for a string of letters regardless of case, you can do a case insensitive search using the :kbd:`ILIKE` clause:"
msgstr ""

#: ../../postgres/queries.rst:120
# c3a46286986f44688eae14e50c0b41e8
msgid "That found everyone with a :kbd:`k` or :kbd:`K` in their name. Using the normal :kbd:`ILIKE` clause, you'd get:"
msgstr ""

#: ../../postgres/queries.rst:132
# 57911b988a3747239d24173e05daf8c5
msgid "Joins"
msgstr ""

#: ../../postgres/queries.rst:134
# 5f1169ad195443d6b97842f0c080b9ed
msgid "What if you want to see the person's details and their street name (not its id)? In order to do that, you need to join the two tables together in a single query. Lets look at an example:"
msgstr ""

#: ../../postgres/queries.rst:144
# 27e8b91165ce4428b99d10199be9cc5c
msgid "With joins, you will always state the two tables the information is coming from, in this case people and streets.  You also need to specify which two keys must match (foreign key & primary key). If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!"
msgstr ""

#: ../../postgres/queries.rst:150
# e07a4add967d4df9bf462702bb2f7d31
msgid "Here is what the correct output will look like:"
msgstr ""

#: ../../postgres/queries.rst:162
# 6edefb06620b4154bf50a5a2c39064d8
msgid "We will revisit joins as we create more complex queries later. Just remember they provide a simple way to combine the information from two or more tables."
msgstr ""

#: ../../postgres/queries.rst:166
# 037ffc5deba441fd8bb173f122ec327b
msgid "Subselect"
msgstr ""

#: ../../postgres/queries.rst:168
# 8c84596be4804d5cbafab9f0d227d57a
msgid "First, let's do a little tweaking to our data:"
msgstr ""

#: ../../postgres/queries.rst:178
# 56d4205efef74410968e0ad0e4710500
msgid "Let's take a quick look at our data after those changes - we reuse our query from the previous section:"
msgstr ""

#: ../../postgres/queries.rst:199
# 14859bf04eda42349ea038193cf17638
msgid "Now let's show you a subselection on this data. We want to show only people who live in :kbd:`street_id` number :kbd:`1`."
msgstr ""

#: ../../postgres/queries.rst:222
# 93421f803af9401c9f9a75848d80c217
msgid "This is a contrived example and in the above situations it may have been overkill. However when you have to filter based on a selection, subselects are really useful!"
msgstr ""

#: ../../postgres/queries.rst:227
# b1aaff0db86e42f5822172ec5567334e
msgid "Aggregate Queries"
msgstr ""

#: ../../postgres/queries.rst:229
# e0aaaf65a65c4080a3a1720a32193b2f
msgid "One of the powerful features of a database is its ability to summarise the data in its tables. These summaries are called aggregate queries. Here is a typical example:"
msgstr ""

#: ../../postgres/queries.rst:246
# 32520ba6697e41f09bc2b7dcc4fe5dad
msgid "If we want the counts summarised by street name we can do this:"
msgstr ""

#: ../../postgres/queries.rst:265
# 23c7b02f0303480a875e384fe1aa9c9e
msgid "Because there is no :kbd:`ORDER BY` clause, on your computer these data may not be in the same order as shown here."
msgstr ""

#: ../../postgres/queries.rst:268
# e6e0291fa5474554a6a4ab1bad2da9f1
msgid "Exercise:"
msgstr ""

#: ../../postgres/queries.rst:270
# 5a06c654a73d490a9ef2816304926207
msgid "Summarise the people by street name and show the actual street names instead of the street_id's"
msgstr ""

#: ../../postgres/queries.rst:309
# 906477fbd0ef46a094456d5b31e8ab56
msgid "You will notice that we have prefixed field names with table names (e.g. people.name and streets.name). This needs to be done whenever the field name is ambiguous."
msgstr ""

#: ../../postgres/queries.rst:316
# 3ab2e9c1652e4e03ad93b25f5da67893
msgid "You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it."
msgstr ""

#: ../../postgres/queries.rst:322
# a31f00e8f1d144ceade5570459b1c0d6
msgid "Next you'll see how to create views from the queries that you've written."
msgstr ""

#: ../../postgres/rules.rst:2
# 5a3e29ebf3fe479fa9498fc028f9517f
msgid "|LS| Rules"
msgstr ""

#: ../../postgres/rules.rst:4
# 3e6fc57110cf44a8a69568d034c38c81
msgid "Rules allow the \"query tree\" of an incoming query to be rewritten. One common usage is to implement views, including updatable view. *- Wikipedia*"
msgstr ""

#: ../../postgres/rules.rst:7
# ab2046c4671f46afa2c0c648cd18c02f
msgid "**The goal for this lesson:** To learn how to create new rules for the database."
msgstr ""

#: ../../postgres/rules.rst:11
# eebfb16795ff444eaa5d655221daf14a
msgid "Materialised Views (Rule based views)"
msgstr ""

#: ../../postgres/rules.rst:13
# 7f9483c9a6d143dc897b42dd0e0950ee
msgid "Say you want to log every change of phone_no in your people table in to a people_log table. So you set up a new table"
msgstr ""

#: ../../postgres/rules.rst:20
# 8e67923d50544a0ea0dd9702978ffc40
msgid "In the next step create a rule, that logs every change of a phone_no in the people table into the people_log table:"
msgstr ""

#: ../../postgres/rules.rst:29
# 1a93cdec3e1d4cab8cfddc6d9a96f4be
msgid "To test that the rule works, let's modify a phone number:"
msgstr ""

#: ../../postgres/rules.rst:35
# eeb1c3134dfa415b80eeb7817d8f39c2
msgid "Check that the table was updated correctly:"
msgstr ""

#: ../../postgres/rules.rst:44
# 5cd7fe7ec3e64ddb80964af2a5d3bd20
msgid "Now, thanks to the rule we created, the :kbd:`people_log` table will look like this:"
msgstr ""

#: ../../postgres/rules.rst:54
# 92efbfc722164a348eba02c748abc553
msgid "The value of the :kbd:`time` field will depend on the current date and time."
msgstr ""

#: ../../postgres/rules.rst:60
# 4d6ca130723d40768988fe0df5283f9a
msgid "Rules allow you to automatically add or change data in your database to reflect changes in other parts of the database."
msgstr ""

#: ../../postgres/rules.rst:66
# 983e0e14e6c54cd8a08cb5ff9712c6ab
msgid "The next module will introduce you to PostGIS, which takes these database concepts and applies them to GIS data."
msgstr ""

#: ../../postgres/views.rst:2
# 16bf9093b5ea4586b1cfedce8cf5243a
msgid "|LS| Views"
msgstr ""

#: ../../postgres/views.rst:4
# 9f91ef18c1134dbabcc69b7d96738abb
msgid "When you write a query, you need to spend a lot of time and effort formulating it. With views, you can save the definition of a sql query in a reusable 'virtual table'."
msgstr ""

#: ../../postgres/views.rst:8
# 312842e9ad66412fbabb4a4b0b5403ca
msgid "**The goal for this lesson:** To save a query as a view."
msgstr ""

#: ../../postgres/views.rst:11
# 633e6318a88045a1a0a483307aa2724c
msgid "Creating a View"
msgstr ""

#: ../../postgres/views.rst:13
# 6053b3332bf54015a725cd8d472f0aaa
msgid "You can treat a view just like a table, but its data is sourced from a query. Let's make a simple view based on the above."
msgstr ""

#: ../../postgres/views.rst:23
# 623ad89e4d204fae807876691e769136
msgid "As you can see the only change is the :kbd:`create view roads_count_v as` part at the beginning. The nice thing is that we can now select data from that view:"
msgstr ""

#: ../../postgres/views.rst:42
# 914031c226814c25956f8593c9a25b86
msgid "Modifying a View"
msgstr ""

#: ../../postgres/views.rst:44
# eef1c2f7706a450db248875ad5823155
msgid "A view is not fixed, and it contains no 'real data'. This means you can easily change it without impacting on any data in your database."
msgstr ""

#: ../../postgres/views.rst:55
# d74d9de3de694c83a56020d5ad70d4df
msgid "(This example also shows the best practice convention of using UPPER CASE for all SQL keywords.)"
msgstr ""

#: ../../postgres/views.rst:58
# c597beaea8174975b10ba500f5c731fc
msgid "You will see that we have added an :kbd:`ORDER BY` clause so that our view rows are nicely sorted:"
msgstr ""

#: ../../postgres/views.rst:71
# 3100fb086b214f6ea1f8c6d8390625d4
msgid "Dropping a View"
msgstr ""

#: ../../postgres/views.rst:73
# 013b043abf7f45129fbf1964ee098529
msgid "If you no longer need a view, you can delete it like this:"
msgstr ""

#: ../../postgres/views.rst:82
# 12ee04e03b754ab9a64f924213a0ce25
msgid "Using views, you can save a query and access its results as if it were a table."
msgstr ""

#: ../../postgres/views.rst:87
# e9b38bf0bc264b049391d5ef1f48d16e
msgid "Sometimes, when changing data, you want your changes to have effects elsewhere in the database. The next lesson will show you how to do this."
msgstr ""

