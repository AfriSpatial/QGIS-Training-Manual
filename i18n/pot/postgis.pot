# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-21 18:50\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\postgis\geometry.rst:2
# cd32e0772d5d456ea9226a9c9db033c0
msgid "|LS| Geometry Construction"
msgstr ""

#: ..\..\postgis\geometry.rst:4
# ff29c77993b54dacbf20beb46cc6cb8a
msgid "In this section we are going to delve a little deeper into how simple geometries are constructed in SQL. In reality, you will probably use a GIS like QGIS to create complex geometries using their digitising tools; however, understanding how they are formulated can be handy for writing queries and understanding how the database is assembled."
msgstr ""

#: ..\..\postgis\geometry.rst:10
# c0f1cb8d75df4a38adb93688af9a4e75
msgid "**The goal of this lesson:** To better understand how to create spatial entities directly in PostgreSQL/PostGIS."
msgstr ""

#: ..\..\postgis\geometry.rst:16
# 2e4397e0f5924457a03e9621d603a5ff
msgid "Creating Linestrings"
msgstr ""

#: ..\..\postgis\geometry.rst:18
# 4b5ecbd1ed6e4c008978d24b7f76cc23
msgid "Before we start, let's get our streets table matching the others; i.e., having a constraint on the geometry, an index and an entry in the geometry_columns table."
msgstr ""

#: ..\..\postgis\geometry.rst:22
# e483f9644f0140128e0da823cf643d3f
msgid "Exercise:"
msgstr ""

#: ..\..\postgis\geometry.rst:24
# ef2d54b9a1384037a41643f82b9db801
msgid "Modify the streets table so that it has a geometry column of type ST_LineString."
msgstr ""

#: ..\..\postgis\geometry.rst:26
# f9e18f645ae44fa6ac8673027f909f8c
msgid "Don't forget to do the accompanying update to the geometry columns table!"
msgstr ""

#: ..\..\postgis\geometry.rst:28
# 202e19c3c1274f90b04494ea612f9b56
msgid "Also add a constraint to prevent any geometries being added that are not LINESTRINGS or null."
msgstr ""

#: ..\..\postgis\geometry.rst:30
# 516cbc15084e41bca46fdd1521278174
msgid "Create a spatial index on the new geometry column"
msgstr ""

#: ..\..\postgis\geometry.rst:57
# affc7bc4ec544d9fbec81959378f776f
msgid ":ref:`Check your results <geometry-1>`"
msgstr ""

#: ..\..\postgis\geometry.rst:59
# e09b7a9c154e4e8d815630bd6b716bb2
msgid "Now let's insert a linestring into our streets table. In this case I am going to update an existing street record:"
msgstr ""

#: ..\..\postgis\geometry.rst:67
# fdac1a4859114070a4e5abe8e7124810
msgid "Take a look at the results in QGIS. (You may need to right-click on the streets layer in the 'Layers' panel, and choose 'Zoom to layer extent'.)"
msgstr ""

#: ..\..\postgis\geometry.rst:70
# 4998347983ee46129fc083e6ba33bce7
msgid "Now create some more streets entries - some in QGIS and some from the command line."
msgstr ""

#: ..\..\postgis\geometry.rst:75
# e0ee5d05193a463f9aafe380bd7f226b
msgid "Creating Polygons"
msgstr ""

#: ..\..\postgis\geometry.rst:77
# 047600dbfac3455c847d656fa523d751
msgid "Creating polygons is just as easy. One thing to remember is that by definition, polygons have at least four vertices, with the last and first being co-located."
msgstr ""

#: ..\..\postgis\geometry.rst:85
# af97ac4c42a94fe6b46bd6cbfd0b540a
msgid "A polygon requires double brackets around its coordinate list; this is to allow you to add complex polygons with multiple unconnected areas. For instance:"
msgstr ""

#: ..\..\postgis\geometry.rst:95
# 7b8bf13be14145aab072584ad6a029b6
msgid "If you followed this step, you can check what it did by loading the cities dataset into QGIS, opening its attribute table, and selecting the new entry. Note how the two new polygons behave like one polygon."
msgstr ""

#: ..\..\postgis\geometry.rst:103
# d89543f1e64e43b1a3ad5f0752225130
msgid "Exercise: Linking Cities to People"
msgstr ""

#: ..\..\postgis\geometry.rst:105
# 0ba20a363e08452faed1938b194a6bc7
msgid "For this exercise you should do the following:"
msgstr ""

#: ..\..\postgis\geometry.rst:107
# e82240f2f56c40f2bb6cb50a847732a1
msgid "Delete all data from your people table. Add a foreign key column to people that references the primary key of the cities table. Use QGIS to capture some cities. Use SQL to insert some new people records, ensuring that each has an associated street and city."
msgstr ""

#: ..\..\postgis\geometry.rst:114
# b80271cd70cf4dfc9308398b084285a1
msgid "Your updated people schema should look something like this:"
msgstr ""

#: ..\..\postgis\geometry.rst:171
# 8b447ab4223e4deea412dd89c5524872
msgid ":ref:`Check your results <geometry-2>`"
msgstr ""

#: ..\..\postgis\geometry.rst:175
# 94b6c5c8579745cfb31fcce41f59d257
msgid "Looking at our schema"
msgstr ""

#: ..\..\postgis\geometry.rst:177
# 776b16f2b0aa4da98e40065a30f79440
msgid "By now our schema should be looking like this:"
msgstr ""

#: ..\..\postgis\geometry.rst:196
# 3715a1cdb6ba40ce89f3e6776a3393e0
msgid "Access Subobjects"
msgstr ""

#: ..\..\postgis\geometry.rst:198
# 05b18e3f44f14bd29cf1d73b30d2e42f
msgid "With the SFS-Model functions, you have a wide variety of options to access subobjects of SFS Geometries. When you want to select the first vertex point of every polygon geometry in the table myPolygonTable, you have to do this in this way:"
msgstr ""

#: ..\..\postgis\geometry.rst:203
# bcf6b594f6cf4eb7b1a7e1c3b6663062
msgid "Transform the polygon boundary to a linestring:"
msgstr ""

#: ..\..\postgis\geometry.rst:209
# d8b66572e2c049b484ea0c33dbc9ef0a
msgid "select the first vertex point of the resultant linestring:"
msgstr ""

#: ..\..\postgis\geometry.rst:219
# 7de265e9fa0444dd8d40a897810fd105
msgid "Data Processing"
msgstr ""

#: ..\..\postgis\geometry.rst:221
# bb1130ee4a91421494c7f805e9d88050
msgid "PostGIS supports all OGC SFS/MM standard conform functions. All these functions start with ``ST_``."
msgstr ""

#: ..\..\postgis\geometry.rst:225
# 4a808c1c9db846378364b383596f3d8e
msgid "Clipping"
msgstr ""

#: ..\..\postgis\geometry.rst:227
# 71ce80e9057c4e278bab078beee55dab
msgid "To clip a subpart of your data you can use the :kbd:`ST_INTERSECT()` function. To avoid empty geometries, use:"
msgstr ""

#: ..\..\postgis\geometry.rst:248
# cde7008a1156448f81f4b1d2d614049c
msgid "Building Geometries from Other Geometries"
msgstr ""

#: ..\..\postgis\geometry.rst:250
# 9654b49cc1454da3917a7a394cf3f2bf
msgid "From a given point table, you want to generate a linestring. The order of the points is defined by their :kbd:`id`. Another ordering method could be a timestamp, such as the one you get when you capture waypoints with a GPS receiver."
msgstr ""

#: ..\..\postgis\geometry.rst:258
# 4a052f6f63e44877b480fed87b53f98c
msgid "To create a linestring from a new point layer called 'points', you can run the following command:"
msgstr ""

#: ..\..\postgis\geometry.rst:270
# 6415168f486f4a0c97138d637df12583
msgid "To see how it works without creating a new layer, you could also run this command on the 'people' layer, although of course it would make little real-world sense to do this."
msgstr ""

#: ..\..\postgis\geometry.rst:278
# eb9fb8fc3f604cfb92c3d7aa218675a8
msgid "Geometry Cleaning"
msgstr ""

#: ..\..\postgis\geometry.rst:280
# 6626b1f33fe545068b35921de31f935d
msgid "You can get more information for this topic in `this blog entry <http://linfiniti.com/?s=cleangeometry>`_."
msgstr ""

#: ..\..\postgis\geometry.rst:284
# 867878b2892e4769899ce8d964e021a1
msgid "Differences between tables"
msgstr ""

#: ..\..\postgis\geometry.rst:286
# c1f8b4c9ff7e4401ab1666aedf985743
msgid "To detect the difference between two tables with the same structure, you can use the PostgreSQL keyword :kbd:`EXCEPT`."
msgstr ""

#: ..\..\postgis\geometry.rst:295
# b3e561920ccd48fd8e3e8f3ab5e8a828
msgid "As the result, you will get all records from table_a which are not stored in table_b."
msgstr ""

#: ..\..\postgis\geometry.rst:299
# 21fe9bd00e2648a0995781915039eb8b
msgid "Tablespaces"
msgstr ""

#: ..\..\postgis\geometry.rst:301
# 57ecc0a46f84453fb0787acc7c0807e2
msgid "You can define where postgres should store its data on disk by creating tablespaces."
msgstr ""

#: ..\..\postgis\geometry.rst:308
# fe0be7c9cf1f4e93afb81921e7e422d4
msgid "When you create a database, you can then specify which tablespace to use e.g.:"
msgstr ""

#: ..\..\postgis\geometry.rst:315
#: ..\..\postgis\import_export.rst:91
#: ..\..\postgis\simple_feature_model.rst:251
#: ..\..\postgis\spatial_functions.rst:243
#: ..\..\postgis\spatial_queries.rst:392
# 3a9d4b77010d410db4e4e2938a4c61ad
# 06d36879eab8494b9f9adcf060c6a029
# 535df6a606334a24aacbff6ffb8a58a5
# c27d16a74d734db58df439667e3a74d3
# 987fef59a2b741a39104bb12bc6911f4
msgid "|IC|"
msgstr ""

#: ..\..\postgis\geometry.rst:317
# cab5be6c610a4eb9862554971ef60088
msgid "You've learned how to create more complex geometries using PostGIS statements. Keep in mind that this is mostly to improve your tacit knowledge when working with geo-enabled databases through a GIS frontend. You usually won't need to actually enter these statements manually, but having a general idea of their structure will help you when using a GIS, especially if you encounter errors that would otherwise seem cryptic."
msgstr ""

#: ..\..\postgis\import_export.rst:2
# a6c23e61f56a4e28a147cdee781cf714
msgid "|LS| Import and Export"
msgstr ""

#: ..\..\postgis\import_export.rst:4
# f40a82631cc74d66881f49251140809b
msgid "Of course, a database with no easy way to migrate data into it and out of it would be no fun. Even more so for spatial data! Fortunately, there are a number of tools that will let you easily move data into and out of PostGIS."
msgstr ""

#: ..\..\postgis\import_export.rst:9
# affd1f4b4eda44e38f030633a5134198
msgid "shp2pgsql"
msgstr ""

#: ..\..\postgis\import_export.rst:11
# 35cd0ce367954905b78d8c24ea65fda4
msgid "shp2pgsql is a commandline tool to import ESRI shapefiles to the database. Under Unix, you can use the following command for importing a new PostGIS table:"
msgstr ""

#: ..\..\postgis\import_export.rst:20
# 7bd06e290fbd481586559471a1a0e959
msgid "Under Windows, you have to perform the import process in two steps:"
msgstr ""

#: ..\..\postgis\import_export.rst:27
# 1d54d1aae0004227b9fab01f887cd02c
msgid "You may encounter this error:"
msgstr ""

#: ..\..\postgis\import_export.rst:34
# 9066a34243e44235a0276141647d3f9a
msgid "This is a known issue regarding the creation *in situ* of a spatial index for the data you're importing. To avoid the error, exclude the :kbd:`-I` parameter. This will mean that no spatial index is being created directly, and you'll need to create it in the database after the data have been imported. (The creation of a spatial index will be covered in the next lesson.)"
msgstr ""

#: ..\..\postgis\import_export.rst:41
# 186830d9e9024cf1b1cc55fcb2fbc5ea
msgid "pgsql2shp"
msgstr ""

#: ..\..\postgis\import_export.rst:43
# 684727628ef64d388c0a45060697017a
msgid "pgsql2shp is a commandline tool to export PostGIS Tables, Views or SQL select queries. To do this under Unix:"
msgstr ""

#: ..\..\postgis\import_export.rst:51
# 25b1115e75be49afa982a584a53fbd28
msgid "To export the data using a query:"
msgstr ""

#: ..\..\postgis\import_export.rst:59
# 9896edfa777047cd8d18806880bfb66b
msgid "ogr2ogr"
msgstr ""

#: ..\..\postgis\import_export.rst:61
# c8df3f68eaff4010a5283aa58d22d6af
msgid "ogr2ogr is a very powerful tool to convert data into and from postgis to many data formats. ogr2ogr is part of the GDAL/OGR Software and has to be installed separately. To export a table from PostGIS to GML, you can use this command:"
msgstr ""

#: ..\..\postgis\import_export.rst:71
# 57b2722f4a294b6e81ebf5949ed1617b
msgid "SPIT"
msgstr ""

#: ..\..\postgis\import_export.rst:73
# 74da1a957d384145a5e1de3b667fd351
msgid "SPIT is a QGIS plugin which is delivered with QGIS. You can use SPIT for uploading ESRI shapefiles to PostGIS."
msgstr ""

#: ..\..\postgis\import_export.rst:76
# bb3aee5af2c649039461db23019719bb
msgid "Once you've added the SPIT plugin via the :guilabel:`Plugin Manager`, look for this button:"
msgstr ""

#: ..\..\postgis\import_export.rst:82
# aaabc18d751f44e7b360ac3810efc65d
msgid "Clicking on it will give you the SPIT dialog:"
msgstr ""

#: ..\..\postgis\import_export.rst:87
# cfc6cc12e76e43f49e1bcfd875533bd0
msgid "You can add shapefiles to the database by clicking the :guilabel:`Add` button, which will give you a file browser window."
msgstr ""

#: ..\..\postgis\import_export.rst:93
# a9b5ec9c8d2d4fa09cd7fc40a9b7225b
msgid "Importing and exporting data to and from the database can be done in many various ways. Especially when using disparate data sources, you will probably use these functions (or others like them) on a regular basis."
msgstr ""

#: ..\..\postgis\import_export.rst:98
#: ..\..\postgis\simple_feature_model.rst:257
#: ..\..\postgis\spatial_functions.rst:249
#: ..\..\postgis\spatial_queries.rst:398
# 2027f3b21e2144ada355f66f1bf5879f
# 9d4e93edffc044ddacefd513d165f0d6
# 100f49558026479291dc551fe0480383
# 3da33f51aca94e6fa8434a9a2797d157
msgid "|WN|"
msgstr ""

#: ..\..\postgis\import_export.rst:100
# 752eadd1c55c49d2863955c0d6756f2c
msgid "Next we'll look at how to query the data we've created before."
msgstr ""

#: ..\..\postgis\index.rst:3
# 3cd3bea58cf448bab21952895b446f91
msgid "|MOD| PostGIS"
msgstr ""

#: ..\..\postgis\index.rst:5
# e6bed512f6974479becac8c5f48bcd9f
msgid "PostGIS is an extension to PostgreSQL which allows it to handle and process geographic data. In this module, we'll learn how to set up and use the geographic functions that PostGIS offers."
msgstr ""

#: ..\..\postgis\index.rst:9
# f31da370e00e417f827d5d2c61fd92f5
msgid "While working through this section, you may want to keep a copy of the `PostGIS cheat sheet <../_static/postgis/postgis_cheatsheet.pdf>`_ available at `Boston GIS user group <http://www.bostongis.com/postgis_quickguide.bqg>`_. Another good friend is the `online <http://postgis.refractions.net/documentation/manual-1.5/>`_ PostGIS documentation."
msgstr ""

#: ..\..\postgis\index.rst:16
# 7a1502c513d64d7ab8b63ac566943619
msgid "See also `PostGIS online <http://postgisonline.org/>`_."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:2
# 230c24ba113c447e8b1499948a3043ed
msgid "|LS| Simple Feature Model"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:4
# 34f965a9356449b7832547ca2d9809ec
msgid "How can we store and represent geographic features in a database? In this lesson we'll cover one approach, the Simple Feature Model as defined by the OGC."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:8
# e61b21b87c434287ba1d115715613f9b
msgid "**The goal for this lesson:** To learn what the SFS Model is and how to use it."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:11
# 6b7c69865bf84d94b8749c95e09027a4
msgid "What is OGC"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:13
# e6072f665960469cb85c7371a8dbcb09
msgid "The Open Geospatial Consortium (OGC), an international voluntary consensus standards organization, originated in 1994. In the OGC, more than 370+ commercial, governmental, nonprofit and research organizations worldwide collaborate in an open consensus process encouraging development and implementation of standards for geospatial content and services, GIS data processing and data sharing. *- Wikipedia*"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:21
# b5a56f084c0741efa3cb2a8b809b5085
msgid "What is the SFS Model"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:23
# 69b4ad77d1ca451594d04bfcb78cf329
msgid "The Simple Feature for SQL (SFS) Model is a *non-topological* way to store geospatial data in a database and defines functions for accessing, operating, and constructing these data."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:30
# be109fea95e6457e907d9bf7d5d7e54a
msgid "The model defines geospatial data from Point, Linestring, and Polygon types (and aggregations of them to Multi objects)."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:33
# c4a5d7aa8cbe4ce48b388f4c427497ca
msgid "For further information, have a look at the `OGC Simple Feature for SQL <http://www.opengeospatial.org/standards/sfs>`_ standard."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:37
# 28d94b118bde4ff9bca061e833b2639e
msgid "Add a geometry field to table"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:39
# c58bafa12265467b8ea06b38a9f0974e
msgid "Let's add a point field to our people table:"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:49
# 7433efc98eda4ee6ac47e5474279cc68
msgid "Add a constraint based on geometry type"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:51
# 056e9afab51c40b2ac9d17ef0ae0bdff
msgid "You will notice that the geometry field type does not implicitly specify what *type* of geometry for the field - for that we need a constraint."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:60
# 74af09ab68ab4fd7868067d9b8072508
msgid "What does that do? It adds a constraint to the table that prevents anything except a point geometry or a null."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:63
# 742d8b89628a4e59b62c970d249301c0
msgid "Now you try:"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:65
# 54f15ac45cb04f3dac63629009ba9c37
msgid "Create a new table called cities and give it some appropriate columns, including a geometry field for storing polygons (the city boundaries). Make sure it has a constraint enforcing geometries to be polygons."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:98
# 734ef4b200d84e90a63523d74d6d656a
msgid ":ref:`Check your results <simple-feature-1>`"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:104
# fc0506a1e0414b6288d7b701eabeb672
msgid "Populate geometry_columns table"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:106
# 34d3a5618f704f16bdb030a0f9632a25
msgid "At this point you should also add an entry into the :kbd:`geometry_columns` table:"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:114
# 685f00c7f4ea49f19fe948b55ef37984
msgid "Why? :kbd:`geometry_columns` is used by certain applications to be aware of which tables in the database contain geometry data."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:117
# 1c3ce73ae3a9492091f4cbc0f0104d3e
msgid "If the above :kbd:`INSERT` statement causes a complaint, run this query first:"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:124
# 998efc087a3b4125a369f63732d40fd5
msgid "If the column :kbd:`f_table_name` contains the value :kbd:`people`, then this table has already been registered and you don't need to do anything more."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:128
# 37e3f13ea00247bfaedb92d86e4df143
msgid "The value :kbd:`2` refers to the number of dimensions; in this case, two: **x** and **y**."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:131
# 73738f72972b4866bf9fb9148dcac741
msgid "The value :kbd:`4326` refers to the projection we are using; in this case, WGS 84, which is referred to by the number 4326 (refer to the earlier discussion about the EPSG)."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:135
# 1a117e5f70b742358177904dc76f90be
msgid "Add an appropriate geometry_columns entry for your new cities layer"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:156
# 2476d7635edb44ff8e98086d79e7c6ce
msgid ":ref:`Check your results <simple-feature-2>`"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:162
# 696a16009e5c462ab05496d90f9cc754
msgid "Add geometry record to table using SQL"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:164
# 1ed3dcd637f84c90ad0ea0590edb96a3
msgid "Now that our tables are geo-enabled, we can store geometries in them!"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:175
# ebc689a998764c38a5a19e71f93f311f
msgid "In the new entry above, you will need to specify which projection (SRID) you want to use. This is because you entered the geometry of the new point using a plain string of text, which does not automatically add the correct projection information. Obviously, the new point needs to use the same SRID as the dataset it is being added to, so you need to specify it."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:181
# 90defe2550aa43d3862c9db7e876a53b
msgid "If at this point you were using a graphical interface, for example, specifying the projection for each point would be automatic. In other words, you usually won't need to worry about using the correct projection for every point you want to add if you've already specified it for that dataset, as we did earlier."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:187
# 2d745a34e54f4333b38852b751217a74
msgid "Now is probably a good time to fire up QGIS and try to view your :kbd:`people` table. Also, we should try editing / adding / deleting records and then performing select queries in the database to see how the data has changed."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:191
# b30c74cdee6a4f3fad4b8f75887a0b12
msgid "To load a PostGIS layer in QGIS, use the :menuselection:`Layer --> Add PostGIS Layers` menu option or toolbar button:"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:197
# 9356999f4bc54c878f816138a56c02ed
msgid "This will open the dialog:"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:202
# 1b429b2e6f974b84806c56a0b0b8881a
msgid "Click on the :guilabel:`New` button to open this dialog:"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:207
# 728d81102bea4b7b90b56497b1156f9d
msgid "Then define a new connection, e.g.:"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:219
# c10645c3ae6f460fa043c5755f2c2fd6
msgid "To see whether QGIS has found the :kbd:`address` database and that your username and password are correct, click :guilabel:`Test Connect`. If it works, check the boxes next to :guilabel:`Save Username` and :guilabel:`Save Password`. Then click :guilabel:`OK` to create this connection."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:224
# 8eb19490d28740cf974159e673caa714
msgid "Back in the :guilabel:`Add PostGIS Layers` dialog, click :guilabel:`Connect` and add layers to your project as usual."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:227
# c0199e9111f94f9fa549c84c84931cb3
msgid "Formulate a query that shows a person's name, street name and position (from the the_geom column) as plain text."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:248
# 998c7511aa2f40b1866bd3ccff79868d
msgid ":ref:`Check your results <simple-feature-3>`"
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:253
# eba5102fdad44a07ab77d63989352bc2
msgid "You have seen how to add spatial objects to your database and view them in GIS software."
msgstr ""

#: ..\..\postgis\simple_feature_model.rst:259
# ac52c205009c458a844a2f0983896e6b
msgid "Next you'll see how to import data into, and export data from, your database."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:2
# 5552fe162c564b4885ad9b7e840c2c8c
msgid "|LS| PostGIS Setup"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:4
# 6668903a7f5d4b07aa8f0258f02223ab
msgid "Setting up PostGIS functions will allow you to access spatial functions from within PostgreSQL."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:7
# af1232f0bf0446f0a6a5e341d5e1c42f
msgid "**The goal for this lesson:** To install spatial functions and briefly demo their effects."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:11
# 71bf165971d940ada9bb80f76059a704
msgid "Installing under Ubuntu"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:13
# 9b2d9469e67d4dfabd908caae19cb691
msgid "Postgis is easily installed from apt."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:20
# 8da7bdde415b4f96b1f2fbce82aaa9ee
msgid "Really, it's that easy..."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:23
# 90cc4cb48f4847ce8963f979e737c157
msgid "Installing under Windows"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:25
# 13f47463850644929e1f6281c9775f43
msgid "Visit `the download page <http://www.postgresql.org/download/>`_."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:27
# 1698593aa461485d9881b82fe3211e72
msgid "Now follow `this guide <http://www.bostongis.com/PrinterFriendly.aspx?content_name=postgis_tut01>`_."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:30
# da6c0f8011414c5282560bbb6f10a3e4
msgid "A little more complicated, but still not hard. Note that you need to be online to install the postgis stack."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:34
# 347eaaf3d64243779963ebd6eb379e81
msgid "Install plpgsql"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:36
# 5c7d31bebb5645fd81aa314741bd52bb
msgid "You can ensure that any database created on your system automatically gets these spatial extensions by running these commands (from this and the next two sections) on the :kbd:`template1` system database *before* you create any of your own databases."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:41
# 31892ed9146e4e378f5d454f113798dd
msgid "PostgreSQL can use various procedural languages. What is a procedural language? It is an 'in database' language that can be used to extend the functionality of the database. For example you can write database functions that are called when events happen - such as when a record is inserted into the database. (Recall when this was done in the previous module.)"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:47
# 868b0871ec0840bfab556b2c5f0dce6d
msgid "PostGIS requires the PLPGSQL procedural language to be installed. So do this:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:55
# ae45466ef4e043f9b91dd11c1a966da6
msgid "Where the third argument is the name of the database that the procedural language should be installed into."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:58
# 40a5780e8a8c4f268bd37c04282e96a5
msgid "You will need administrative permissions for your database to be able to do this."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:62
# a52329d259a843788f359554faae98c5
msgid "Install postgis.sql"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:64
# 358b9b5992a548238ed315f63aa38ea9
msgid "PostGIS can be thought of as a collection of in database functions that extend the core capabilities of PostgreSQL so that it can deal with spatial data. By 'deal with', we mean store, retrieve, query and manipulate. In order to do this, a number of functions are installed into the database. Do this:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:73
# 7884ad7ce42e423ab1181e81ec8fa839
msgid "or"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:79
# 1dc92c5485e84e3f81c3e45d3d79350a
msgid "depending on which PostGIS version you have installed. Now do:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:85
# 375a75c8db4c46f9ba813f2a942c472a
msgid "and, once you're in the psql prompt:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:91
# 1ce8c569d5104586aa60d8807f07e383
msgid "We will discuss these functions in more detail as we proceed with this course."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:94
# d4acb4e5cfab43309712b081f243af24
msgid "Install spatial_refsys.sql"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:96
# e75712cb24e7472f8d062559e7da7009
msgid "In addition to the PostGIS functions, a second helper SQL script needs to be run that will load the database with a collection of spatial reference system (SRS) definitions as defined by the European Petroleum Survey Group (EPSG). These are used during operations such as coordinate reference system (CRS) conversions."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:102
# 1b4b69c4579443c1b83e8594577011b0
msgid "You can add more to the SRS list later if needed, but the list provided should cover just about every SRS you will need (Google Mercator and lo are notable exceptions)."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:106
# 0f25bb7f19a3488e87a68d9ec4a2dedf
msgid "To load the SRS table, first ensure that you're at a normal prompt (i.e., quit the database first with :kbd:`\\q`), then do this:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:113
# 5f4faf7fddd1409dbf8b41e06a6e9a48
msgid "replacing :kbd:`1.5` with :kbd:`2.0` if necessary."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:115
# d2b652efc06a4ef08d38f48e9a0450a2
msgid "The above command adds a table to our database. We can see the schema of this table by entering the following command in the psql prompt:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:122
# a6166daa9abd43a6bfa8b6dbf87b5c17
msgid "The result should be this:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:137
# afab78a3a75645e2be61435b1d24e522
msgid "You can use standard SQL queries (as we have learned from our introductory sections), to view and manipulate this table - though we suggest you do not update or delete any records unless you know what you are doing."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:141
# 28996929f74149afbe28df31cff659bd
msgid "One SRID you may be interested in is EPSG:4326 - the geographic / lat lon reference system using the WGS 84 ellipsoid. Let's take a look at it:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:148
# 0e59becb2ac14fd3862f26e198dc2fa6
msgid "Result"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:162
# 307261241b124975ba6d1576e5437811
msgid "The srtext is the projection definition in well known text (you may recognise this from .prj files in your shapefile collection)."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:166
# 740dd480a5b14ef4ad73b7e3913a90eb
msgid "Looking at the installed PostGIS functions"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:168
# f46e8b2441a14081a8751bc53583e44d
msgid "Good - our PostgreSQL database is now geospatially enabled, thanks to PostGIS. We are going to delve a lot deeper into this in the coming days, but let's give you a quick little taster. Let's say we want to create a point from text. First we use the psql command to find functions relating to point:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:177
# 59b180840fea4bc991b1ac766c715c5f
msgid "Here is one that caught my eye: :kbd:`st_pointfromtext`"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:179
# e5f0066e55264393b90b714f050322fd
msgid "So let's give that a try:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:185
#: ..\..\postgis\spatial_functions.rst:219
#: ..\..\postgis\spatial_queries.rst:25
#: ..\..\postgis\spatial_queries.rst:58
#: ..\..\postgis\spatial_queries.rst:179
#: ..\..\postgis\spatial_queries.rst:219
#: ..\..\postgis\spatial_queries.rst:320
# 8de0185339744c73b6e5913548535c5a
# f236dc442f7c48c5920067ec3e4f095e
# ae58943fa268438b915a3707a7afa654
# 53e6e2c34eeb4690b8b48e565fa08e93
# e0d6a8cfd6744c818bb0c826fd0af297
# 3b198f247f714618a1744b3f75419a71
# 20eb2efe91e240fe9949f1c6e48fd221
msgid "Result:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:194
# 8397e86a38af4e28b20718578d57779e
msgid "So there are a couple of interesting things going on here:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:196
# c54a04b665ea4485a8780913209533ac
msgid "we defined a point at position 1,1 (EPSG:4326 is assumed) using :kbd:`POINT(1 1)`"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:198
# deaf44394f1b443e8e3ff4db120f2170
msgid "we ran an sql statement, but not on any table, just on data entered from the SQL prompt"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:200
# 6d8d7b860c684f1e9bda2a2b59e17fa0
msgid "the resulting row looks kinda strange"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:202
# a2844f5f603d4136af1fb2adc3b26fbc
msgid "The resulting row is looking strange because its in the OGC format called 'Well Known Binary' (WKB) - more on that coming in the next section."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:205
# de8c66da9aed4450acb8d6e88c2813c0
msgid "To get the results back as text, I do a quick scan through the function list for something that returns text:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:212
# 4e007a17a50541d89a72df1f81c33bfc
msgid "One that catches my eye is :kbd:`st_astext`. Let's combine it with the previous query:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:228
# 1eb510f707d641b7ac893326029db9f1
msgid "So what's happened here? We entered the string :kbd:`POINT(1,1)`, turned it into a point using :kbd:`st_pointfromtext()`, and turned it back into a human-readable form with :kbd:`st_astext()`, which gave us back our original string."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:233
# c8c819cc1c3c4b0a9138720f09313838
msgid "One last example before we really get into the detail of using PostGIS:"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:239
# d8277616ac1b405cbce2c5774590cff7
msgid "What did that do? It created a buffer of 1 degree around our point, and returned it as text. Nifty hey?"
msgstr ""

#: ..\..\postgis\spatial_functions.rst:245
# 6a205b716b6541a1b4ef0f0bfe6a52b0
msgid "You now have PostGIS functions installed in your copy of PostgreSQL. With this you'll be able to make use of PostGIS' extensive spatial functions."
msgstr ""

#: ..\..\postgis\spatial_functions.rst:251
# 748514618d94436c84bebc6c7ea5ea48
msgid "Next you'll learn how spatial features are represented in a database."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:2
# 942036e288ac403b96a6638a90ec6a59
msgid "|LS| Spatial Queries"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:4
# a7f3b7e20afb4fb0af74219fde12b146
msgid "Spatial queries are no different from other database queries. You can use the geometry column like any other database column. With the installation of PostGIS in our database, we have additional functions to query our database."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:8
# d9b8df35135c4d4f997961f92cf168db
msgid "**The goal for this lesson:** To see how spatial functions are implemented similarly to \"normal\" non-spatial functions."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:14
# aa8dcdaa90b0435e8caa48e925a3062e
msgid "Spatial Operators"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:16
# 2eaedce657174251957d3eff7675a4c2
msgid "When you want to know which points are within a distance of 2 degrees to a point(X,Y) you can do this with:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:34
# 336cfbf09df342189aa5c1cc39d9b6f9
msgid "the_geom value above was truncated for space on this page. If you want to see the point in human-readable coordinates, try something similar to what you did in the section \"View a point as WKT\", above."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:38
# 02fa135943d14ac58a6726b7a3d619d1
msgid "How do we know that the query above returns all the points within 2 *degrees*? Why not 2 *meters*? Or any other unit, for that matter?"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:41
# aec456e6acb94da1bfe48b054a38501f
msgid ":ref:`Check your results <spatial-queries-1>`"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:46
# 457919560c6b4ced8e21580ac5fc4ea8
msgid "Spatial Indexes"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:48
# 1253bb8fbdfd452ea95094ba56fd4e13
msgid "We also can define spatial indexes. A spatial index makes your spatial queries much faster. To create a spatial index on the geometry column use:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:85
# 20d915fbef9145da9ad4bffc8f39cf0f
msgid "Now you try - modify the cities table so its geometry column is spatially indexed."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:115
# 7a72493d36ac456682c3cdbc56bdbb8b
msgid ":ref:`Check your results <spatial-queries-2>`"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:119
# 624209b603b84e5a9ef12bb5f10b63ff
msgid "PostGIS Spatial Functions Demo"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:121
# f2ef9fcc599a4fcc98eaabfe10a56bbc
msgid "In order to demo PostGIS spatial functions, we'll create a new database containing some (fictional) data."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:124
# 9d7c3adbdc2f4f84974543ed599563bd
msgid "To start, create a new database:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:130
# 9293761a8ca24c47a3c5be548cda5db8
msgid "Remember to install PLPGSQL:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:136
# 22bd9ab2077041dfb5237eda5606bc05
msgid "Then install the PostGIS functions and the spatial reference system. For example, on Linux with PostgreSQL 9.1 and PostGIS 1.5:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:144
# 08ecfc87120f470585f4aa4b210bc378
msgid "Next, import the data provided in the :kbd:`exercise_data/postgis/` directory. Refer back to the previous lesson for instructions. You can import from the terminal or via SPIT. Import the files into the following database tables:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:148
# cccb8826e24b43f2825eaa71419b1a28
msgid ":kbd:`points.shp` = :kbd:`building`"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:149
# db0dbf5296fa41d3a254895d1432c95a
msgid ":kbd:`lines.shp` = :kbd:`road`"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:150
# 7204b5d814df48f7ad9309e90e284880
msgid ":kbd:`polygons.shp` = :kbd:`region`"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:152
# c4e71040052a467bbc7a51b05f8877cc
msgid "Load these three database layers into QGIS via the :guilabel:`Add PostGIS Layers` dialog, as usual. When you open their attribute tables, you'll note that they have both an :kbd:`id` field and a :kbd:`gid` field created by the PostGIS import."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:157
# 2224cf99ae3a48df8a0630939df17aad
msgid "Now that the tables are imported, we can use PostGIS to query the data. Go back to your terminal (command line) and enter the psql prompt by doing:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:164
# 8fda76407f724fcfbf3aceb2a050426d
msgid "We'll demo some of these select statements by creating views from them, so that you can open them in QGIS and see the results."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:168
# 6844a96f43ab480c9d812a7a508061c4
msgid "Select by location"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:170
# 21bce3556ff946a3a6e7cb36185b3536
msgid "Get all the buildings in the KwaZulu region."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:192
# c64a01603866412994c5d5c4ae683344
msgid "Or, if we create a view from it:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:202
# 6810f650a79546a0a643d8723110da7d
msgid "And view it in QGIS:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:208
# 7d3e2f47321c47769807ccee441642c9
msgid "Select neighbors"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:210
# 9f487568df1c46acaf0099977276470d
msgid "Show a list of all the names of regions adjoining the Hokkaido region."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:230
# 7b2978ff01474fdca2d25a1bc8ffb87d
msgid "As a view:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:240
#: ..\..\postgis\spatial_queries.rst:285
# 099c3b096ed24fd88a86c7913a3bb905
# b31c971979524333958ad47fb26a30fb
msgid "In QGIS:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:245
# 8123e08eac45453eb33a5a88d188bf79
msgid "Note the missing region (Queensland). This may be due to a topology error. Artifacts such as this can alert us to potential problems in the data. To solve this enigma without getting caught up in the anomalies the data may have, we could use a buffer intersect instead:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:257
# b4b35fbef3f8423da49bf67dca1fa205
msgid "This creates a buffer of 100 meters around the region Hokkaido."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:259
# 26aa6cb1703546b2998cf48f5dccff29
msgid "The darker area is the buffer:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:264
# 535b92a7729d4c1d8f90bf61c89f51bc
msgid "Select using the buffer:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:279
# 39910a75c24e4bd99f788a066b599f3a
msgid "In this query, the original buffer view is used as any other table would be. It is given the alias :kbd:`a`, and its geometry field, :kbd:`a.the_geom`, is used to select any polygon in the :kbd:`region` table (alias :kbd:`b`) that intersects it. However, Hokkaido itself is excluded from this select statement, because we don't want it; we only want the regions adjoining it."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:290
# 7823a427c5034687a20756036d966c73
msgid "It is also possible to select all objects within a given distance, without the extra step of creating a buffer:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:302
# 5ac1bcd1229949ea9906123b62a6f121
msgid "This achieves the same result, without need for the interim buffer step:"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:309
# 20dbd280931340dea95e374e7aaf6bf6
msgid "Select uniques"
msgstr ""

#: ..\..\postgis\spatial_queries.rst:311
# 5891e6944917464a9ca6deb51f4c1a4f
msgid "Show a list of unique town names for all buildings in the Queensland region."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:333
# e345a94ed3d745489c5d8defa67446b4
msgid "Further examples ..."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:394
# 721f19efffd94f009223ea0a9e6388d4
msgid "You have seen how to query spatial objects using the new database functions from PostGIS."
msgstr ""

#: ..\..\postgis\spatial_queries.rst:400
# aedf39a404db4240a36f2797ac51f80a
msgid "Next we're going to investigate the structures of more complex geometries and how to create them using PostGIS."
msgstr ""

