# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-10-09 10:09\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../postgis/geometry.rst:2
# 6271dd04be054d569714e08ae7acf3d0
msgid "|LS| Geometry Construction"
msgstr ""

#: ../../postgis/geometry.rst:4
# 56c70ad7b8d34a5da09103a5b5613186
msgid "In this section we are going to delve a little deeper into how simple geometries are constructed in SQL. In reality, you will probably use a GIS like QGIS to create complex geometries using their digitising tools; however, understanding how they are formulated can be handy for writing queries and understanding how the database is assembled."
msgstr ""

#: ../../postgis/geometry.rst:10
# a0e298ec19354e3fb485574547bf9316
msgid "**The goal of this lesson:** To better understand how to create spatial entities directly in PostgreSQL/PostGIS."
msgstr ""

#: ../../postgis/geometry.rst:16
# 35916d8eeae943008353f0780638822e
msgid "Creating Linestrings"
msgstr ""

#: ../../postgis/geometry.rst:18
# ab007a8616754482b07d0ae97de5311f
msgid "Before we start, let's get our streets table matching the others; i.e., having a constraint on the geometry, an index and an entry in the geometry_columns table."
msgstr ""

#: ../../postgis/geometry.rst:22
# 5d0a30fd1e1748398991d53cd35e27f4
msgid "Exercise:"
msgstr ""

#: ../../postgis/geometry.rst:24
# 7ba409c44b3f482aa833f9b08e783948
msgid "Modify the streets table so that it has a geometry column of type ST_LineString."
msgstr ""

#: ../../postgis/geometry.rst:26
# 747ed6b4f72b427d949ae065b54fee34
msgid "Don't forget to do the accompanying update to the geometry columns table!"
msgstr ""

#: ../../postgis/geometry.rst:28
# fef16706060e4cf7b81d09b27ef81379
msgid "Also add a constraint to prevent any geometries being added that are not LINESTRINGS or null."
msgstr ""

#: ../../postgis/geometry.rst:30
# 020fe918cfdd4b3d819d5f3ec9f7b20a
msgid "Create a spatial index on the new geometry column"
msgstr ""

#: ../../postgis/geometry.rst:57
# b2d4ccc96415434096e09acbc903d40b
msgid ":ref:`Check your results <geometry-1>`"
msgstr ""

#: ../../postgis/geometry.rst:59
# a9530bde2b4947fabc7c21f18e9c819c
msgid "Now let's insert a linestring into our streets table. In this case I am going to update an existing street record:"
msgstr ""

#: ../../postgis/geometry.rst:67
# 77bd2c2cca054364ba2941ca0c81a1d3
msgid "Take a look at the results in QGIS. (You may need to right-click on the streets layer in the 'Layers' panel, and choose 'Zoom to layer extent'.)"
msgstr ""

#: ../../postgis/geometry.rst:70
# d588318ca5214911868e6f019315cc6c
msgid "Now create some more streets entries - some in QGIS and some from the command line."
msgstr ""

#: ../../postgis/geometry.rst:75
# 2564ad7ad3854661ba036057873057b8
msgid "Creating Polygons"
msgstr ""

#: ../../postgis/geometry.rst:77
# 20bd233686564026813c97c703b793d5
msgid "Creating polygons is just as easy. One thing to remember is that by definition, polygons have at least four vertices, with the last and first being co-located."
msgstr ""

#: ../../postgis/geometry.rst:85
# 00a74c995e8847ccbb8a0980fee606cc
msgid "A polygon requires double brackets around its coordinate list; this is to allow you to add complex polygons with multiple unconnected areas. For instance:"
msgstr ""

#: ../../postgis/geometry.rst:95
# b21e02fbec86417f9d68bbc77435389f
msgid "If you followed this step, you can check what it did by loading the cities dataset into QGIS, opening its attribute table, and selecting the new entry. Note how the two new polygons behave like one polygon."
msgstr ""

#: ../../postgis/geometry.rst:103
# 9825333d455f44f0b307814e8a8de280
msgid "Exercise: Linking Cities to People"
msgstr ""

#: ../../postgis/geometry.rst:105
# 004e2d19ccd143a791cc28dde83936fb
msgid "For this exercise you should do the following:"
msgstr ""

#: ../../postgis/geometry.rst:107
# 8ca43b94cc4749d6a6ae524b0c411208
msgid "Delete all data from your people table. Add a foreign key column to people that references the primary key of the cities table. Use QGIS to capture some cities. Use SQL to insert some new people records, ensuring that each has an associated street and city."
msgstr ""

#: ../../postgis/geometry.rst:114
# 2e8c487ddd1749138a529170191bea96
msgid "Your updated people schema should look something like this:"
msgstr ""

#: ../../postgis/geometry.rst:171
# 5af3dc2c080345419e10cad392d6ba54
msgid ":ref:`Check your results <geometry-2>`"
msgstr ""

#: ../../postgis/geometry.rst:175
# fc03a6e2baa549bbae1d1506c4338406
msgid "Looking at our schema"
msgstr ""

#: ../../postgis/geometry.rst:177
# 0ec1706da71842cd8ff0da6ee59d3727
msgid "By now our schema should be looking like this:"
msgstr ""

#: ../../postgis/geometry.rst:196
# eccfb1fc5daa49aeb65e93715b588a2c
msgid "Access Subobjects"
msgstr ""

#: ../../postgis/geometry.rst:198
# 9de11f3fb4394dcdbfc6a3042fdbedf5
msgid "With the SFS-Model functions, you have a wide variety of options to access subobjects of SFS Geometries. When you want to select the first vertex point of every polygon geometry in the table myPolygonTable, you have to do this in this way:"
msgstr ""

#: ../../postgis/geometry.rst:203
# ff43374e50a242089f347c3e62e857c3
msgid "Transform the polygon boundary to a linestring:"
msgstr ""

#: ../../postgis/geometry.rst:209
# 85e4c44cbb7c41358e5320cc8cb9af29
msgid "select the first vertex point of the resultant linestring:"
msgstr ""

#: ../../postgis/geometry.rst:219
# 3f34d778aca94ecf936fe682bd992618
msgid "Data Processing"
msgstr ""

#: ../../postgis/geometry.rst:221
# d1bcd818b98b48a992c5ce38b7fd1fce
msgid "PostGIS supports all OGC SFS/MM standard conform functions. All these functions start with ``ST_``."
msgstr ""

#: ../../postgis/geometry.rst:225
# fe6e7bd7d6d3460b9f8802108df92967
msgid "Clipping"
msgstr ""

#: ../../postgis/geometry.rst:227
# 736256e0c850492690d3596f38ab0a07
msgid "To clip a subpart of your data you can use the :kbd:`ST_INTERSECT()` function. To avoid empty geometries, use:"
msgstr ""

#: ../../postgis/geometry.rst:248
# 8b15fe27fe4e4563a22cd48c6287da12
msgid "Building Geometries from Other Geometries"
msgstr ""

#: ../../postgis/geometry.rst:250
# 5836f5c86dc34148ae39dc27adafb299
msgid "From a given point table, you want to generate a linestring. The order of the points is defined by their :kbd:`id`. Another ordering method could be a timestamp, such as the one you get when you capture waypoints with a GPS receiver."
msgstr ""

#: ../../postgis/geometry.rst:258
# 513beb69f27d4ac18809fe9f1b9d25f2
msgid "To create a linestring from a new point layer called 'points', you can run the following command:"
msgstr ""

#: ../../postgis/geometry.rst:270
# 9427f97855a44f9a83bbabfcd51ed5e1
msgid "To see how it works without creating a new layer, you could also run this command on the 'people' layer, although of course it would make little real-world sense to do this."
msgstr ""

#: ../../postgis/geometry.rst:278
# 2ca84ec56ce34a7cb686f43a695534c7
msgid "Geometry Cleaning"
msgstr ""

#: ../../postgis/geometry.rst:280
# 24b9f99aed7b4a11985615f1b4b68550
msgid "You can get more information for this topic in `this blog entry <http://linfiniti.com/?s=cleangeometry>`_."
msgstr ""

#: ../../postgis/geometry.rst:284
# a3c306a902f045bbb5ae4656feb0726b
msgid "Differences between tables"
msgstr ""

#: ../../postgis/geometry.rst:286
# ae68efd04ab749e4b3179581232bcada
msgid "To detect the difference between two tables with the same structure, you can use the PostgreSQL keyword :kbd:`EXCEPT`."
msgstr ""

#: ../../postgis/geometry.rst:295
# 600c6d29f5bd42c4b304c3a7a52737c2
msgid "As the result, you will get all records from table_a which are not stored in table_b."
msgstr ""

#: ../../postgis/geometry.rst:299
# 7c055668bee442dabfc84a7442ce084b
msgid "Tablespaces"
msgstr ""

#: ../../postgis/geometry.rst:301
# 58cf48b8cadc4d5781b1783f3a31bfbe
msgid "You can define where postgres should store its data on disk by creating tablespaces."
msgstr ""

#: ../../postgis/geometry.rst:308
# 6bc997355f8340abb60bb8b1aaf5ddc6
msgid "When you create a database, you can then specify which tablespace to use e.g.:"
msgstr ""

#: ../../postgis/geometry.rst:315
#: ../../postgis/import_export.rst:91
#: ../../postgis/simple_feature_model.rst:251
#: ../../postgis/spatial_functions.rst:243
#: ../../postgis/spatial_queries.rst:392
# e59362d57f17415fb118177af523697e
# 50e77bca2a3a438d866b6102de5200da
# b06c336cfc0341038edb52532b8505ea
# 2377aa8bedf249e0abab7ee0180558c7
# c4156528f51440499ca77f418b986264
msgid "|IC|"
msgstr ""

#: ../../postgis/geometry.rst:317
# 429d33ae2e014abf90854fcb1bd00cec
msgid "You've learned how to create more complex geometries using PostGIS statements. Keep in mind that this is mostly to improve your tacit knowledge when working with geo-enabled databases through a GIS frontend. You usually won't need to actually enter these statements manually, but having a general idea of their structure will help you when using a GIS, especially if you encounter errors that would otherwise seem cryptic."
msgstr ""

#: ../../postgis/import_export.rst:2
# b7cd2d25d8e244e39e7e0ba72972fc06
msgid "|LS| Import and Export"
msgstr ""

#: ../../postgis/import_export.rst:4
# d8eb2676b39b439fa8f73b66e7f57101
msgid "Of course, a database with no easy way to migrate data into it and out of it would be no fun. Even more so for spatial data! Fortunately, there are a number of tools that will let you easily move data into and out of PostGIS."
msgstr ""

#: ../../postgis/import_export.rst:9
# 1da3f4e9284b4171aa48045fd9c1b813
msgid "shp2pgsql"
msgstr ""

#: ../../postgis/import_export.rst:11
# 3d390569a20a456899144677165462ee
msgid "shp2pgsql is a commandline tool to import ESRI shapefiles to the database. Under Unix, you can use the following command for importing a new PostGIS table:"
msgstr ""

#: ../../postgis/import_export.rst:20
# 00b28dc8de4b428482aa2901a013b356
msgid "Under Windows, you have to perform the import process in two steps:"
msgstr ""

#: ../../postgis/import_export.rst:27
# 98c2b46782a3410eb328f04641ac7be1
msgid "You may encounter this error:"
msgstr ""

#: ../../postgis/import_export.rst:34
# 61f9d12a0d7e40edb8b613fa0626750a
msgid "This is a known issue regarding the creation *in situ* of a spatial index for the data you're importing. To avoid the error, exclude the :kbd:`-I` parameter. This will mean that no spatial index is being created directly, and you'll need to create it in the database after the data have been imported. (The creation of a spatial index will be covered in the next lesson.)"
msgstr ""

#: ../../postgis/import_export.rst:41
# 7bd4d6aed110419387ed0112850c0853
msgid "pgsql2shp"
msgstr ""

#: ../../postgis/import_export.rst:43
# 9a99ad09a80f473794020fb474a8530f
msgid "pgsql2shp is a commandline tool to export PostGIS Tables, Views or SQL select queries. To do this under Unix:"
msgstr ""

#: ../../postgis/import_export.rst:51
# e2d00a0e1e8d4e849c655b8dc9bd7c6f
msgid "To export the data using a query:"
msgstr ""

#: ../../postgis/import_export.rst:59
# 472c21ae4412408c8457ac4cbc597265
msgid "ogr2ogr"
msgstr ""

#: ../../postgis/import_export.rst:61
# efa62d2cced3462185a7176b506ad0e1
msgid "ogr2ogr is a very powerful tool to convert data into and from postgis to many data formats. ogr2ogr is part of the GDAL/OGR Software and has to be installed separately. To export a table from PostGIS to GML, you can use this command:"
msgstr ""

#: ../../postgis/import_export.rst:71
# 4c261056b50947a784e4a5638fd01b59
msgid "SPIT"
msgstr ""

#: ../../postgis/import_export.rst:73
# ed55bf36e5024f9e9216437e3079692f
msgid "SPIT is a QGIS plugin which is delivered with QGIS. You can use SPIT for uploading ESRI shapefiles to PostGIS."
msgstr ""

#: ../../postgis/import_export.rst:76
# ec66eb5d38844bc4a7845eff7da6729e
msgid "Once you've added the SPIT plugin via the :guilabel:`Plugin Manager`, look for this button:"
msgstr ""

#: ../../postgis/import_export.rst:82
# 6a09078b69294767b5aaadd89d4c34af
msgid "Clicking on it will give you the SPIT dialog:"
msgstr ""

#: ../../postgis/import_export.rst:87
# 3bd86ab3a889485fbd02dcdc9a046a91
msgid "You can add shapefiles to the database by clicking the :guilabel:`Add` button, which will give you a file browser window."
msgstr ""

#: ../../postgis/import_export.rst:93
# c2832b4b1ac44168b56adf409a1fe030
msgid "Importing and exporting data to and from the database can be done in many various ways. Especially when using disparate data sources, you will probably use these functions (or others like them) on a regular basis."
msgstr ""

#: ../../postgis/import_export.rst:98
#: ../../postgis/simple_feature_model.rst:257
#: ../../postgis/spatial_functions.rst:249
#: ../../postgis/spatial_queries.rst:398
# 5b2f611d45174e45ae0e059ec078bebb
# ec92613bbb174d7a8e1899a26b43e52b
# 895d6d451a3c414db1baf76144aa11c8
# 9505385a85dc481cbe2ccfcad1f8569f
msgid "|WN|"
msgstr ""

#: ../../postgis/import_export.rst:100
# c831e3f27f07492c8212ddb81a4f7bf7
msgid "Next we'll look at how to query the data we've created before."
msgstr ""

#: ../../postgis/index.rst:3
# 24c5717d135c4896b9a06037257f0953
msgid "|MOD| PostGIS"
msgstr ""

#: ../../postgis/index.rst:5
# 79ec1cf8f0b940dea7bb4cf99d2082a3
msgid "PostGIS is an extension to PostgreSQL which allows it to handle and process geographic data. In this module, we'll learn how to set up and use the geographic functions that PostGIS offers."
msgstr ""

#: ../../postgis/index.rst:9
# 73df04ecc58c47ab81b9b4815c8a2837
msgid "While working through this section, you may want to keep a copy of the `PostGIS cheat sheet <../_static/postgis/postgis_cheatsheet.pdf>`_ available at `Boston GIS user group <http://www.bostongis.com/postgis_quickguide.bqg>`_. Another good friend is the `online <http://postgis.refractions.net/documentation/manual-1.5/>`_ PostGIS documentation."
msgstr ""

#: ../../postgis/index.rst:16
# 727cc263edce44ab869c7cdf0d6d870b
msgid "See also `PostGIS online <http://postgisonline.org/>`_."
msgstr ""

#: ../../postgis/simple_feature_model.rst:2
# bef12f72252541c28cffaa5e2b7f0253
msgid "|LS| Simple Feature Model"
msgstr ""

#: ../../postgis/simple_feature_model.rst:4
# f91c71147f3b4b4bbfac6bb72ee58afc
msgid "How can we store and represent geographic features in a database? In this lesson we'll cover one approach, the Simple Feature Model as defined by the OGC."
msgstr ""

#: ../../postgis/simple_feature_model.rst:8
# 48e85c5103244792948e12ed62d6550c
msgid "**The goal for this lesson:** To learn what the SFS Model is and how to use it."
msgstr ""

#: ../../postgis/simple_feature_model.rst:11
# 03af61442e414692ac3a9da2c75e3d17
msgid "What is OGC"
msgstr ""

#: ../../postgis/simple_feature_model.rst:13
# 41e81c26035c4c5fa3daa0815ae66af4
msgid "The Open Geospatial Consortium (OGC), an international voluntary consensus standards organization, originated in 1994. In the OGC, more than 370+ commercial, governmental, nonprofit and research organizations worldwide collaborate in an open consensus process encouraging development and implementation of standards for geospatial content and services, GIS data processing and data sharing. *- Wikipedia*"
msgstr ""

#: ../../postgis/simple_feature_model.rst:21
# 0af0070c6f6340a994a9f5236186d679
msgid "What is the SFS Model"
msgstr ""

#: ../../postgis/simple_feature_model.rst:23
# acd844bb244c422593d80b94ec561f32
msgid "The Simple Feature for SQL (SFS) Model is a *non-topological* way to store geospatial data in a database and defines functions for accessing, operating, and constructing these data."
msgstr ""

#: ../../postgis/simple_feature_model.rst:30
# 3f5c439c746a49b9be82292cd978caf4
msgid "The model defines geospatial data from Point, Linestring, and Polygon types (and aggregations of them to Multi objects)."
msgstr ""

#: ../../postgis/simple_feature_model.rst:33
# 1684cf6a211647f7b429721dd879928b
msgid "For further information, have a look at the `OGC Simple Feature for SQL <http://www.opengeospatial.org/standards/sfs>`_ standard."
msgstr ""

#: ../../postgis/simple_feature_model.rst:37
# b7fb538bdab646a6b6ba0739e4c1c8a8
msgid "Add a geometry field to table"
msgstr ""

#: ../../postgis/simple_feature_model.rst:39
# 2d52f2f4c3cb49f1928bfbe1bc8795d3
msgid "Let's add a point field to our people table:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:49
# 455a6f586d5b4352aa904a3efbbff45c
msgid "Add a constraint based on geometry type"
msgstr ""

#: ../../postgis/simple_feature_model.rst:51
# 02ab6da4cfdb4dd7bf0d9b40eca0aba3
msgid "You will notice that the geometry field type does not implicitly specify what *type* of geometry for the field - for that we need a constraint."
msgstr ""

#: ../../postgis/simple_feature_model.rst:60
# 236b10ee985146a59873672b713937cb
msgid "What does that do? It adds a constraint to the table that prevents anything except a point geometry or a null."
msgstr ""

#: ../../postgis/simple_feature_model.rst:63
# 3da683bb64774d1aac13b783928d1974
msgid "Now you try:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:65
# 07702ee98a4b48fcb6d5388269697d3c
msgid "Create a new table called cities and give it some appropriate columns, including a geometry field for storing polygons (the city boundaries). Make sure it has a constraint enforcing geometries to be polygons."
msgstr ""

#: ../../postgis/simple_feature_model.rst:98
# 26a5df7d33474462bc27ee521b8be4f0
msgid ":ref:`Check your results <simple-feature-1>`"
msgstr ""

#: ../../postgis/simple_feature_model.rst:104
# 9597b80d0d4a4cf4b902f3b06079e7ce
msgid "Populate geometry_columns table"
msgstr ""

#: ../../postgis/simple_feature_model.rst:106
# 3bb6099390694a679f24198bf989143a
msgid "At this point you should also add an entry into the :kbd:`geometry_columns` table:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:114
# 16da5b27beba49c883d373fbf59e1c6a
msgid "Why? :kbd:`geometry_columns` is used by certain applications to be aware of which tables in the database contain geometry data."
msgstr ""

#: ../../postgis/simple_feature_model.rst:117
# 2c87597323da4f1098c1a36a7aa99229
msgid "If the above :kbd:`INSERT` statement causes a complaint, run this query first:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:124
# 7a6cacc24bba445cb6c8ffd28c473729
msgid "If the column :kbd:`f_table_name` contains the value :kbd:`people`, then this table has already been registered and you don't need to do anything more."
msgstr ""

#: ../../postgis/simple_feature_model.rst:128
# 718ec99b2e164e8aa99d8cfdb828c2e8
msgid "The value :kbd:`2` refers to the number of dimensions; in this case, two: **x** and **y**."
msgstr ""

#: ../../postgis/simple_feature_model.rst:131
# b5e8d604f3e1496492d1eeff452dd940
msgid "The value :kbd:`4326` refers to the projection we are using; in this case, WGS 84, which is referred to by the number 4326 (refer to the earlier discussion about the EPSG)."
msgstr ""

#: ../../postgis/simple_feature_model.rst:135
# 4c97b9b4ea2a4ce2a259bc3797f2e874
msgid "Add an appropriate geometry_columns entry for your new cities layer"
msgstr ""

#: ../../postgis/simple_feature_model.rst:156
# 6d3bc5d7723f4449b690557ecd923f82
msgid ":ref:`Check your results <simple-feature-2>`"
msgstr ""

#: ../../postgis/simple_feature_model.rst:162
# dc27b6d645834ce38adbd9bcd7fd962c
msgid "Add geometry record to table using SQL"
msgstr ""

#: ../../postgis/simple_feature_model.rst:164
# 78d4b72981f14b47add400347eb45af2
msgid "Now that our tables are geo-enabled, we can store geometries in them!"
msgstr ""

#: ../../postgis/simple_feature_model.rst:175
# 4d3e9f4e62dc4d36864cafc91b500c74
msgid "In the new entry above, you will need to specify which projection (SRID) you want to use. This is because you entered the geometry of the new point using a plain string of text, which does not automatically add the correct projection information. Obviously, the new point needs to use the same SRID as the dataset it is being added to, so you need to specify it."
msgstr ""

#: ../../postgis/simple_feature_model.rst:181
# ddb03320aa7648d482192c3676882a00
msgid "If at this point you were using a graphical interface, for example, specifying the projection for each point would be automatic. In other words, you usually won't need to worry about using the correct projection for every point you want to add if you've already specified it for that dataset, as we did earlier."
msgstr ""

#: ../../postgis/simple_feature_model.rst:187
# 094aad258ee34e748023d866e6e12db9
msgid "Now is probably a good time to fire up QGIS and try to view your :kbd:`people` table. Also, we should try editing / adding / deleting records and then performing select queries in the database to see how the data has changed."
msgstr ""

#: ../../postgis/simple_feature_model.rst:191
# 94380ab5b24f42b4991a06dd63dd2303
msgid "To load a PostGIS layer in QGIS, use the :menuselection:`Layer --> Add PostGIS Layers` menu option or toolbar button:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:197
# 428ab48c9f84407089dfa8f11dc2ffa4
msgid "This will open the dialog:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:202
# b678ac65355348faa8108288122a42d7
msgid "Click on the :guilabel:`New` button to open this dialog:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:207
# 66df6557ac204702871678308bded73d
msgid "Then define a new connection, e.g.:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:219
# beb5a7b39b684f6182a492513454e05e
msgid "To see whether QGIS has found the :kbd:`address` database and that your username and password are correct, click :guilabel:`Test Connect`. If it works, check the boxes next to :guilabel:`Save Username` and :guilabel:`Save Password`. Then click :guilabel:`OK` to create this connection."
msgstr ""

#: ../../postgis/simple_feature_model.rst:224
# 43ea788e90fb4545a9976e2ed0d06ea4
msgid "Back in the :guilabel:`Add PostGIS Layers` dialog, click :guilabel:`Connect` and add layers to your project as usual."
msgstr ""

#: ../../postgis/simple_feature_model.rst:227
# ce7c8d96caff409da432f49408110634
msgid "Formulate a query that shows a person's name, street name and position (from the the_geom column) as plain text."
msgstr ""

#: ../../postgis/simple_feature_model.rst:248
# 3d667d80d20a4cf2ad727b1eeca97bf2
msgid ":ref:`Check your results <simple-feature-3>`"
msgstr ""

#: ../../postgis/simple_feature_model.rst:253
# 6acfb5d0a8c24a7c97c0ac6a191b10ca
msgid "You have seen how to add spatial objects to your database and view them in GIS software."
msgstr ""

#: ../../postgis/simple_feature_model.rst:259
# f7a5e2085925458486329f19eec60fc2
msgid "Next you'll see how to import data into, and export data from, your database."
msgstr ""

#: ../../postgis/spatial_functions.rst:2
# 47a53d6b32b8414db0b61cc4b2fcb483
msgid "|LS| PostGIS Setup"
msgstr ""

#: ../../postgis/spatial_functions.rst:4
# 6e60b73a889f4b3aa6163add1272a7e4
msgid "Setting up PostGIS functions will allow you to access spatial functions from within PostgreSQL."
msgstr ""

#: ../../postgis/spatial_functions.rst:7
# ebfb7f60366f445ea55637f586d03258
msgid "**The goal for this lesson:** To install spatial functions and briefly demo their effects."
msgstr ""

#: ../../postgis/spatial_functions.rst:11
# 4f9a9095d6d247fbaf45726a2a2afa8b
msgid "Installing under Ubuntu"
msgstr ""

#: ../../postgis/spatial_functions.rst:13
# 1308f568569944fabdabe54668c2d129
msgid "Postgis is easily installed from apt."
msgstr ""

#: ../../postgis/spatial_functions.rst:20
# caa7cbc096ae4894a366d2a0332766e6
msgid "Really, it's that easy..."
msgstr ""

#: ../../postgis/spatial_functions.rst:23
# f48782d24a224814b5a18bebc38d9a82
msgid "Installing under Windows"
msgstr ""

#: ../../postgis/spatial_functions.rst:25
# c2f509206a5240dd89d32e52668020f4
msgid "Visit `the download page <http://www.postgresql.org/download/>`_."
msgstr ""

#: ../../postgis/spatial_functions.rst:27
# d74f76f15f3c47d4af511b99e368f3e4
msgid "Now follow `this guide <http://www.bostongis.com/PrinterFriendly.aspx?content_name=postgis_tut01>`_."
msgstr ""

#: ../../postgis/spatial_functions.rst:30
# 4b0aaa2471ad42f1b6e052384ad153a3
msgid "A little more complicated, but still not hard. Note that you need to be online to install the postgis stack."
msgstr ""

#: ../../postgis/spatial_functions.rst:34
# c8959db248c04f54967db7c2f10bd8e9
msgid "Install plpgsql"
msgstr ""

#: ../../postgis/spatial_functions.rst:36
# eb17f1f8a67c4dd8824a02c1f2de1e47
msgid "You can ensure that any database created on your system automatically gets these spatial extensions by running these commands (from this and the next two sections) on the :kbd:`template1` system database *before* you create any of your own databases."
msgstr ""

#: ../../postgis/spatial_functions.rst:41
# 839e7b41dc3c4a09b37a691f4bad72e4
msgid "PostgreSQL can use various procedural languages. What is a procedural language? It is an 'in database' language that can be used to extend the functionality of the database. For example you can write database functions that are called when events happen - such as when a record is inserted into the database. (Recall when this was done in the previous module.)"
msgstr ""

#: ../../postgis/spatial_functions.rst:47
# 577727e036934a8cb5a3e47a7705fa10
msgid "PostGIS requires the PLPGSQL procedural language to be installed. So do this:"
msgstr ""

#: ../../postgis/spatial_functions.rst:55
# b64e7c122ee64968946239116c6cb0c8
msgid "Where the third argument is the name of the database that the procedural language should be installed into."
msgstr ""

#: ../../postgis/spatial_functions.rst:58
# 4dc3edb508634798956532e951118fec
msgid "You will need administrative permissions for your database to be able to do this."
msgstr ""

#: ../../postgis/spatial_functions.rst:62
# 4c3a3bcd004c44e4a1a97174cf055d61
msgid "Install postgis.sql"
msgstr ""

#: ../../postgis/spatial_functions.rst:64
# 8931f87878da495cb7f145bb228911c0
msgid "PostGIS can be thought of as a collection of in database functions that extend the core capabilities of PostgreSQL so that it can deal with spatial data. By 'deal with', we mean store, retrieve, query and manipulate. In order to do this, a number of functions are installed into the database. Do this:"
msgstr ""

#: ../../postgis/spatial_functions.rst:73
# 5959d243e6ba406ba675cdc80254d9bc
msgid "or"
msgstr ""

#: ../../postgis/spatial_functions.rst:79
# 6a13bcd4409a4d7e9634785be894473c
msgid "depending on which PostGIS version you have installed. Now do:"
msgstr ""

#: ../../postgis/spatial_functions.rst:85
# b57c6b6ed6504e3faed66b92e14086ee
msgid "and, once you're in the psql prompt:"
msgstr ""

#: ../../postgis/spatial_functions.rst:91
# fedf93b02e7b446f870321f0c1c4503f
msgid "We will discuss these functions in more detail as we proceed with this course."
msgstr ""

#: ../../postgis/spatial_functions.rst:94
# b80ad1d26466404795395a5803b92c0e
msgid "Install spatial_refsys.sql"
msgstr ""

#: ../../postgis/spatial_functions.rst:96
# 8ec0ae0e21f2470fb7ecc0b0ac18d58d
msgid "In addition to the PostGIS functions, a second helper SQL script needs to be run that will load the database with a collection of spatial reference system (SRS) definitions as defined by the European Petroleum Survey Group (EPSG). These are used during operations such as coordinate reference system (CRS) conversions."
msgstr ""

#: ../../postgis/spatial_functions.rst:102
# b2e89d219bc34dff867b311a886d8b2c
msgid "You can add more to the SRS list later if needed, but the list provided should cover just about every SRS you will need (Google Mercator and lo are notable exceptions)."
msgstr ""

#: ../../postgis/spatial_functions.rst:106
# 1e25c5925fa342a78037ada6c9ae1b76
msgid "To load the SRS table, first ensure that you're at a normal prompt (i.e., quit the database first with :kbd:`\\q`), then do this:"
msgstr ""

#: ../../postgis/spatial_functions.rst:113
# d8818debf7eb400e90ce5f693a9f9647
msgid "replacing :kbd:`1.5` with :kbd:`2.0` if necessary."
msgstr ""

#: ../../postgis/spatial_functions.rst:115
# 9bb8b7ff7c1743b088f9e3d10259dfd6
msgid "The above command adds a table to our database. We can see the schema of this table by entering the following command in the psql prompt:"
msgstr ""

#: ../../postgis/spatial_functions.rst:122
# ecc61dd36e324c4a9fdf8baa4dcfd26d
msgid "The result should be this:"
msgstr ""

#: ../../postgis/spatial_functions.rst:137
# 7c99755856714b6090b54ef93dd5a555
msgid "You can use standard SQL queries (as we have learned from our introductory sections), to view and manipulate this table - though we suggest you do not update or delete any records unless you know what you are doing."
msgstr ""

#: ../../postgis/spatial_functions.rst:141
# 3bd18129b382415cb325b6d68b1eeb66
msgid "One SRID you may be interested in is EPSG:4326 - the geographic / lat lon reference system using the WGS 84 ellipsoid. Let's take a look at it:"
msgstr ""

#: ../../postgis/spatial_functions.rst:148
# a21cf13f3a6b4dfaac042f231afe28d7
msgid "Result"
msgstr ""

#: ../../postgis/spatial_functions.rst:162
# fde654ce2b6f41d5b3c41bf3b6b9bcbe
msgid "The srtext is the projection definition in well known text (you may recognise this from .prj files in your shapefile collection)."
msgstr ""

#: ../../postgis/spatial_functions.rst:166
# 6249060ef9c24be7babbad51b362b79e
msgid "Looking at the installed PostGIS functions"
msgstr ""

#: ../../postgis/spatial_functions.rst:168
# 12a4b3abef6747689550c72783b95e22
msgid "Good - our PostgreSQL database is now geospatially enabled, thanks to PostGIS. We are going to delve a lot deeper into this in the coming days, but let's give you a quick little taster. Let's say we want to create a point from text. First we use the psql command to find functions relating to point:"
msgstr ""

#: ../../postgis/spatial_functions.rst:177
# 0840526805964fd8883164abd46a6a7a
msgid "Here is one that caught my eye: :kbd:`st_pointfromtext`"
msgstr ""

#: ../../postgis/spatial_functions.rst:179
# cbccaa0a7400472ca4ac9b6152476cd2
msgid "So let's give that a try:"
msgstr ""

#: ../../postgis/spatial_functions.rst:185
#: ../../postgis/spatial_functions.rst:219
#: ../../postgis/spatial_queries.rst:25
#: ../../postgis/spatial_queries.rst:58
#: ../../postgis/spatial_queries.rst:179
#: ../../postgis/spatial_queries.rst:219
#: ../../postgis/spatial_queries.rst:320
# 481cb56b2e854a4a974673dd37ace8bf
# c64344f3025c4170b3bc733b22fe3994
# 4a32dbb581b744e3bb4aef9f11796a49
# 449f878964524eb485f26fedd99ca620
# e3afa6c141794c5e83f2c199dac964f5
# 085a4d9fd9f041bb85f4c73812a1518d
# a3fea55eee614b408053b79bf8e9af2e
msgid "Result:"
msgstr ""

#: ../../postgis/spatial_functions.rst:194
# d58a3ed739d4448abb4e50c79e68eee5
msgid "So there are a couple of interesting things going on here:"
msgstr ""

#: ../../postgis/spatial_functions.rst:196
# 6e8a9e95c2434f0389766615b81c0e81
msgid "we defined a point at position 1,1 (EPSG:4326 is assumed) using :kbd:`POINT(1 1)`"
msgstr ""

#: ../../postgis/spatial_functions.rst:198
# a016ce550b4542c188b48c8fc1686749
msgid "we ran an sql statement, but not on any table, just on data entered from the SQL prompt"
msgstr ""

#: ../../postgis/spatial_functions.rst:200
# 7c975ef45e0847b880c2e58a2bfc99fd
msgid "the resulting row looks kinda strange"
msgstr ""

#: ../../postgis/spatial_functions.rst:202
# 020692c006a144e782d3e90bd40cc8ec
msgid "The resulting row is looking strange because its in the OGC format called 'Well Known Binary' (WKB) - more on that coming in the next section."
msgstr ""

#: ../../postgis/spatial_functions.rst:205
# 78bb5d359414436d80cfcf2c49eee5ba
msgid "To get the results back as text, I do a quick scan through the function list for something that returns text:"
msgstr ""

#: ../../postgis/spatial_functions.rst:212
# f7e052e3b5b24423af692889ad6f6d75
msgid "One that catches my eye is :kbd:`st_astext`. Let's combine it with the previous query:"
msgstr ""

#: ../../postgis/spatial_functions.rst:228
# bde1441f6d2b40c1932ddcc877343848
msgid "So what's happened here? We entered the string :kbd:`POINT(1,1)`, turned it into a point using :kbd:`st_pointfromtext()`, and turned it back into a human-readable form with :kbd:`st_astext()`, which gave us back our original string."
msgstr ""

#: ../../postgis/spatial_functions.rst:233
# a255a53e11ef40a7a80de467ded959df
msgid "One last example before we really get into the detail of using PostGIS:"
msgstr ""

#: ../../postgis/spatial_functions.rst:239
# dd73fec7a2da4b40abc0e746b5431aa1
msgid "What did that do? It created a buffer of 1 degree around our point, and returned it as text. Nifty hey?"
msgstr ""

#: ../../postgis/spatial_functions.rst:245
# 1e983bca282545c09a761deb2550b8aa
msgid "You now have PostGIS functions installed in your copy of PostgreSQL. With this you'll be able to make use of PostGIS' extensive spatial functions."
msgstr ""

#: ../../postgis/spatial_functions.rst:251
# d0d9c9ed36af4045bea252082ce17e8a
msgid "Next you'll learn how spatial features are represented in a database."
msgstr ""

#: ../../postgis/spatial_queries.rst:2
# f14b9eb889624ab5826477d3cb301de6
msgid "|LS| Spatial Queries"
msgstr ""

#: ../../postgis/spatial_queries.rst:4
# 991ebe2d59d54bd490f55fc9103cfad2
msgid "Spatial queries are no different from other database queries. You can use the geometry column like any other database column. With the installation of PostGIS in our database, we have additional functions to query our database."
msgstr ""

#: ../../postgis/spatial_queries.rst:8
# c3efb1c931624e0cb1076a084ecc102d
msgid "**The goal for this lesson:** To see how spatial functions are implemented similarly to \"normal\" non-spatial functions."
msgstr ""

#: ../../postgis/spatial_queries.rst:14
# 81ef0b02df5545b495c7ef7db0003674
msgid "Spatial Operators"
msgstr ""

#: ../../postgis/spatial_queries.rst:16
# 246c426a3d7b42bd94e2886b73da531a
msgid "When you want to know which points are within a distance of 2 degrees to a point(X,Y) you can do this with:"
msgstr ""

#: ../../postgis/spatial_queries.rst:34
# 766eaabdb58d440793c52ec90d4a5c9e
msgid "the_geom value above was truncated for space on this page. If you want to see the point in human-readable coordinates, try something similar to what you did in the section \"View a point as WKT\", above."
msgstr ""

#: ../../postgis/spatial_queries.rst:38
# e7b1120c99bc43f9b139032529bd12f4
msgid "How do we know that the query above returns all the points within 2 *degrees*? Why not 2 *meters*? Or any other unit, for that matter?"
msgstr ""

#: ../../postgis/spatial_queries.rst:41
# b6fb9453653f4b208548428710ca0ce7
msgid ":ref:`Check your results <spatial-queries-1>`"
msgstr ""

#: ../../postgis/spatial_queries.rst:46
# 16aff83ebbd4422989de7bee64efbb92
msgid "Spatial Indexes"
msgstr ""

#: ../../postgis/spatial_queries.rst:48
# eff023489cb44c109c04cf46d1bddeb1
msgid "We also can define spatial indexes. A spatial index makes your spatial queries much faster. To create a spatial index on the geometry column use:"
msgstr ""

#: ../../postgis/spatial_queries.rst:85
# 7de4600f4437439f9512772f0dc62847
msgid "Now you try - modify the cities table so its geometry column is spatially indexed."
msgstr ""

#: ../../postgis/spatial_queries.rst:115
# f0f9024170f542ca9958fdc1bd94b33d
msgid ":ref:`Check your results <spatial-queries-2>`"
msgstr ""

#: ../../postgis/spatial_queries.rst:119
# 1c20e37b9b564cca92fae07fd190da62
msgid "PostGIS Spatial Functions Demo"
msgstr ""

#: ../../postgis/spatial_queries.rst:121
# 9e00a8a1b11240719dfab62148493aad
msgid "In order to demo PostGIS spatial functions, we'll create a new database containing some (fictional) data."
msgstr ""

#: ../../postgis/spatial_queries.rst:124
# b474403fac3943e19cf13d97703033ce
msgid "To start, create a new database:"
msgstr ""

#: ../../postgis/spatial_queries.rst:130
# b7e9a4feba50457a8ffa1dbe27273644
msgid "Remember to install PLPGSQL:"
msgstr ""

#: ../../postgis/spatial_queries.rst:136
# bb2346e9976d4451a29c44e927d104cb
msgid "Then install the PostGIS functions and the spatial reference system. For example, on Linux with PostgreSQL 9.1 and PostGIS 1.5:"
msgstr ""

#: ../../postgis/spatial_queries.rst:144
# d8fabcb0033c4c22924cc2fdeeee82ee
msgid "Next, import the data provided in the :kbd:`exercise_data/postgis/` directory. Refer back to the previous lesson for instructions. You can import from the terminal or via SPIT. Import the files into the following database tables:"
msgstr ""

#: ../../postgis/spatial_queries.rst:148
# 98c20b83316e4e0d97ff2bd37c158220
msgid ":kbd:`points.shp` = :kbd:`building`"
msgstr ""

#: ../../postgis/spatial_queries.rst:149
# c8e6d4ff256e49d9b17116f37245e019
msgid ":kbd:`lines.shp` = :kbd:`road`"
msgstr ""

#: ../../postgis/spatial_queries.rst:150
# 687e3f93284d4c7c931a8e5dcb86aeeb
msgid ":kbd:`polygons.shp` = :kbd:`region`"
msgstr ""

#: ../../postgis/spatial_queries.rst:152
# 9c9e483a39de42a599e5e10e26f81c6b
msgid "Load these three database layers into QGIS via the :guilabel:`Add PostGIS Layers` dialog, as usual. When you open their attribute tables, you'll note that they have both an :kbd:`id` field and a :kbd:`gid` field created by the PostGIS import."
msgstr ""

#: ../../postgis/spatial_queries.rst:157
# 920af291937a464c8fb003195e3506d4
msgid "Now that the tables are imported, we can use PostGIS to query the data. Go back to your terminal (command line) and enter the psql prompt by doing:"
msgstr ""

#: ../../postgis/spatial_queries.rst:164
# 357a51e4dbd143438674beb662ee8add
msgid "We'll demo some of these select statements by creating views from them, so that you can open them in QGIS and see the results."
msgstr ""

#: ../../postgis/spatial_queries.rst:168
# 8e155f7b19ec44dab1eb9575a3df0ccc
msgid "Select by location"
msgstr ""

#: ../../postgis/spatial_queries.rst:170
# f5310db44cf6435eaca4d7884304233e
msgid "Get all the buildings in the KwaZulu region."
msgstr ""

#: ../../postgis/spatial_queries.rst:192
# 4806a3ae8ed742b3ab46e08b7c949ce2
msgid "Or, if we create a view from it:"
msgstr ""

#: ../../postgis/spatial_queries.rst:202
# abc60b8e0b5e4061af15fbd831953119
msgid "And view it in QGIS:"
msgstr ""

#: ../../postgis/spatial_queries.rst:208
# edfdf22f9543444fb7c3cbdd77303878
msgid "Select neighbors"
msgstr ""

#: ../../postgis/spatial_queries.rst:210
# 2a974c49b08943df853f1c6faf8ee022
msgid "Show a list of all the names of regions adjoining the Hokkaido region."
msgstr ""

#: ../../postgis/spatial_queries.rst:230
# 6a7ff013587142b9a90c462483adacbf
msgid "As a view:"
msgstr ""

#: ../../postgis/spatial_queries.rst:240
#: ../../postgis/spatial_queries.rst:285
# f06eed50ee664057b63979953211ca32
# bdf40aaec0cf4d57a24b32e33b7fd0cb
msgid "In QGIS:"
msgstr ""

#: ../../postgis/spatial_queries.rst:245
# 6cba1b7f74dc486b82119a8c7e4df4dd
msgid "Note the missing region (Queensland). This may be due to a topology error. Artifacts such as this can alert us to potential problems in the data. To solve this enigma without getting caught up in the anomalies the data may have, we could use a buffer intersect instead:"
msgstr ""

#: ../../postgis/spatial_queries.rst:257
# 3d27a4b7433b476ea7458e38e1971843
msgid "This creates a buffer of 100 meters around the region Hokkaido."
msgstr ""

#: ../../postgis/spatial_queries.rst:259
# 9021c50043814df6acbadeb885ea8ea0
msgid "The darker area is the buffer:"
msgstr ""

#: ../../postgis/spatial_queries.rst:264
# a9a63f5d90b5442ab12b84e80441cd59
msgid "Select using the buffer:"
msgstr ""

#: ../../postgis/spatial_queries.rst:279
# 5c4d1acb99634f5597fffb60dcc16752
msgid "In this query, the original buffer view is used as any other table would be. It is given the alias :kbd:`a`, and its geometry field, :kbd:`a.the_geom`, is used to select any polygon in the :kbd:`region` table (alias :kbd:`b`) that intersects it. However, Hokkaido itself is excluded from this select statement, because we don't want it; we only want the regions adjoining it."
msgstr ""

#: ../../postgis/spatial_queries.rst:290
# a9c46edc788d413eafdd36be549c3380
msgid "It is also possible to select all objects within a given distance, without the extra step of creating a buffer:"
msgstr ""

#: ../../postgis/spatial_queries.rst:302
# d0d52d49c8b04ce6b1942d39d1114792
msgid "This achieves the same result, without need for the interim buffer step:"
msgstr ""

#: ../../postgis/spatial_queries.rst:309
# 84ba1462e75f4278afdc2d88ab75be2a
msgid "Select uniques"
msgstr ""

#: ../../postgis/spatial_queries.rst:311
# 589814a6b3194b418f0850b9639f68f9
msgid "Show a list of unique town names for all buildings in the Queensland region."
msgstr ""

#: ../../postgis/spatial_queries.rst:333
# 1b86caf72ebc4f8e8382492c67d9de62
msgid "Further examples ..."
msgstr ""

#: ../../postgis/spatial_queries.rst:394
# e9caeceff2934133993702c2c1aaf884
msgid "You have seen how to query spatial objects using the new database functions from PostGIS."
msgstr ""

#: ../../postgis/spatial_queries.rst:400
# 129165ba7038499c858d0c5d90b8cbdf
msgid "Next we're going to investigate the structures of more complex geometries and how to create them using PostGIS."
msgstr ""

