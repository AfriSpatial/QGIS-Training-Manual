# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-20 10:39\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../postgis/geometry.rst:2
# bad9d40159e14206b8cb88ebbfd94538
msgid "|LS| Geometry Construction"
msgstr ""

#: ../../postgis/geometry.rst:4
# a65b3209daef4d0c827350cef7f92954
msgid "In this section we are going to delve a little deeper into how simple geometries are constructed in SQL. In reality, you will probably use a GIS like QGIS to create complex geometries using their digitising tools; however, understanding how they are formulated can be handy for writing queries and understanding how the database is assembled."
msgstr ""

#: ../../postgis/geometry.rst:10
# dce0c42328c14b09be4ba1e30b371894
msgid "**The goal of this lesson:** To better understand how to create spatial entities directly in PostgreSQL/PostGIS."
msgstr ""

#: ../../postgis/geometry.rst:16
# 9a58cacd5dab4e12bda96c7bdc3128c4
msgid "Creating Linestrings"
msgstr ""

#: ../../postgis/geometry.rst:18
# b6c291640dce49fba97785aebd038202
msgid "Before we start, let's get our streets table matching the others; i.e., having a constraint on the geometry, an index and an entry in the geometry_columns table."
msgstr ""

#: ../../postgis/geometry.rst:22
# 8762583dc1a64e12b53fd39f05158c81
msgid "Exercise:"
msgstr ""

#: ../../postgis/geometry.rst:24
# 4fd4c86d5add4e4c9dc8ff0259fa5846
msgid "Modify the streets table so that it has a geometry column of type ST_LineString."
msgstr ""

#: ../../postgis/geometry.rst:26
# 80923696e67f4ea3a67f236980f8a606
msgid "Don't forget to do the accompanying update to the geometry columns table!"
msgstr ""

#: ../../postgis/geometry.rst:28
# e375aaa63f7240fca5db96b63bcdb67e
msgid "Also add a constraint to prevent any geometries being added that are not LINESTRINGS or null."
msgstr ""

#: ../../postgis/geometry.rst:30
# 6fed6639e61649bc9b2bc5ab5c23d645
msgid "Create a spatial index on the new geometry column"
msgstr ""

#: ../../postgis/geometry.rst:57
# 9ac99ccfd37d408094341416c92d65cb
msgid ":ref:`Check your results <geometry-1>`"
msgstr ""

#: ../../postgis/geometry.rst:59
# 137548dd5b2e43ff978f8ff04a19a8a2
msgid "Now let's insert a linestring into our streets table. In this case I am going to update an existing street record:"
msgstr ""

#: ../../postgis/geometry.rst:67
# dddadf8bbd1f4151bd2ce1cd5c88aca0
msgid "Take a look at the results in QGIS. (You may need to right-click on the streets layer in the 'Layers' panel, and choose 'Zoom to layer extent'.)"
msgstr ""

#: ../../postgis/geometry.rst:70
# 16050a5b9302401bb3861794a66f5189
msgid "Now create some more streets entries - some in QGIS and some from the command line."
msgstr ""

#: ../../postgis/geometry.rst:75
# 034ea45ec48e49c695d90ef84ac8d221
msgid "Creating Polygons"
msgstr ""

#: ../../postgis/geometry.rst:77
# c761e99974ec4e0e87465d028ca97512
msgid "Creating polygons is just as easy. One thing to remember is that by definition, polygons have at least four vertices, with the last and first being co-located."
msgstr ""

#: ../../postgis/geometry.rst:85
# c3606b47876046d6a574d68a07ccf795
msgid "A polygon requires double brackets around its coordinate list; this is to allow you to add complex polygons with multiple unconnected areas. For instance:"
msgstr ""

#: ../../postgis/geometry.rst:95
# 1307f10338ec4f74b27a7eb514cc68ba
msgid "If you followed this step, you can check what it did by loading the cities dataset into QGIS, opening its attribute table, and selecting the new entry. Note how the two new polygons behave like one polygon."
msgstr ""

#: ../../postgis/geometry.rst:103
# d5087cf6027e4902909971297894cffd
msgid "Exercise: Linking Cities to People"
msgstr ""

#: ../../postgis/geometry.rst:105
# cc0b677a9d6d49e8b949ca38d3a1a028
msgid "For this exercise you should do the following:"
msgstr ""

#: ../../postgis/geometry.rst:107
# 38eca40139bb47b591b83612b558073d
msgid "Delete all data from your people table. Add a foreign key column to people that references the primary key of the cities table. Use QGIS to capture some cities. Use SQL to insert some new people records, ensuring that each has an associated street and city."
msgstr ""

#: ../../postgis/geometry.rst:114
# 4b53275355e74cf1bbf18e65922968cc
msgid "Your updated people schema should look something like this:"
msgstr ""

#: ../../postgis/geometry.rst:171
# b071e52c773044d581bd72987b375ea9
msgid ":ref:`Check your results <geometry-2>`"
msgstr ""

#: ../../postgis/geometry.rst:175
# 281937c64ac64e1eb010806418a3a89a
msgid "Looking at our schema"
msgstr ""

#: ../../postgis/geometry.rst:177
# 7a782a4910334bab958e219d1bfa7efb
msgid "By now our schema should be looking like this:"
msgstr ""

#: ../../postgis/geometry.rst:196
# d621e211f2804390a40213c833f73e16
msgid "Access Subobjects"
msgstr ""

#: ../../postgis/geometry.rst:198
# c4382b691e1c4d99b58e0a70eea5fd56
msgid "With the SFS-Model functions, you have a wide variety of options to access subobjects of SFS Geometries. When you want to select the first vertex point of every polygon geometry in the table myPolygonTable, you have to do this in this way:"
msgstr ""

#: ../../postgis/geometry.rst:203
# 83cf02d7806241b0a32850021a6e06c1
msgid "Transform the polygon boundary to a linestring:"
msgstr ""

#: ../../postgis/geometry.rst:209
# d7b410d2b0734bfc907cf0fb0ac11844
msgid "select the first vertex point of the resultant linestring:"
msgstr ""

#: ../../postgis/geometry.rst:219
# 26e4b1571234464f993ec8ea71d7c558
msgid "Data Processing"
msgstr ""

#: ../../postgis/geometry.rst:221
# fa341e3dc5a64620b8b564e05af30e78
msgid "PostGIS supports all OGC SFS/MM standard conform functions. All these functions start with ``ST_``."
msgstr ""

#: ../../postgis/geometry.rst:225
# 1d618e4a47f44c43ab862dbee98d49c6
msgid "Clipping"
msgstr ""

#: ../../postgis/geometry.rst:227
# 404f2c0efada43b6aca915e0a02ab290
msgid "To clip a subpart of your data you can use the :kbd:`ST_INTERSECT()` function. To avoid empty geometries, use:"
msgstr ""

#: ../../postgis/geometry.rst:248
# 164f8fa98c5c445ebb7015f76296c964
msgid "Building Geometries from Other Geometries"
msgstr ""

#: ../../postgis/geometry.rst:250
# 1f7065fd5dd1481e966f5e49fbd9e72f
msgid "From a given point table, you want to generate a linestring. The order of the points is defined by their :kbd:`id`. Another ordering method could be a timestamp, such as the one you get when you capture waypoints with a GPS receiver."
msgstr ""

#: ../../postgis/geometry.rst:258
# bf8a21bcbf244e2b9e6c7f6aec2850fa
msgid "To create a linestring from a new point layer called 'points', you can run the following command:"
msgstr ""

#: ../../postgis/geometry.rst:270
# d77a42e4d8f6492faea5d421593a3831
msgid "To see how it works without creating a new layer, you could also run this command on the 'people' layer, although of course it would make little real-world sense to do this."
msgstr ""

#: ../../postgis/geometry.rst:278
# b70765d6ccc14a7e8e1f41df1c9b7d54
msgid "Geometry Cleaning"
msgstr ""

#: ../../postgis/geometry.rst:280
# 6c6a96defe1e4e92b95a72c8164bfc7e
msgid "You can get more information for this topic in `this blog entry <http://linfiniti.com/?s=cleangeometry>`_."
msgstr ""

#: ../../postgis/geometry.rst:284
# 95c171eb76444bbcbbdba8e3e1d23a57
msgid "Differences between tables"
msgstr ""

#: ../../postgis/geometry.rst:286
# c2229967bd874fcd8cb83106686098d0
msgid "To detect the difference between two tables with the same structure, you can use the PostgreSQL keyword :kbd:`EXCEPT`."
msgstr ""

#: ../../postgis/geometry.rst:295
# bf269b147db847babe6a40191c9f5fda
msgid "As the result, you will get all records from table_a which are not stored in table_b."
msgstr ""

#: ../../postgis/geometry.rst:299
# c1c9ada6167a40d384c59c52a2e509f3
msgid "Tablespaces"
msgstr ""

#: ../../postgis/geometry.rst:301
# eb5e4752860a476ca18c7d655b8be262
msgid "You can define where postgres should store its data on disk by creating tablespaces."
msgstr ""

#: ../../postgis/geometry.rst:308
# bc472b0259a04a0683afd3dd41ad9fe9
msgid "When you create a database, you can then specify which tablespace to use e.g.:"
msgstr ""

#: ../../postgis/geometry.rst:315
#: ../../postgis/import_export.rst:91
#: ../../postgis/simple_feature_model.rst:251
#: ../../postgis/spatial_functions.rst:243
#: ../../postgis/spatial_queries.rst:392
# 6bc42f5782c94e4bbff8d4eb1582cecd
# ec452533863942ec9550a497e5a93294
# a11b195af9bb4c3995eb2436ed9219a0
# 3ef719d5340d447cb9b20066aa8d2a2b
# 5b09910c0d484aeeb271f460404f07ca
msgid "|IC|"
msgstr ""

#: ../../postgis/geometry.rst:317
# fc165a68e3c546b0b4ea708b8d9d4691
msgid "You've learned how to create more complex geometries using PostGIS statements. Keep in mind that this is mostly to improve your tacit knowledge when working with geo-enabled databases through a GIS frontend. You usually won't need to actually enter these statements manually, but having a general idea of their structure will help you when using a GIS, especially if you encounter errors that would otherwise seem cryptic."
msgstr ""

#: ../../postgis/import_export.rst:2
# 79c2690a14974ef88786d80cc6d1c5db
msgid "|LS| Import and Export"
msgstr ""

#: ../../postgis/import_export.rst:4
# 8273fe0c7eae4a999155f19ac4d9f450
msgid "Of course, a database with no easy way to migrate data into it and out of it would be no fun. Even more so for spatial data! Fortunately, there are a number of tools that will let you easily move data into and out of PostGIS."
msgstr ""

#: ../../postgis/import_export.rst:9
# b87cb8a306df412b8cc48e6d120bf470
msgid "shp2pgsql"
msgstr ""

#: ../../postgis/import_export.rst:11
# a4386b56b9c44cb2b9b77fdbb37aac5f
msgid "shp2pgsql is a commandline tool to import ESRI shapefiles to the database. Under Unix, you can use the following command for importing a new PostGIS table:"
msgstr ""

#: ../../postgis/import_export.rst:20
# 4aaccbe29d7f486ca548dbad0df60349
msgid "Under Windows, you have to perform the import process in two steps:"
msgstr ""

#: ../../postgis/import_export.rst:27
# 04cd80596e1e451b895f41e8c0dfecaf
msgid "You may encounter this error:"
msgstr ""

#: ../../postgis/import_export.rst:34
# 0d5ecb14b07846398da98912276370cd
msgid "This is a known issue regarding the creation *in situ* of a spatial index for the data you're importing. To avoid the error, exclude the :kbd:`-I` parameter. This will mean that no spatial index is being created directly, and you'll need to create it in the database after the data have been imported. (The creation of a spatial index will be covered in the next lesson.)"
msgstr ""

#: ../../postgis/import_export.rst:41
# c94bcd9657fc476e9b3e9e9ff90b5462
msgid "pgsql2shp"
msgstr ""

#: ../../postgis/import_export.rst:43
# 061262fc9e4a49da8c9503ad7afd8c97
msgid "pgsql2shp is a commandline tool to export PostGIS Tables, Views or SQL select queries. To do this under Unix:"
msgstr ""

#: ../../postgis/import_export.rst:51
# 2a57c25536d74324ba086793011c3708
msgid "To export the data using a query:"
msgstr ""

#: ../../postgis/import_export.rst:59
# 320f7fbbf4234903828ca27c3b3e6a75
msgid "ogr2ogr"
msgstr ""

#: ../../postgis/import_export.rst:61
# 651e1082f3414739ad92d823df862f2e
msgid "ogr2ogr is a very powerful tool to convert data into and from postgis to many data formats. ogr2ogr is part of the GDAL/OGR Software and has to be installed separately. To export a table from PostGIS to GML, you can use this command:"
msgstr ""

#: ../../postgis/import_export.rst:71
# 0c3e6fd561c34624924125e47b734afc
msgid "SPIT"
msgstr ""

#: ../../postgis/import_export.rst:73
# d92ec81fdf76457ab36a598f463f6a7e
msgid "SPIT is a QGIS plugin which is delivered with QGIS. You can use SPIT for uploading ESRI shapefiles to PostGIS."
msgstr ""

#: ../../postgis/import_export.rst:76
# 78ea6ebf2d3c45939b20be8404ec1e1e
msgid "Once you've added the SPIT plugin via the :guilabel:`Plugin Manager`, look for this button:"
msgstr ""

#: ../../postgis/import_export.rst:82
# deb65820b7b74a81871f4011886079db
msgid "Clicking on it will give you the SPIT dialog:"
msgstr ""

#: ../../postgis/import_export.rst:87
# 363bb567febb47f39a441213668f0052
msgid "You can add shapefiles to the database by clicking the :guilabel:`Add` button, which will give you a file browser window."
msgstr ""

#: ../../postgis/import_export.rst:93
# 06d09afd756d4ec7aea907f4a8045e18
msgid "Importing and exporting data to and from the database can be done in many various ways. Especially when using disparate data sources, you will probably use these functions (or others like them) on a regular basis."
msgstr ""

#: ../../postgis/import_export.rst:98
#: ../../postgis/simple_feature_model.rst:257
#: ../../postgis/spatial_functions.rst:249
#: ../../postgis/spatial_queries.rst:398
# 52d7a2fb741a4a7caa042e4078a83b37
# de478bd5a0b946a8bd650ce6a047967d
# ca404cace3b24640b8f47101b9b77f2f
# 880be7297c0c4fa9aeb490b0d2b78556
msgid "|WN|"
msgstr ""

#: ../../postgis/import_export.rst:100
# 50682640ca3c48529abe501d1870e64f
msgid "Next we'll look at how to query the data we've created before."
msgstr ""

#: ../../postgis/index.rst:3
# 0c00117c4a534b0aa2285ef09de19e45
msgid "|MOD| PostGIS"
msgstr ""

#: ../../postgis/index.rst:5
# aecb98b2aa2740baad60915cfaa6a414
msgid "PostGIS is an extension to PostgreSQL which allows it to handle and process geographic data. In this module, we'll learn how to set up and use the geographic functions that PostGIS offers."
msgstr ""

#: ../../postgis/index.rst:9
# db1041649bab4994bcf44884a36a4dca
msgid "While working through this section, you may want to keep a copy of the `PostGIS cheat sheet <../_static/postgis/postgis_cheatsheet.pdf>`_ available at `Boston GIS user group <http://www.bostongis.com/postgis_quickguide.bqg>`_. Another good friend is the `online <http://postgis.refractions.net/documentation/manual-1.5/>`_ PostGIS documentation."
msgstr ""

#: ../../postgis/index.rst:16
# 376e02045172475f9f0303f5e01c27aa
msgid "See also `PostGIS online <http://postgisonline.org/>`_."
msgstr ""

#: ../../postgis/simple_feature_model.rst:2
# 14ce62a638fe4b8ea4a6fc46a95d5910
msgid "|LS| Simple Feature Model"
msgstr ""

#: ../../postgis/simple_feature_model.rst:4
# 69c9580065684eb58e1077e5157d8c0c
msgid "How can we store and represent geographic features in a database? In this lesson we'll cover one approach, the Simple Feature Model as defined by the OGC."
msgstr ""

#: ../../postgis/simple_feature_model.rst:8
# 7e088e4fc83c45a9bef386430b66beb7
msgid "**The goal for this lesson:** To learn what the SFS Model is and how to use it."
msgstr ""

#: ../../postgis/simple_feature_model.rst:11
# adb7ea44930440c187a00a1bc6a9d096
msgid "What is OGC"
msgstr ""

#: ../../postgis/simple_feature_model.rst:13
# 07caf2dd3d674640a75c821023802916
msgid "The Open Geospatial Consortium (OGC), an international voluntary consensus standards organization, originated in 1994. In the OGC, more than 370+ commercial, governmental, nonprofit and research organizations worldwide collaborate in an open consensus process encouraging development and implementation of standards for geospatial content and services, GIS data processing and data sharing. *- Wikipedia*"
msgstr ""

#: ../../postgis/simple_feature_model.rst:21
# 4fa3e60de14241a18e50c607db5eaddb
msgid "What is the SFS Model"
msgstr ""

#: ../../postgis/simple_feature_model.rst:23
# 89d858ce74ce456694bd29ed0d0e7d61
msgid "The Simple Feature for SQL (SFS) Model is a *non-topological* way to store geospatial data in a database and defines functions for accessing, operating, and constructing these data."
msgstr ""

#: ../../postgis/simple_feature_model.rst:30
# 28f8b279368342ff8d73f3084b85241d
msgid "The model defines geospatial data from Point, Linestring, and Polygon types (and aggregations of them to Multi objects)."
msgstr ""

#: ../../postgis/simple_feature_model.rst:33
# 91f091da541c46bea8c9e6d0b681f8ed
msgid "For further information, have a look at the `OGC Simple Feature for SQL <http://www.opengeospatial.org/standards/sfs>`_ standard."
msgstr ""

#: ../../postgis/simple_feature_model.rst:37
# 04995bef56cb490d8738e26ec7b3f5e6
msgid "Add a geometry field to table"
msgstr ""

#: ../../postgis/simple_feature_model.rst:39
# 74dde82acb91453a839aa8703c9e869d
msgid "Let's add a point field to our people table:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:49
# 3bef74788ba848ddb716680d9028b4ed
msgid "Add a constraint based on geometry type"
msgstr ""

#: ../../postgis/simple_feature_model.rst:51
# 598fb1592ad245a9b6fe6e4c2483d9ec
msgid "You will notice that the geometry field type does not implicitly specify what *type* of geometry for the field - for that we need a constraint."
msgstr ""

#: ../../postgis/simple_feature_model.rst:60
# 05b04f8bebe34662b7b63a8f354b140c
msgid "What does that do? It adds a constraint to the table that prevents anything except a point geometry or a null."
msgstr ""

#: ../../postgis/simple_feature_model.rst:63
# f46d385019664a63bcd938a0a1d03194
msgid "Now you try:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:65
# 3dfeeb70dbf54811b2309a0d3813a3db
msgid "Create a new table called cities and give it some appropriate columns, including a geometry field for storing polygons (the city boundaries). Make sure it has a constraint enforcing geometries to be polygons."
msgstr ""

#: ../../postgis/simple_feature_model.rst:98
# 5d36dfa0188d433f91d89b8b2f9ec83b
msgid ":ref:`Check your results <simple-feature-1>`"
msgstr ""

#: ../../postgis/simple_feature_model.rst:104
# 5d31306eefa84b789836bd4e10ea03d0
msgid "Populate geometry_columns table"
msgstr ""

#: ../../postgis/simple_feature_model.rst:106
# a48931b94a73448ca8d368e8cc74e0e2
msgid "At this point you should also add an entry into the :kbd:`geometry_columns` table:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:114
# 40c487a5d9f44364a9044e24df1c55f6
msgid "Why? :kbd:`geometry_columns` is used by certain applications to be aware of which tables in the database contain geometry data."
msgstr ""

#: ../../postgis/simple_feature_model.rst:117
# a84f25aa3c6a461ebce197417336f45c
msgid "If the above :kbd:`INSERT` statement causes a complaint, run this query first:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:124
# 79e56269f0164f489d9e0d0631598ef4
msgid "If the column :kbd:`f_table_name` contains the value :kbd:`people`, then this table has already been registered and you don't need to do anything more."
msgstr ""

#: ../../postgis/simple_feature_model.rst:128
# 826d8ff6233e4bdc9d8d06fb5f6a2df3
msgid "The value :kbd:`2` refers to the number of dimensions; in this case, two: **x** and **y**."
msgstr ""

#: ../../postgis/simple_feature_model.rst:131
# 55bac7aca8e94b45b70c1c585daf5907
msgid "The value :kbd:`4326` refers to the projection we are using; in this case, WGS 84, which is referred to by the number 4326 (refer to the earlier discussion about the EPSG)."
msgstr ""

#: ../../postgis/simple_feature_model.rst:135
# f34e6f18f1654dfbade2d51fc1c87c43
msgid "Add an appropriate geometry_columns entry for your new cities layer"
msgstr ""

#: ../../postgis/simple_feature_model.rst:156
# 83adcaedc88749669296cbe09ebdd979
msgid ":ref:`Check your results <simple-feature-2>`"
msgstr ""

#: ../../postgis/simple_feature_model.rst:162
# aaa7566f385d48aabacd5e94fd87ac60
msgid "Add geometry record to table using SQL"
msgstr ""

#: ../../postgis/simple_feature_model.rst:164
# 05ffe20952404a30965fe4ae618af127
msgid "Now that our tables are geo-enabled, we can store geometries in them!"
msgstr ""

#: ../../postgis/simple_feature_model.rst:175
# 96f6689a9a5942799b8368eb447c275f
msgid "In the new entry above, you will need to specify which projection (SRID) you want to use. This is because you entered the geometry of the new point using a plain string of text, which does not automatically add the correct projection information. Obviously, the new point needs to use the same SRID as the dataset it is being added to, so you need to specify it."
msgstr ""

#: ../../postgis/simple_feature_model.rst:181
# 557705f04b084d769a6d5e47e55e09ff
msgid "If at this point you were using a graphical interface, for example, specifying the projection for each point would be automatic. In other words, you usually won't need to worry about using the correct projection for every point you want to add if you've already specified it for that dataset, as we did earlier."
msgstr ""

#: ../../postgis/simple_feature_model.rst:187
# db0550d19b494923834ebd7fa671bc3c
msgid "Now is probably a good time to fire up QGIS and try to view your :kbd:`people` table. Also, we should try editing / adding / deleting records and then performing select queries in the database to see how the data has changed."
msgstr ""

#: ../../postgis/simple_feature_model.rst:191
# 34080238dd8a4b2c9b65641db23d556e
msgid "To load a PostGIS layer in QGIS, use the :menuselection:`Layer --> Add PostGIS Layers` menu option or toolbar button:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:197
# 4dae0eef5bd04a2394775231ec36d63c
msgid "This will open the dialog:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:202
# 6890471535d0496c9b5da4c6d07b4784
msgid "Click on the :guilabel:`New` button to open this dialog:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:207
# df4fd76287eb4e1f823a943466bf15ae
msgid "Then define a new connection, e.g.:"
msgstr ""

#: ../../postgis/simple_feature_model.rst:219
# 1145d6100a0543bdb8a99cbd32b6b51c
msgid "To see whether QGIS has found the :kbd:`address` database and that your username and password are correct, click :guilabel:`Test Connect`. If it works, check the boxes next to :guilabel:`Save Username` and :guilabel:`Save Password`. Then click :guilabel:`OK` to create this connection."
msgstr ""

#: ../../postgis/simple_feature_model.rst:224
# 115a91128f08445db4153aa9b7630680
msgid "Back in the :guilabel:`Add PostGIS Layers` dialog, click :guilabel:`Connect` and add layers to your project as usual."
msgstr ""

#: ../../postgis/simple_feature_model.rst:227
# 6abf035f60844a4e96195b1e2c99dbe1
msgid "Formulate a query that shows a person's name, street name and position (from the the_geom column) as plain text."
msgstr ""

#: ../../postgis/simple_feature_model.rst:248
# 4d27cdcaad174670a0af96070ffae766
msgid ":ref:`Check your results <simple-feature-3>`"
msgstr ""

#: ../../postgis/simple_feature_model.rst:253
# de9626c033b3481b9fb696d9f228d434
msgid "You have seen how to add spatial objects to your database and view them in GIS software."
msgstr ""

#: ../../postgis/simple_feature_model.rst:259
# 3db2df361fdc4fcca740197e0802af6c
msgid "Next you'll see how to import data into, and export data from, your database."
msgstr ""

#: ../../postgis/spatial_functions.rst:2
# a3a38b7cb4da4848918a82cd35f2dd17
msgid "|LS| PostGIS Setup"
msgstr ""

#: ../../postgis/spatial_functions.rst:4
# 3507ec4a5666456289651677dcfb9e29
msgid "Setting up PostGIS functions will allow you to access spatial functions from within PostgreSQL."
msgstr ""

#: ../../postgis/spatial_functions.rst:7
# 6a1c3fb3b31142b48035a72b3af80fbd
msgid "**The goal for this lesson:** To install spatial functions and briefly demo their effects."
msgstr ""

#: ../../postgis/spatial_functions.rst:11
# 09b33b20091345659c5bf0555a823342
msgid "Installing under Ubuntu"
msgstr ""

#: ../../postgis/spatial_functions.rst:13
# cf68c8e04de4448e8026344356167ce9
msgid "Postgis is easily installed from apt."
msgstr ""

#: ../../postgis/spatial_functions.rst:20
# 7e5e127ed7644893aaa44f6000fc2334
msgid "Really, it's that easy..."
msgstr ""

#: ../../postgis/spatial_functions.rst:23
# 19e8548252744476bfa21708c255764d
msgid "Installing under Windows"
msgstr ""

#: ../../postgis/spatial_functions.rst:25
# c1fc265008a74ae2b2c59ede014e3c87
msgid "Visit `the download page <http://www.postgresql.org/download/>`_."
msgstr ""

#: ../../postgis/spatial_functions.rst:27
# cfa0b162fa8349aa8e4340420749ac82
msgid "Now follow `this guide <http://www.bostongis.com/PrinterFriendly.aspx?content_name=postgis_tut01>`_."
msgstr ""

#: ../../postgis/spatial_functions.rst:30
# b01ac142e68647fc91eb5c34dccd0a02
msgid "A little more complicated, but still not hard. Note that you need to be online to install the postgis stack."
msgstr ""

#: ../../postgis/spatial_functions.rst:34
# 65101ee661fe4032a206000287adea29
msgid "Install plpgsql"
msgstr ""

#: ../../postgis/spatial_functions.rst:36
# cd3f71944d56457bb59fc880ea494080
msgid "You can ensure that any database created on your system automatically gets these spatial extensions by running these commands (from this and the next two sections) on the :kbd:`template1` system database *before* you create any of your own databases."
msgstr ""

#: ../../postgis/spatial_functions.rst:41
# 4648155a7f164ef98a99af89038333db
msgid "PostgreSQL can use various procedural languages. What is a procedural language? It is an 'in database' language that can be used to extend the functionality of the database. For example you can write database functions that are called when events happen - such as when a record is inserted into the database. (Recall when this was done in the previous module.)"
msgstr ""

#: ../../postgis/spatial_functions.rst:47
# f7b8702c3f544cb3958ecb4c2dd898e1
msgid "PostGIS requires the PLPGSQL procedural language to be installed. So do this:"
msgstr ""

#: ../../postgis/spatial_functions.rst:55
# 5fb9ba6dc072478ba60ff15c84062a84
msgid "Where the third argument is the name of the database that the procedural language should be installed into."
msgstr ""

#: ../../postgis/spatial_functions.rst:58
# e7e0916da56a4d8db9cd1237e283a07b
msgid "You will need administrative permissions for your database to be able to do this."
msgstr ""

#: ../../postgis/spatial_functions.rst:62
# 7636e3d59aca4acdadf0bac38383e82b
msgid "Install postgis.sql"
msgstr ""

#: ../../postgis/spatial_functions.rst:64
# 3b415a47d22e4210a87c43da35670587
msgid "PostGIS can be thought of as a collection of in database functions that extend the core capabilities of PostgreSQL so that it can deal with spatial data. By 'deal with', we mean store, retrieve, query and manipulate. In order to do this, a number of functions are installed into the database. Do this:"
msgstr ""

#: ../../postgis/spatial_functions.rst:73
# 9a239c94fafa46138a85d0fc69a0cd4f
msgid "or"
msgstr ""

#: ../../postgis/spatial_functions.rst:79
# 6b2ee439f1864c83b79a74ec8a41e135
msgid "depending on which PostGIS version you have installed. Now do:"
msgstr ""

#: ../../postgis/spatial_functions.rst:85
# 37e896a01ff44f948cb4151fdc65a703
msgid "and, once you're in the psql prompt:"
msgstr ""

#: ../../postgis/spatial_functions.rst:91
# 25122e575f7a46408fce5dbc6951e6d6
msgid "We will discuss these functions in more detail as we proceed with this course."
msgstr ""

#: ../../postgis/spatial_functions.rst:94
# b850dc1aa1e94f31a6723ce9b7720233
msgid "Install spatial_refsys.sql"
msgstr ""

#: ../../postgis/spatial_functions.rst:96
# cba505406bdf4a5fa103b045ed7b56c5
msgid "In addition to the PostGIS functions, a second helper SQL script needs to be run that will load the database with a collection of spatial reference system (SRS) definitions as defined by the European Petroleum Survey Group (EPSG). These are used during operations such as coordinate reference system (CRS) conversions."
msgstr ""

#: ../../postgis/spatial_functions.rst:102
# 50e2fff6481d45c3b272110c27340af4
msgid "You can add more to the SRS list later if needed, but the list provided should cover just about every SRS you will need (Google Mercator and lo are notable exceptions)."
msgstr ""

#: ../../postgis/spatial_functions.rst:106
# 21b859f760e34fec9501d8af3d3a21d8
msgid "To load the SRS table, first ensure that you're at a normal prompt (i.e., quit the database first with :kbd:`\\q`), then do this:"
msgstr ""

#: ../../postgis/spatial_functions.rst:113
# 8f890986d6f0412a9c7fb0c3cb41be66
msgid "replacing :kbd:`1.5` with :kbd:`2.0` if necessary."
msgstr ""

#: ../../postgis/spatial_functions.rst:115
# 9fc4ca88566c4fd4bd54eee9bd3af065
msgid "The above command adds a table to our database. We can see the schema of this table by entering the following command in the psql prompt:"
msgstr ""

#: ../../postgis/spatial_functions.rst:122
# 16f9116d233a4ad7a14cefc389ff8ad8
msgid "The result should be this:"
msgstr ""

#: ../../postgis/spatial_functions.rst:137
# 2e07d7e2a9dd417793a97ec85e5f4169
msgid "You can use standard SQL queries (as we have learned from our introductory sections), to view and manipulate this table - though we suggest you do not update or delete any records unless you know what you are doing."
msgstr ""

#: ../../postgis/spatial_functions.rst:141
# b0599e7e55744f63aeca05cb7276b17e
msgid "One SRID you may be interested in is EPSG:4326 - the geographic / lat lon reference system using the WGS 84 ellipsoid. Let's take a look at it:"
msgstr ""

#: ../../postgis/spatial_functions.rst:148
# 4c5d38287ae243ff9fa243c815892238
msgid "Result"
msgstr ""

#: ../../postgis/spatial_functions.rst:162
# 7202c8f33457400daf3022e263ab35b7
msgid "The srtext is the projection definition in well known text (you may recognise this from .prj files in your shapefile collection)."
msgstr ""

#: ../../postgis/spatial_functions.rst:166
# 91a16a954918485782769b9a0adb4ba9
msgid "Looking at the installed PostGIS functions"
msgstr ""

#: ../../postgis/spatial_functions.rst:168
# b623a5484c6c4ed589021b90b4b340f4
msgid "Good - our PostgreSQL database is now geospatially enabled, thanks to PostGIS. We are going to delve a lot deeper into this in the coming days, but let's give you a quick little taster. Let's say we want to create a point from text. First we use the psql command to find functions relating to point:"
msgstr ""

#: ../../postgis/spatial_functions.rst:177
# 567bd26898564cb495f619f5fe495571
msgid "Here is one that caught my eye: :kbd:`st_pointfromtext`"
msgstr ""

#: ../../postgis/spatial_functions.rst:179
# b565c48c396445548ea1883a1cc702b9
msgid "So let's give that a try:"
msgstr ""

#: ../../postgis/spatial_functions.rst:185
#: ../../postgis/spatial_functions.rst:219
#: ../../postgis/spatial_queries.rst:25
#: ../../postgis/spatial_queries.rst:58
#: ../../postgis/spatial_queries.rst:179
#: ../../postgis/spatial_queries.rst:219
#: ../../postgis/spatial_queries.rst:320
# d0df341740744f529a146eba74bf2071
# 56ea5c8e45da45bfa480d6281e327399
# efc83fcc8efd4ce788664f42d2c3eb6b
# 4eb82e1fe98a45b19be0117aeea11dc7
# a50c81ff5c6a4c54a843c22a3b7a86ab
# a309e51a85ac4927952a740aba131d6d
# 44b780ab154644fda2cf2d01cbc93fa3
msgid "Result:"
msgstr ""

#: ../../postgis/spatial_functions.rst:194
# 019f7561a1d343f9a6948a8eb6ca5ce4
msgid "So there are a couple of interesting things going on here:"
msgstr ""

#: ../../postgis/spatial_functions.rst:196
# 212cbdd9607f4afb8e88ab307034368f
msgid "we defined a point at position 1,1 (EPSG:4326 is assumed) using :kbd:`POINT(1 1)`"
msgstr ""

#: ../../postgis/spatial_functions.rst:198
# 9f5d7fb25de84c32a24f5a0d6e05a88f
msgid "we ran an sql statement, but not on any table, just on data entered from the SQL prompt"
msgstr ""

#: ../../postgis/spatial_functions.rst:200
# 61867cb20d7741998249ffc60c8de529
msgid "the resulting row looks kinda strange"
msgstr ""

#: ../../postgis/spatial_functions.rst:202
# 6b679c1db3da47e3b193cd089972baeb
msgid "The resulting row is looking strange because its in the OGC format called 'Well Known Binary' (WKB) - more on that coming in the next section."
msgstr ""

#: ../../postgis/spatial_functions.rst:205
# 28eac90b714841d0b437fc6a89d5aba2
msgid "To get the results back as text, I do a quick scan through the function list for something that returns text:"
msgstr ""

#: ../../postgis/spatial_functions.rst:212
# 66ff98eb2acc42ecabcd0cf161afd1bd
msgid "One that catches my eye is :kbd:`st_astext`. Let's combine it with the previous query:"
msgstr ""

#: ../../postgis/spatial_functions.rst:228
# f6c1417e08c3436f98c0bb9822d75e9f
msgid "So what's happened here? We entered the string :kbd:`POINT(1,1)`, turned it into a point using :kbd:`st_pointfromtext()`, and turned it back into a human-readable form with :kbd:`st_astext()`, which gave us back our original string."
msgstr ""

#: ../../postgis/spatial_functions.rst:233
# c2aba56b90e44093904150638c8935fa
msgid "One last example before we really get into the detail of using PostGIS:"
msgstr ""

#: ../../postgis/spatial_functions.rst:239
# 00492beb12004756896ed3874a8acf1b
msgid "What did that do? It created a buffer of 1 degree around our point, and returned it as text. Nifty hey?"
msgstr ""

#: ../../postgis/spatial_functions.rst:245
# 148879c2e5d547f7a6922fc92fc9be52
msgid "You now have PostGIS functions installed in your copy of PostgreSQL. With this you'll be able to make use of PostGIS' extensive spatial functions."
msgstr ""

#: ../../postgis/spatial_functions.rst:251
# 9d99e2f672be40a18d84dd0b629e6224
msgid "Next you'll learn how spatial features are represented in a database."
msgstr ""

#: ../../postgis/spatial_queries.rst:2
# d693be232c604d5ba3fe00d867c67a7d
msgid "|LS| Spatial Queries"
msgstr ""

#: ../../postgis/spatial_queries.rst:4
# 150104dc0b2446ad9bbed104bb2b1955
msgid "Spatial queries are no different from other database queries. You can use the geometry column like any other database column. With the installation of PostGIS in our database, we have additional functions to query our database."
msgstr ""

#: ../../postgis/spatial_queries.rst:8
# f2e921e84174437696346d65f8c21cd0
msgid "**The goal for this lesson:** To see how spatial functions are implemented similarly to \"normal\" non-spatial functions."
msgstr ""

#: ../../postgis/spatial_queries.rst:14
# b7f055a053d6458f950359f30f5f3e5b
msgid "Spatial Operators"
msgstr ""

#: ../../postgis/spatial_queries.rst:16
# 17118ef31e5c4e709e852d281cbe3605
msgid "When you want to know which points are within a distance of 2 degrees to a point(X,Y) you can do this with:"
msgstr ""

#: ../../postgis/spatial_queries.rst:34
# 52d333de6ed345e9946f0dcf41dc92b2
msgid "the_geom value above was truncated for space on this page. If you want to see the point in human-readable coordinates, try something similar to what you did in the section \"View a point as WKT\", above."
msgstr ""

#: ../../postgis/spatial_queries.rst:38
# 287bacfd43a34c6ca571da12176236e1
msgid "How do we know that the query above returns all the points within 2 *degrees*? Why not 2 *meters*? Or any other unit, for that matter?"
msgstr ""

#: ../../postgis/spatial_queries.rst:41
# e5454f95b2614c1dbded97decc0fea10
msgid ":ref:`Check your results <spatial-queries-1>`"
msgstr ""

#: ../../postgis/spatial_queries.rst:46
# 32b46ddcb0f44865a7ca38e3fcd08458
msgid "Spatial Indexes"
msgstr ""

#: ../../postgis/spatial_queries.rst:48
# d2b079c748d94549a3543a73eb07a122
msgid "We also can define spatial indexes. A spatial index makes your spatial queries much faster. To create a spatial index on the geometry column use:"
msgstr ""

#: ../../postgis/spatial_queries.rst:85
# 9ad21940f74d4c4bb74ef8149bba48c3
msgid "Now you try - modify the cities table so its geometry column is spatially indexed."
msgstr ""

#: ../../postgis/spatial_queries.rst:115
# 390a3c7b00d64d9cad706809bdeccd73
msgid ":ref:`Check your results <spatial-queries-2>`"
msgstr ""

#: ../../postgis/spatial_queries.rst:119
# 43c9553e433d4e80bc8534a325504a1e
msgid "PostGIS Spatial Functions Demo"
msgstr ""

#: ../../postgis/spatial_queries.rst:121
# d9f553d54ab34d45aa1798dc70b511d8
msgid "In order to demo PostGIS spatial functions, we'll create a new database containing some (fictional) data."
msgstr ""

#: ../../postgis/spatial_queries.rst:124
# 23021dcd849841ddb9bb4216f5981287
msgid "To start, create a new database:"
msgstr ""

#: ../../postgis/spatial_queries.rst:130
# c1f19171a0f9405190ad7ee8f6d73f21
msgid "Remember to install PLPGSQL:"
msgstr ""

#: ../../postgis/spatial_queries.rst:136
# 82ff26274b034104a760cfd9c7c47ed5
msgid "Then install the PostGIS functions and the spatial reference system. For example, on Linux with PostgreSQL 9.1 and PostGIS 1.5:"
msgstr ""

#: ../../postgis/spatial_queries.rst:144
# d543954fe8bd48cdb91a06aecf570ccb
msgid "Next, import the data provided in the :kbd:`exercise_data/postgis/` directory. Refer back to the previous lesson for instructions. You can import from the terminal or via SPIT. Import the files into the following database tables:"
msgstr ""

#: ../../postgis/spatial_queries.rst:148
# 4047de9e1ff14d5b97c45adb18450f4f
msgid ":kbd:`points.shp` = :kbd:`building`"
msgstr ""

#: ../../postgis/spatial_queries.rst:149
# 411dafdcf56b41f98754631bf206c4ed
msgid ":kbd:`lines.shp` = :kbd:`road`"
msgstr ""

#: ../../postgis/spatial_queries.rst:150
# d98429d19d7845b8aece08b2a5534c9c
msgid ":kbd:`polygons.shp` = :kbd:`region`"
msgstr ""

#: ../../postgis/spatial_queries.rst:152
# cc148d8c28e44c3d8aada47b8bc46a12
msgid "Load these three database layers into QGIS via the :guilabel:`Add PostGIS Layers` dialog, as usual. When you open their attribute tables, you'll note that they have both an :kbd:`id` field and a :kbd:`gid` field created by the PostGIS import."
msgstr ""

#: ../../postgis/spatial_queries.rst:157
# 8905fbe00a0442dbb7fa274312448afc
msgid "Now that the tables are imported, we can use PostGIS to query the data. Go back to your terminal (command line) and enter the psql prompt by doing:"
msgstr ""

#: ../../postgis/spatial_queries.rst:164
# b768d119ac2540a5825c5dfa54424f68
msgid "We'll demo some of these select statements by creating views from them, so that you can open them in QGIS and see the results."
msgstr ""

#: ../../postgis/spatial_queries.rst:168
# 6bdf22d4fa8a44248a92e2c38fb030cb
msgid "Select by location"
msgstr ""

#: ../../postgis/spatial_queries.rst:170
# 0e7bf942552e4bb4ae7d8aeb41354a57
msgid "Get all the buildings in the KwaZulu region."
msgstr ""

#: ../../postgis/spatial_queries.rst:192
# 99be1f23d06e452abd2b2946a8a15e43
msgid "Or, if we create a view from it:"
msgstr ""

#: ../../postgis/spatial_queries.rst:202
# e83da8a55e61449a9219a802848daf11
msgid "And view it in QGIS:"
msgstr ""

#: ../../postgis/spatial_queries.rst:208
# eb704313a0a1453da0f1d3ecd188bd54
msgid "Select neighbors"
msgstr ""

#: ../../postgis/spatial_queries.rst:210
# cf282311a203405988c59a5595b231a9
msgid "Show a list of all the names of regions adjoining the Hokkaido region."
msgstr ""

#: ../../postgis/spatial_queries.rst:230
# 9efd30fae7b0438ea0f0b1c0378c949a
msgid "As a view:"
msgstr ""

#: ../../postgis/spatial_queries.rst:240
#: ../../postgis/spatial_queries.rst:285
# 32dfd606e6c74080987dad11968360c7
# db66227bdf13427fa9ed9c34c9025612
msgid "In QGIS:"
msgstr ""

#: ../../postgis/spatial_queries.rst:245
# 80cde20ab6664848b61348c35de4f1b7
msgid "Note the missing region (Queensland). This may be due to a topology error. Artifacts such as this can alert us to potential problems in the data. To solve this enigma without getting caught up in the anomalies the data may have, we could use a buffer intersect instead:"
msgstr ""

#: ../../postgis/spatial_queries.rst:257
# ff68a6a3176e43b9b5d279e09baee235
msgid "This creates a buffer of 100 meters around the region Hokkaido."
msgstr ""

#: ../../postgis/spatial_queries.rst:259
# c8a386290a9a4292bea0fd8f6d7c40b7
msgid "The darker area is the buffer:"
msgstr ""

#: ../../postgis/spatial_queries.rst:264
# 73dcebb0e1be457a8a42a07eaf2289bd
msgid "Select using the buffer:"
msgstr ""

#: ../../postgis/spatial_queries.rst:279
# 4b374578336c44079529619a25881ee0
msgid "In this query, the original buffer view is used as any other table would be. It is given the alias :kbd:`a`, and its geometry field, :kbd:`a.the_geom`, is used to select any polygon in the :kbd:`region` table (alias :kbd:`b`) that intersects it. However, Hokkaido itself is excluded from this select statement, because we don't want it; we only want the regions adjoining it."
msgstr ""

#: ../../postgis/spatial_queries.rst:290
# 208305f5f1144c9d9a2a9c7ea2c0bb53
msgid "It is also possible to select all objects within a given distance, without the extra step of creating a buffer:"
msgstr ""

#: ../../postgis/spatial_queries.rst:302
# 2760a54257ed40dd8a569a1fcb84d2d8
msgid "This achieves the same result, without need for the interim buffer step:"
msgstr ""

#: ../../postgis/spatial_queries.rst:309
# f34090ab445d47c68dea314394b37d6a
msgid "Select uniques"
msgstr ""

#: ../../postgis/spatial_queries.rst:311
# 8cd899c50c214cf4b65e9f19e82aacdc
msgid "Show a list of unique town names for all buildings in the Queensland region."
msgstr ""

#: ../../postgis/spatial_queries.rst:333
# 7b484903606746eb82029687dbe896ac
msgid "Further examples ..."
msgstr ""

#: ../../postgis/spatial_queries.rst:394
# 02b8cf52bab848aaa70bd53e491d5867
msgid "You have seen how to query spatial objects using the new database functions from PostGIS."
msgstr ""

#: ../../postgis/spatial_queries.rst:400
# eac050cc057e49f7a4be7e4eb2ec693e
msgid "Next we're going to investigate the structures of more complex geometries and how to create them using PostGIS."
msgstr ""

