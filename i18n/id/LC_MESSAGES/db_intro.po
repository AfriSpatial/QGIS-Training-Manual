# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-07-18 19:25\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# 7d96d4103b3b4faa8f7b7a4460549c0f
#: ..\..\postgres\db_intro.rst:2
msgid "|LS| Introduction to Databases"
msgstr ""

# 799cad672c0b4b5ab1d3de4c7915ec31
#: ..\..\postgres\db_intro.rst:4
msgid ""
"Before using PostgreSQL, let's make sure of our ground by covering general "
"database theory. You will not need to enter any of the example code; it's "
"only there for illustration purposes."
msgstr ""

# e75752e9b2cd41158fe3171e62541169
#: ..\..\postgres\db_intro.rst:8
msgid ""
"**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

# b89ee3a8b65143de91d112818d762134
#: ..\..\postgres\db_intro.rst:11
msgid "What is a Database?"
msgstr ""

# cd9875ca0cc74fbd9801e00d9ce3ac07
#: ..\..\postgres\db_intro.rst:13
msgid ""
"A database consists of an organized collection of data for one or more uses, "
"typically in digital form. *- Wikipedia*"
msgstr ""

# 9b2e6d7d37b24b94802587af878b0d2e
#: ..\..\postgres\db_intro.rst:18
msgid ""
"A database management system (DBMS) consists of software that operates "
"databases, providing storage, access, security, backup and other facilities. "
"*- Wikipedia*"
msgstr ""

# e56499b780a5410ba95fc19fe19309fd
#: ..\..\postgres\db_intro.rst:23
msgid "Tables"
msgstr ""

# 4b4977cdca674a4e998e0297ab34d9e0
#: ..\..\postgres\db_intro.rst:25
msgid ""
"In relational databases and flat file databases, a table is a set of data "
"elements (values) that is organized using a model of vertical columns (which "
"are identified by their name) and horizontal rows. A table has a specified "
"number of columns, but can have any number of rows. Each row is identified "
"by the values appearing in a particular column subset which has been "
"identified as a candidate key. *- Wikipedia*"
msgstr ""

# 426e3b00e5814d2baf25579a254235bc
#: ..\..\postgres\db_intro.rst:40
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

# ae0c23089a2b47778615f2a66929fe40
#: ..\..\postgres\db_intro.rst:43
msgid "Columns / Fields"
msgstr ""

# f18e30d1af4c4dd7988ee10142fd66ad
#: ..\..\postgres\db_intro.rst:45
msgid ""
"A column is a set of data values of a particular simple type, one for each "
"row of the table. The columns provide the structure according to which the "
"rows are composed. The term field is often used interchangeably with column, "
"although many consider it more correct to use field (or field value) to "
"refer specifically to the single item that exists at the intersection "
"between one row and one column. *- Wikipedia*"
msgstr ""

# 25f55589842b4cd7b86a90d69051ab2a
#: ..\..\postgres\db_intro.rst:52
msgid "A column:"
msgstr ""

# 56b470592b7149169386bc769ef18fc4
#: ..\..\postgres\db_intro.rst:61
msgid "A field:"
msgstr ""

# f420570c3e3241748faf94bb45953397
#: ..\..\postgres\db_intro.rst:68
msgid "Records"
msgstr ""

# b3bf8dadcb13444a812db99fd7f758eb
#: ..\..\postgres\db_intro.rst:70
msgid ""
"A record is the information stored in a table row. Each record will have a "
"field for each of the columns in the table."
msgstr ""

# c4a5d707dd9243eb85359c5753ee2a0c
#: ..\..\postgres\db_intro.rst:78
msgid "Datatypes"
msgstr ""

# fcbda56d5ac847a391832e6cab1790c9
#: ..\..\postgres\db_intro.rst:80
msgid ""
"Datatypes restrict the kind of information that can be stored in a column. "
"*- Tim and Horst*"
msgstr ""

# 8504ded42d6d42f5a29958a721851c11
#: ..\..\postgres\db_intro.rst:83
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

# 4fb94be771d94fabbc410d5792f6e8e5
#: ..\..\postgres\db_intro.rst:85
msgid "String - to store free-form text data"
msgstr ""

# dbf33474a213440695ce65d755fa384e
#: ..\..\postgres\db_intro.rst:86
msgid "Integer - to store whole numbers"
msgstr ""

# 5bc3c1f847354ae897aff85ba4d2d7b0
#: ..\..\postgres\db_intro.rst:87
msgid "Real - to store decimal numbers"
msgstr ""

# 82e1756d51f64efc9eb58c225938055b
#: ..\..\postgres\db_intro.rst:88
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

# f184a1b81b5e44a897175da8571bae9f
#: ..\..\postgres\db_intro.rst:89
msgid "Boolean - to store simple true/false values"
msgstr ""

# ca3d0900994c49dc84b0a0f45a1fca52
#: ..\..\postgres\db_intro.rst:91
msgid ""
"You can tell the database to allow you to also store nothing in a field. If "
"there is nothing in a field, then the field content is referred to as a "
"**'null' value**."
msgstr ""

# e62d28e229214bedbe212731c30a9db3
#: ..\..\postgres\db_intro.rst:111
msgid ""
"There are many more datatypes you can use - `check the PostgreSQL manual! "
"<http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

# ac9c39f2c9c34e01ac247cfeea5c4c2d
#: ..\..\postgres\db_intro.rst:115
msgid "Modelling an Address Database"
msgstr ""

# 6279292f152745c9a9aa615996fd9b89
#: ..\..\postgres\db_intro.rst:117
msgid ""
"Let's use a simple case study to see how a database is constructed. We want "
"to create an address database. What kind of information should we store?"
msgstr ""

# e759f3b43a57429eaf03aa4d42689358
#: ..\..\postgres\db_intro.rst:120
msgid "Write some address properties in the space provided:"
msgstr ""

# bc3a095d31a240aea872bed7cb42af12
#: ..\..\postgres\db_intro.rst:155
msgid ""
"The properties that describe an address are the columns. The type of "
"information stored in each column is its datatype. In the next section we "
"will analyse our conceptual address table to see how we can make it better!"
msgstr ""

# f6cfeb7c289c4a6392c775ca5e148212
#: ..\..\postgres\db_intro.rst:160
msgid "Database Theory"
msgstr ""

# 91029b1ee7c54bfbbef4a156cc6c9b26
#: ..\..\postgres\db_intro.rst:162
msgid ""
"The process of creating a database involves creating a model of the real "
"world; taking real world concepts and representing them in the database as "
"entities."
msgstr ""

# b2a6e78c09fc4bbfac99a36a77d8b1b8
#: ..\..\postgres\db_intro.rst:166
msgid "Normalisation"
msgstr ""

# 506ca596110b42eca4972bd4d65aa447
#: ..\..\postgres\db_intro.rst:168
msgid ""
"One of the main ideas in a database is to avoid data duplication / "
"redundancy. The process of removing redundancy from a database is called "
"Normalisation."
msgstr ""

# 745f048c743a4f4db9752b04e9150b76
#: ..\..\postgres\db_intro.rst:171
msgid ""
"Normalization is a systematic way of ensuring that a database structure is "
"suitable for general-purpose querying and free of certain undesirable "
"characteristics - insertion, update, and deletion anomalies - that could "
"lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

# fd7638e8b29a44abbd60434a5e9025f5
#: ..\..\postgres\db_intro.rst:176
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

# fbc16eadcef446e29d01b46774f6746f
#: ..\..\postgres\db_intro.rst:178
msgid "Let's take a look at a simple example:"
msgstr ""

# fec76bb37f28400bb5dad3ec32c9c751
#: ..\..\postgres\db_intro.rst:203
msgid ""
"Imagine you have many friends with the same street name or city. Every time "
"this data is duplicated, it consumes space. Worse still, if a city name "
"changes,  you have to do a lot of work to update your database."
msgstr ""

# fd27fe0c4fd84470895c5bf22bfcea3e
#: ..\..\postgres\db_intro.rst:207
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

# ab696b2fa18443459eb1b91abd55fcd4
#: ..\..\postgres\db_intro.rst:237
msgid ""
"You can read more about database normalisation `here <http://en.wikipedia."
"org/wiki/Database_normalization>`_"
msgstr ""

# c0ab50bcce7f4b2bb602792cef0476fc
#: ..\..\postgres\db_intro.rst:241
msgid "Indexes"
msgstr ""

# 509baea8d04d4410b2b98be70746fe07
#: ..\..\postgres\db_intro.rst:243
msgid ""
"A database index is a data structure that improves the speed of data "
"retrieval operations on a database table. *- Wikipedia*"
msgstr ""

# d1ef6cb3099a4ae5b3d706ff0da6c43b
#: ..\..\postgres\db_intro.rst:246
msgid ""
"Imagine you are reading a textbook and looking for the explanation of a "
"concept - and the textbook has no index! You will have to start reading at "
"one cover and work your way through the entire book until you find the "
"information you need. The index at the back of a book helps you to jump "
"quickly to the page with the relevant information."
msgstr ""

# b7da9b9e6de94366802f6faf48995841
#: ..\..\postgres\db_intro.rst:256
msgid "Now searches on name will be faster:"
msgstr ""

# 4a1d517bee7f448981e2bea14475a438
#: ..\..\postgres\db_intro.rst:274
msgid "Sequences"
msgstr ""

# 1a9499ee96eb4185ace05b3bc439c87a
#: ..\..\postgres\db_intro.rst:276
msgid ""
"A sequence is a unique number generator. It is normally used to create a "
"unique identifier for a column in a table."
msgstr ""

# 6917f4832d0b4912b0ebe6234592e669
#: ..\..\postgres\db_intro.rst:279
msgid ""
"In this example, id is a sequence - the number is incremented each time a "
"record is added to the table:"
msgstr ""

# 852241bcd28e4960ab8160e350b7293c
#: ..\..\postgres\db_intro.rst:290
msgid "Entity Relationship Diagramming"
msgstr ""

# 4bcaefc5b3f344d497d17058c47c1bac
#: ..\..\postgres\db_intro.rst:292
msgid ""
"In a normalised database, you typically have many relations (tables). The "
"entity-relationship diagram (ER Diagram) is used to design the logical "
"dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

# de12ddc3c70641a0b75fd8c33aa93faa
#: ..\..\postgres\db_intro.rst:305
msgid ""
"With a little work we can split it into two tables, removing the need to "
"repeat the street name for individuals who live in the same street:"
msgstr ""

# 1fc6670985074a36a9f561ea24a24a57
#: ..\..\postgres\db_intro.rst:316
msgid "and"
msgstr ""

# 8d600be734e5409f8fed711cf10a3667
#: ..\..\postgres\db_intro.rst:326
msgid ""
"We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:"
"`people.streets_id`."
msgstr ""

# af28ccaf2ccc4f0aa7776e6ea63e2f4b
#: ..\..\postgres\db_intro.rst:329
msgid ""
"If we draw an ER Diagram for these two tables it would look something like "
"this:"
msgstr ""

# a17fe3248c3e4732a75d6e2e757d3f44
#: ..\..\postgres\db_intro.rst:335
msgid ""
"The ER Diagram helps us to express 'one to many' relationships. In this case "
"the arrow symbol show that one street can have many people living on it."
msgstr ""

# 22719ac0fc474d4d8c1c40abdb0b553c
#: ..\..\postgres\db_intro.rst:338
msgid ""
"Our people model still has some normalisation issues - try to see if you can "
"normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

# b4a5f473698f4492abd9d33ce6f4e070
#: ..\..\postgres\db_intro.rst:370
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

# 6471445807f14fa2bc93ed5c926e461d
#: ..\..\postgres\db_intro.rst:372
msgid ""
"A database constraint is used to ensure that data in a relation matches the "
"modeller's view of how that data should be stored. For example a constraint "
"on your postal code could ensure that the number falls between :kbd:`1000` "
"and :kbd:`9999`."
msgstr ""

# a0b31681e7644528a1f8889834e2c85b
#: ..\..\postgres\db_intro.rst:377
msgid ""
"A Primary key is one or more field values that make a record unique. Usually "
"the primary key is called id and is a sequence."
msgstr ""

# 6ad240a870ce49a49b8cd373adeafbcc
#: ..\..\postgres\db_intro.rst:380
msgid ""
"A Foreign key is used to refer to a unique record on another table (using "
"that other table's primary key)."
msgstr ""

# 9434df70672b45788889e96d76b5f309
#: ..\..\postgres\db_intro.rst:383
msgid ""
"In ER Diagramming, the linkage between tables is normally based on Foreign "
"keys linking to Primary keys."
msgstr ""

# 72ad460bdf1748bca0e7b970bbbccf43
#: ..\..\postgres\db_intro.rst:386
msgid ""
"If we look at our people example, the table definition shows that the street "
"column is a foreign key that references the primary key on the streets table:"
msgstr ""

# 398cc7b4acfa48e7b89e2c7b7a31d67f
#: ..\..\postgres\db_intro.rst:406
msgid "Transactions"
msgstr ""

# 9e599796e002483ead235e6db7ead6cb
#: ..\..\postgres\db_intro.rst:408
msgid ""
"When adding, changing, or deleting data in a database, it is always "
"important that the database is left in a good state if something goes wrong. "
"Most databases provide a feature called transaction support. Transactions "
"allow you to create a rollback position that you can return to if your "
"modifications to the database did not run as planned."
msgstr ""

# d297d2cd9a4444ef9f994d87d1b1e8a1
#: ..\..\postgres\db_intro.rst:414
msgid ""
"Take a scenario where you have an accounting system. You need to transfer "
"funds from one account and add them to another. The sequence of steps would "
"go like this:"
msgstr ""

# f0ca045a5e1b4b77a68f37b1fb34424a
#: ..\..\postgres\db_intro.rst:418
msgid "remove R20 from Joe"
msgstr ""

# dfa668c1a5c148d697ffa93b94eafd18
#: ..\..\postgres\db_intro.rst:419
msgid "add R20 to Anne"
msgstr ""

# 4c7d1fc0a3274c15a953295bb2888e03
#: ..\..\postgres\db_intro.rst:421
msgid ""
"If something goes wrong during the process (e.g. power failure), the "
"transaction will be rolled back."
msgstr ""

# 67db1deab95641b6b346a3e213821ad7
#: ..\..\postgres\db_intro.rst:425
msgid "|IC|"
msgstr ""

# 202cc927fa4c462cab79487e5e0edf1d
#: ..\..\postgres\db_intro.rst:427
msgid ""
"Databases allow you to manage data in a structured way using simple code "
"structures."
msgstr ""

# a06e9229acf34724b7ca7c98677db4e2
#: ..\..\postgres\db_intro.rst:431
msgid "|WN|"
msgstr ""

# b029c4003654442e97edfbd8bbaea45c
#: ..\..\postgres\db_intro.rst:433
msgid ""
"Now that we've looked at how databases work in theory, let's create a new "
"database to implement the theory we've covered."
msgstr ""
