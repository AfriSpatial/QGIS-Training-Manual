# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-07-20 09:16\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# 22d53c98646f4fde8d0b4590147d40bb
#: ../../postgis/geometry.rst:2
msgid "|LS| Geometry Construction"
msgstr ""

# 369b665d4bbb4580b3e69dbfcce5b069
#: ../../postgis/geometry.rst:4
msgid ""
"In this section we are going to delve a little deeper into how simple "
"geometries are constructed in SQL. In reality, you will probably use a GIS "
"like QGIS to create complex geometries using their digitising tools; "
"however, understanding how they are formulated can be handy for writing "
"queries and understanding how the database is assembled."
msgstr ""

# 736f3f487f914a05bb9a406c9fc5e48c
#: ../../postgis/geometry.rst:10
msgid ""
"**The goal of this lesson:** To better understand how to create spatial "
"entities directly in PostgreSQL/PostGIS."
msgstr ""

# f6415e31acdf4e92b315dbfd84aa6215
#: ../../postgis/geometry.rst:16
msgid "Creating Linestrings"
msgstr ""

# 781a2680857c42ceae60682b8b0c4581
#: ../../postgis/geometry.rst:18
msgid ""
"Before we start, let's get our streets table matching the others; i.e., "
"having a constraint on the geometry, an index and an entry in the "
"geometry_columns table."
msgstr ""

# 3e6967a2f437446fb0d325a16fb9b306
#: ../../postgis/geometry.rst:22
msgid "Exercise:"
msgstr ""

# 23c550c0eb4849b0a309c9307c2b602b
#: ../../postgis/geometry.rst:24
msgid ""
"Modify the streets table so that it has a geometry column of type "
"ST_LineString."
msgstr ""

# 0a041116b68d442db6ac27b0c640966a
#: ../../postgis/geometry.rst:26
msgid ""
"Don't forget to do the accompanying update to the geometry columns table!"
msgstr ""

# 62d2c1421fb24a1180797888193182fe
#: ../../postgis/geometry.rst:28
msgid ""
"Also add a constraint to prevent any geometries being added that are not "
"LINESTRINGS or null."
msgstr ""

# 87ba9b5156c042008ee5cd5441e73887
#: ../../postgis/geometry.rst:30
msgid "Create a spatial index on the new geometry column"
msgstr ""

# 7b27b7b4f3c742bebdbee21d352dd401
#: ../../postgis/geometry.rst:57
msgid ":ref:`Check your results <geometry-1>`"
msgstr ""

# 7ea11bbfe0c943a78ad9f30da69f1913
#: ../../postgis/geometry.rst:59
msgid ""
"Now let's insert a linestring into our streets table. In this case I am "
"going to update an existing street record:"
msgstr ""

# f0b05d6b25264175aa2b1b54a53cb93e
#: ../../postgis/geometry.rst:67
msgid ""
"Take a look at the results in QGIS. (You may need to right-click on the "
"streets layer in the 'Layers' panel, and choose 'Zoom to layer extent'.)"
msgstr ""

# 5a8e50dd4c074c5ebd7c3ae5aa90b459
#: ../../postgis/geometry.rst:70
msgid ""
"Now create some more streets entries - some in QGIS and some from the "
"command line."
msgstr ""

# 07ea6cf7bc6d470684d0247a44e54243
#: ../../postgis/geometry.rst:75
msgid "Creating Polygons"
msgstr ""

# be82b4d3949f43358e698f97098dd071
#: ../../postgis/geometry.rst:77
msgid ""
"Creating polygons is just as easy. One thing to remember is that by "
"definition, polygons have at least four vertices, with the last and first "
"being co-located."
msgstr ""

# ea8caf4a267b4f49beae4723a1110068
#: ../../postgis/geometry.rst:85
msgid ""
"A polygon requires double brackets around its coordinate list; this is to "
"allow you to add complex polygons with multiple unconnected areas. For "
"instance:"
msgstr ""

# 5d792252b8c0494daaa827d23b891bcb
#: ../../postgis/geometry.rst:95
msgid ""
"If you followed this step, you can check what it did by loading the cities "
"dataset into QGIS, opening its attribute table, and selecting the new entry. "
"Note how the two new polygons behave like one polygon."
msgstr ""

# c2f245b7347546fc85ea31d7380e6b12
#: ../../postgis/geometry.rst:103
msgid "Exercise: Linking Cities to People"
msgstr ""

# 15ee12d814394be9bf7dd88c954923e9
#: ../../postgis/geometry.rst:105
msgid "For this exercise you should do the following:"
msgstr ""

# dc5c8e8b35e3430e9f9e781fa3c067fe
#: ../../postgis/geometry.rst:107
msgid ""
"Delete all data from your people table. Add a foreign key column to people "
"that references the primary key of the cities table. Use QGIS to capture "
"some cities. Use SQL to insert some new people records, ensuring that each "
"has an associated street and city."
msgstr ""

# f664560243ff42e990203dd60d1c69f6
#: ../../postgis/geometry.rst:114
msgid "Your updated people schema should look something like this:"
msgstr ""

# 9f9b25bfae874b51ad90b1b407714cbd
#: ../../postgis/geometry.rst:171
msgid ":ref:`Check your results <geometry-2>`"
msgstr ""

# 9c504a6d958a40c3b9effe8f5fd68332
#: ../../postgis/geometry.rst:175
msgid "Looking at our schema"
msgstr ""

# 13f728fad6294e85946daab419888c1e
#: ../../postgis/geometry.rst:177
msgid "By now our schema should be looking like this:"
msgstr ""

# 5430c5015336442a9b82f85827f5a0f0
#: ../../postgis/geometry.rst:196
msgid "Access Subobjects"
msgstr ""

# 14f6ebb1324549e4b8f14febe2887920
#: ../../postgis/geometry.rst:198
msgid ""
"With the SFS-Model functions, you have a wide variety of options to access "
"subobjects of SFS Geometries. When you want to select the first vertex point "
"of every polygon geometry in the table myPolygonTable, you have to do this "
"in this way:"
msgstr ""

# a95180cb60cd4c93986e7815d01b9cda
#: ../../postgis/geometry.rst:203
msgid "Transform the polygon boundary to a linestring:"
msgstr ""

# cd2a258517c8424bbac5801db1384f20
#: ../../postgis/geometry.rst:209
msgid "select the first vertex point of the resultant linestring:"
msgstr ""

# 200dd002a9364236ad61d037d9255398
#: ../../postgis/geometry.rst:219
msgid "Data Processing"
msgstr ""

# a3804d6260c04add8f29cf9155f9162d
#: ../../postgis/geometry.rst:221
msgid ""
"PostGIS supports all OGC SFS/MM standard conform functions. All these "
"functions start with ``ST_``."
msgstr ""

# 1ef273cf2fe34430957ede4838512c1c
#: ../../postgis/geometry.rst:225
msgid "Clipping"
msgstr ""

# d5c8794810724ff69bcc122dcbeb81eb
#: ../../postgis/geometry.rst:227
msgid ""
"To clip a subpart of your data you can use the :kbd:`ST_INTERSECT()` "
"function. To avoid empty geometries, use:"
msgstr ""

# 01f6fa6c1dd9451880032d227d9ca91c
#: ../../postgis/geometry.rst:248
msgid "Building Geometries from Other Geometries"
msgstr ""

# ab4cde49745d42e799dd2891c09eb216
#: ../../postgis/geometry.rst:250
msgid ""
"From a given point table, you want to generate a linestring. The order of "
"the points is defined by their :kbd:`id`. Another ordering method could be a "
"timestamp, such as the one you get when you capture waypoints with a GPS "
"receiver."
msgstr ""

# b688e6cf38af4723a2cf5d2c093c4346
#: ../../postgis/geometry.rst:258
msgid ""
"To create a linestring from a new point layer called 'points', you can run "
"the following command:"
msgstr ""

# 4217df89c7824c909de3c2c559f40895
#: ../../postgis/geometry.rst:270
msgid ""
"To see how it works without creating a new layer, you could also run this "
"command on the 'people' layer, although of course it would make little real-"
"world sense to do this."
msgstr ""

# 338f778e749d41fe92b670a75b55d388
#: ../../postgis/geometry.rst:278
msgid "Geometry Cleaning"
msgstr ""

# e445f51c53824e058e1fbbced562946a
#: ../../postgis/geometry.rst:280
msgid ""
"You can get more information for this topic in `this blog entry <http://"
"linfiniti.com/?s=cleangeometry>`_."
msgstr ""

# 0c400b6cc22c41de9241a1a654bb75ce
#: ../../postgis/geometry.rst:284
msgid "Differences between tables"
msgstr ""

# 8eca27b290d040cfa693b5310eb3c4ce
#: ../../postgis/geometry.rst:286
msgid ""
"To detect the difference between two tables with the same structure, you can "
"use the PostgreSQL keyword :kbd:`EXCEPT`."
msgstr ""

# 31430507860b46adb769c421be29a1f7
#: ../../postgis/geometry.rst:295
msgid ""
"As the result, you will get all records from table_a which are not stored in "
"table_b."
msgstr ""

# 14c2204df6014282b59f70e7784b321f
#: ../../postgis/geometry.rst:299
msgid "Tablespaces"
msgstr ""

# e78586f00a804c4baae3aad44e2d17cf
#: ../../postgis/geometry.rst:301
msgid ""
"You can define where postgres should store its data on disk by creating "
"tablespaces."
msgstr ""

# 1877ccf5c9e849cba0e7860e3dcaf6fa
#: ../../postgis/geometry.rst:308
msgid ""
"When you create a database, you can then specify which tablespace to use e."
"g.:"
msgstr ""

# 5ae8579cf91842609ec1870f09e26f7d
# 40bd38bb54f74797a9be4654e65b7f67
# 6d2e4b25153e411883bd68499b75a09f
# b716bd5cf6604961a0aac3cbf0ce14f0
# cd08d8a654214e94a2bc43227fdcdd7c
#: ../../postgis/geometry.rst:315 ../../postgis/import_export.rst:91
#: ../../postgis/simple_feature_model.rst:251
#: ../../postgis/spatial_functions.rst:243
#: ../../postgis/spatial_queries.rst:392
msgid "|IC|"
msgstr ""

# 330e285ce0a047b8a747b42f75271990
#: ../../postgis/geometry.rst:317
msgid ""
"You've learned how to create more complex geometries using PostGIS "
"statements. Keep in mind that this is mostly to improve your tacit knowledge "
"when working with geo-enabled databases through a GIS frontend. You usually "
"won't need to actually enter these statements manually, but having a general "
"idea of their structure will help you when using a GIS, especially if you "
"encounter errors that would otherwise seem cryptic."
msgstr ""

# 1be2e1ee42f1472c9e0e093c3099bbd2
#: ../../postgis/import_export.rst:2
msgid "|LS| Import and Export"
msgstr ""

# 3a96fe0fa3dd40fa852aa8d837fcb818
#: ../../postgis/import_export.rst:4
msgid ""
"Of course, a database with no easy way to migrate data into it and out of it "
"would be no fun. Even more so for spatial data! Fortunately, there are a "
"number of tools that will let you easily move data into and out of PostGIS."
msgstr ""

# 7f0cd6c8c7ea4ce398058406c91edc42
#: ../../postgis/import_export.rst:9
msgid "shp2pgsql"
msgstr ""

# c914132c794e480791b1631399e88296
#: ../../postgis/import_export.rst:11
msgid ""
"shp2pgsql is a commandline tool to import ESRI shapefiles to the database. "
"Under Unix, you can use the following command for importing a new PostGIS "
"table:"
msgstr ""

# b5a22dfb5c5e4ce99f1e3c265888225d
#: ../../postgis/import_export.rst:20
msgid "Under Windows, you have to perform the import process in two steps:"
msgstr ""

# 66056ef5c683422bba70a700e3b8956c
#: ../../postgis/import_export.rst:27
msgid "You may encounter this error:"
msgstr ""

# d9d7222e8a5140209e580f82f93e9209
#: ../../postgis/import_export.rst:34
msgid ""
"This is a known issue regarding the creation *in situ* of a spatial index "
"for the data you're importing. To avoid the error, exclude the :kbd:`-I` "
"parameter. This will mean that no spatial index is being created directly, "
"and you'll need to create it in the database after the data have been "
"imported. (The creation of a spatial index will be covered in the next "
"lesson.)"
msgstr ""

# a1b5307c3eaf44e3aadd15211addd8f4
#: ../../postgis/import_export.rst:41
msgid "pgsql2shp"
msgstr ""

# ad10d81ce3224cd99f04b71ee129541d
#: ../../postgis/import_export.rst:43
msgid ""
"pgsql2shp is a commandline tool to export PostGIS Tables, Views or SQL "
"select queries. To do this under Unix:"
msgstr ""

# 8f34594b74584aff985dd061d4070c92
#: ../../postgis/import_export.rst:51
msgid "To export the data using a query:"
msgstr ""

# a6ea5802c05f4da59e0fe56b61556ffb
#: ../../postgis/import_export.rst:59
msgid "ogr2ogr"
msgstr ""

# e01e7191936f4faf9a39affdb52cb929
#: ../../postgis/import_export.rst:61
msgid ""
"ogr2ogr is a very powerful tool to convert data into and from postgis to "
"many data formats. ogr2ogr is part of the GDAL/OGR Software and has to be "
"installed separately. To export a table from PostGIS to GML, you can use "
"this command:"
msgstr ""

# 5fe7389e551947fb9e48e6db2f1107f7
#: ../../postgis/import_export.rst:71
msgid "SPIT"
msgstr ""

# 5222fd58b1e5409291f0df3625dac2c2
#: ../../postgis/import_export.rst:73
msgid ""
"SPIT is a QGIS plugin which is delivered with QGIS. You can use SPIT for "
"uploading ESRI shapefiles to PostGIS."
msgstr ""

# 9d9ff270b7f24c91839ad8330a3e3ee0
#: ../../postgis/import_export.rst:76
msgid ""
"Once you've added the SPIT plugin via the :guilabel:`Plugin Manager`, look "
"for this button:"
msgstr ""

# df4e23bea9cf451281c69a43f71d0509
#: ../../postgis/import_export.rst:82
msgid "Clicking on it will give you the SPIT dialog:"
msgstr ""

# 408c2c391edc4b9b92186ea2ab765461
#: ../../postgis/import_export.rst:87
msgid ""
"You can add shapefiles to the database by clicking the :guilabel:`Add` "
"button, which will give you a file browser window."
msgstr ""

# 2477936fc5b14c3abee7567141be559f
#: ../../postgis/import_export.rst:93
msgid ""
"Importing and exporting data to and from the database can be done in many "
"various ways. Especially when using disparate data sources, you will "
"probably use these functions (or others like them) on a regular basis."
msgstr ""

# ec0dff52d4754cd6b849eecb38da5701
# 07ef8b524d70451eac22c21c0476ef0f
# 58b184509b7f49aca6959d6b7b27ab2f
# 15451fae09c94e6cb7606bd3d8b4d853
#: ../../postgis/import_export.rst:98
#: ../../postgis/simple_feature_model.rst:257
#: ../../postgis/spatial_functions.rst:249
#: ../../postgis/spatial_queries.rst:398
msgid "|WN|"
msgstr ""

# 36c05ff64f2549f9824bd78193cc7ccb
#: ../../postgis/import_export.rst:100
msgid "Next we'll look at how to query the data we've created before."
msgstr ""

# 9fea7d8b86b64181a53f3f08514028e8
#: ../../postgis/index.rst:3
msgid "|MOD| PostGIS"
msgstr ""

# 233e4f14e3dd4af29a49d14f34ba87e6
#: ../../postgis/index.rst:5
msgid ""
"PostGIS is an extension to PostgreSQL which allows it to handle and process "
"geographic data. In this module, we'll learn how to set up and use the "
"geographic functions that PostGIS offers."
msgstr ""

# 8edee34a54e34706b0e7470fefeb2273
#: ../../postgis/index.rst:9
msgid ""
"While working through this section, you may want to keep a copy of the "
"`PostGIS cheat sheet <../_static/postgis/postgis_cheatsheet.pdf>`_ available "
"at `Boston GIS user group <http://www.bostongis.com/postgis_quickguide."
"bqg>`_. Another good friend is the `online <http://postgis.refractions.net/"
"documentation/manual-1.5/>`_ PostGIS documentation."
msgstr ""

# 5375716dc6f44425804aec02f84fb21c
#: ../../postgis/index.rst:16
msgid "See also `PostGIS online <http://postgisonline.org/>`_."
msgstr ""

# 2e326c02a74e4e30aabe364e29170002
#: ../../postgis/simple_feature_model.rst:2
msgid "|LS| Simple Feature Model"
msgstr ""

# 936fd020c05a4891b24be2231a3b5e42
#: ../../postgis/simple_feature_model.rst:4
msgid ""
"How can we store and represent geographic features in a database? In this "
"lesson we'll cover one approach, the Simple Feature Model as defined by the "
"OGC."
msgstr ""

# e0b857cb2e1c40449bde294e38a013c2
#: ../../postgis/simple_feature_model.rst:8
msgid ""
"**The goal for this lesson:** To learn what the SFS Model is and how to use "
"it."
msgstr ""

# ff22074128604bd6a26b2be0e16b0ab6
#: ../../postgis/simple_feature_model.rst:11
msgid "What is OGC"
msgstr ""

# 4faad0decaed4c7381690d55cb50a77f
#: ../../postgis/simple_feature_model.rst:13
msgid ""
"The Open Geospatial Consortium (OGC), an international voluntary consensus "
"standards organization, originated in 1994. In the OGC, more than 370+ "
"commercial, governmental, nonprofit and research organizations worldwide "
"collaborate in an open consensus process encouraging development and "
"implementation of standards for geospatial content and services, GIS data "
"processing and data sharing. *- Wikipedia*"
msgstr ""

# 372ac5f15c014d42832e2eadd742660a
#: ../../postgis/simple_feature_model.rst:21
msgid "What is the SFS Model"
msgstr ""

# d071738c087c4c7fa321e3102030f03d
#: ../../postgis/simple_feature_model.rst:23
msgid ""
"The Simple Feature for SQL (SFS) Model is a *non-topological* way to store "
"geospatial data in a database and defines functions for accessing, "
"operating, and constructing these data."
msgstr ""

# 13e92b372fe24c768bc94e700e75fe39
#: ../../postgis/simple_feature_model.rst:30
msgid ""
"The model defines geospatial data from Point, Linestring, and Polygon types "
"(and aggregations of them to Multi objects)."
msgstr ""

# ea8ee1d672664b3db00f1f39378e19ea
#: ../../postgis/simple_feature_model.rst:33
msgid ""
"For further information, have a look at the `OGC Simple Feature for SQL "
"<http://www.opengeospatial.org/standards/sfs>`_ standard."
msgstr ""

# e74cf938134a46d88e12dfbda89a2b87
#: ../../postgis/simple_feature_model.rst:37
msgid "Add a geometry field to table"
msgstr ""

# 8c77b2a40729457f82f9b72f380e87ac
#: ../../postgis/simple_feature_model.rst:39
msgid "Let's add a point field to our people table:"
msgstr ""

# c9a522c549c34422baeae03c0e2ad002
#: ../../postgis/simple_feature_model.rst:49
msgid "Add a constraint based on geometry type"
msgstr ""

# e5329c3a613045e0889ed93374d6cf3e
#: ../../postgis/simple_feature_model.rst:51
msgid ""
"You will notice that the geometry field type does not implicitly specify "
"what *type* of geometry for the field - for that we need a constraint."
msgstr ""

# afb2dd04c1414b01804518a6d157d90c
#: ../../postgis/simple_feature_model.rst:60
msgid ""
"What does that do? It adds a constraint to the table that prevents anything "
"except a point geometry or a null."
msgstr ""

# a65454cc2db74a5fb4ddf088bb2a8f93
#: ../../postgis/simple_feature_model.rst:63
msgid "Now you try:"
msgstr ""

# 3892cdbc547f4c89996ab5fe99f12dd4
#: ../../postgis/simple_feature_model.rst:65
msgid ""
"Create a new table called cities and give it some appropriate columns, "
"including a geometry field for storing polygons (the city boundaries). Make "
"sure it has a constraint enforcing geometries to be polygons."
msgstr ""

# 532a101b05094ff4929b08901bbd6b08
#: ../../postgis/simple_feature_model.rst:98
msgid ":ref:`Check your results <simple-feature-1>`"
msgstr ""

# 303460ed7c2d4482a20ec3321c0522ba
#: ../../postgis/simple_feature_model.rst:104
msgid "Populate geometry_columns table"
msgstr ""

# 48477a0f3d304cf58ee12075032e0fd2
#: ../../postgis/simple_feature_model.rst:106
msgid ""
"At this point you should also add an entry into the :kbd:`geometry_columns` "
"table:"
msgstr ""

# 7db59d4c173e443583284ee7d5c6395b
#: ../../postgis/simple_feature_model.rst:114
msgid ""
"Why? :kbd:`geometry_columns` is used by certain applications to be aware of "
"which tables in the database contain geometry data."
msgstr ""

# 60bc5bde859948faa1f6e3f8303800d5
#: ../../postgis/simple_feature_model.rst:117
msgid ""
"If the above :kbd:`INSERT` statement causes a complaint, run this query "
"first:"
msgstr ""

# 3f497ba37d404ed394502e2762d09ccb
#: ../../postgis/simple_feature_model.rst:124
msgid ""
"If the column :kbd:`f_table_name` contains the value :kbd:`people`, then "
"this table has already been registered and you don't need to do anything "
"more."
msgstr ""

# 3866577028184b86b75d71d789b3903c
#: ../../postgis/simple_feature_model.rst:128
msgid ""
"The value :kbd:`2` refers to the number of dimensions; in this case, two: "
"**x** and **y**."
msgstr ""

# 11fe658698284d81a6d80ab95fadc8a1
#: ../../postgis/simple_feature_model.rst:131
msgid ""
"The value :kbd:`4326` refers to the projection we are using; in this case, "
"WGS 84, which is referred to by the number 4326 (refer to the earlier "
"discussion about the EPSG)."
msgstr ""

# cf7f53addfa246b083ffe1bfdbfa3803
#: ../../postgis/simple_feature_model.rst:135
msgid "Add an appropriate geometry_columns entry for your new cities layer"
msgstr ""

# 3655da546c5342d0a9e93604009cf3f2
#: ../../postgis/simple_feature_model.rst:156
msgid ":ref:`Check your results <simple-feature-2>`"
msgstr ""

# 53f9759c95924a21addc63e860d9cdbb
#: ../../postgis/simple_feature_model.rst:162
msgid "Add geometry record to table using SQL"
msgstr ""

# 43d67c0d46be455598477f28e33011ba
#: ../../postgis/simple_feature_model.rst:164
msgid "Now that our tables are geo-enabled, we can store geometries in them!"
msgstr ""

# b8a6718b8aae49f0bb7127565ef8f2ee
#: ../../postgis/simple_feature_model.rst:175
msgid ""
"In the new entry above, you will need to specify which projection (SRID) you "
"want to use. This is because you entered the geometry of the new point using "
"a plain string of text, which does not automatically add the correct "
"projection information. Obviously, the new point needs to use the same SRID "
"as the dataset it is being added to, so you need to specify it."
msgstr ""

# d3a23a6886ea40c4be573ec0334fba9f
#: ../../postgis/simple_feature_model.rst:181
msgid ""
"If at this point you were using a graphical interface, for example, "
"specifying the projection for each point would be automatic. In other words, "
"you usually won't need to worry about using the correct projection for every "
"point you want to add if you've already specified it for that dataset, as we "
"did earlier."
msgstr ""

# e30e06c149a1457693906fef7115ac4c
#: ../../postgis/simple_feature_model.rst:187
msgid ""
"Now is probably a good time to fire up QGIS and try to view your :kbd:"
"`people` table. Also, we should try editing / adding / deleting records and "
"then performing select queries in the database to see how the data has "
"changed."
msgstr ""

# 4dc95886e177412db6e7486cd0f5ad3b
#: ../../postgis/simple_feature_model.rst:191
msgid ""
"To load a PostGIS layer in QGIS, use the :menuselection:`Layer --> Add "
"PostGIS Layers` menu option or toolbar button:"
msgstr ""

# 70ea2e7d0d6f4339a5afdd67169805f5
#: ../../postgis/simple_feature_model.rst:197
msgid "This will open the dialog:"
msgstr ""

# 040ff5064d724605a9032d5aa2db6e37
#: ../../postgis/simple_feature_model.rst:202
msgid "Click on the :guilabel:`New` button to open this dialog:"
msgstr ""

# c895a171ed664c0eaf583456f18af3cf
#: ../../postgis/simple_feature_model.rst:207
msgid "Then define a new connection, e.g.:"
msgstr ""

# b2d6fcc1f6444f67955302b37e7e7c80
#: ../../postgis/simple_feature_model.rst:219
msgid ""
"To see whether QGIS has found the :kbd:`address` database and that your "
"username and password are correct, click :guilabel:`Test Connect`. If it "
"works, check the boxes next to :guilabel:`Save Username` and :guilabel:`Save "
"Password`. Then click :guilabel:`OK` to create this connection."
msgstr ""

# f1946a48572f411aab13b9e16677fe78
#: ../../postgis/simple_feature_model.rst:224
msgid ""
"Back in the :guilabel:`Add PostGIS Layers` dialog, click :guilabel:`Connect` "
"and add layers to your project as usual."
msgstr ""

# f92fee6b1a3943d4ac55d703c8ea57db
#: ../../postgis/simple_feature_model.rst:227
msgid ""
"Formulate a query that shows a person's name, street name and position (from "
"the the_geom column) as plain text."
msgstr ""

# be3b5365a9c64f89af945d2de5600d79
#: ../../postgis/simple_feature_model.rst:248
msgid ":ref:`Check your results <simple-feature-3>`"
msgstr ""

# 5bda6bc016154c62a6ea638718c5b486
#: ../../postgis/simple_feature_model.rst:253
msgid ""
"You have seen how to add spatial objects to your database and view them in "
"GIS software."
msgstr ""

# b704332f9f674a46a9abeaa21cc1c80e
#: ../../postgis/simple_feature_model.rst:259
msgid ""
"Next you'll see how to import data into, and export data from, your database."
msgstr ""

# 0a4c1860a9e343dda39fe8e230430ecd
#: ../../postgis/spatial_functions.rst:2
msgid "|LS| PostGIS Setup"
msgstr ""

# bdd4260e37ae4fc2bdc58f9cd3ed7673
#: ../../postgis/spatial_functions.rst:4
msgid ""
"Setting up PostGIS functions will allow you to access spatial functions from "
"within PostgreSQL."
msgstr ""

# 69c5572bfe3945df932ae9ddb70cc523
#: ../../postgis/spatial_functions.rst:7
msgid ""
"**The goal for this lesson:** To install spatial functions and briefly demo "
"their effects."
msgstr ""

# 57cbd85418ea41a28a4b61c945451a8d
#: ../../postgis/spatial_functions.rst:11
msgid "Installing under Ubuntu"
msgstr ""

# 2b38b7603e06486d84ea67196b8e1003
#: ../../postgis/spatial_functions.rst:13
msgid "Postgis is easily installed from apt."
msgstr ""

# ecec50e608264f7cb3cf03bb72835e6e
#: ../../postgis/spatial_functions.rst:20
msgid "Really, it's that easy..."
msgstr ""

# 05ba2d44db974662ad6536e171bf25ac
#: ../../postgis/spatial_functions.rst:23
msgid "Installing under Windows"
msgstr ""

# 6c90099d6c1542bebbb93e535b2c0d81
#: ../../postgis/spatial_functions.rst:25
msgid "Visit `the download page <http://www.postgresql.org/download/>`_."
msgstr ""

# da4baa5765354724a037180494d6b63a
#: ../../postgis/spatial_functions.rst:27
msgid ""
"Now follow `this guide <http://www.bostongis.com/PrinterFriendly.aspx?"
"content_name=postgis_tut01>`_."
msgstr ""

# 5ecfe588dc11435f86728f64cefafb18
#: ../../postgis/spatial_functions.rst:30
msgid ""
"A little more complicated, but still not hard. Note that you need to be "
"online to install the postgis stack."
msgstr ""

# bc091bbfd7894856920ffbaf30e8f943
#: ../../postgis/spatial_functions.rst:34
msgid "Install plpgsql"
msgstr ""

# 3137acd848a24bd18d1d1654227f7554
#: ../../postgis/spatial_functions.rst:36
msgid ""
"You can ensure that any database created on your system automatically gets "
"these spatial extensions by running these commands (from this and the next "
"two sections) on the :kbd:`template1` system database *before* you create "
"any of your own databases."
msgstr ""

# f4082ce63af8422587c6bf814f53787f
#: ../../postgis/spatial_functions.rst:41
msgid ""
"PostgreSQL can use various procedural languages. What is a procedural "
"language? It is an 'in database' language that can be used to extend the "
"functionality of the database. For example you can write database functions "
"that are called when events happen - such as when a record is inserted into "
"the database. (Recall when this was done in the previous module.)"
msgstr ""

# 5e942a528ae54b0bb64acc20ef7bed58
#: ../../postgis/spatial_functions.rst:47
msgid ""
"PostGIS requires the PLPGSQL procedural language to be installed. So do this:"
msgstr ""

# 22f81be545d44c4889417a36c7746a5b
#: ../../postgis/spatial_functions.rst:55
msgid ""
"Where the third argument is the name of the database that the procedural "
"language should be installed into."
msgstr ""

# 6bee1738f16545fea5f01f335ac749d4
#: ../../postgis/spatial_functions.rst:58
msgid ""
"You will need administrative permissions for your database to be able to do "
"this."
msgstr ""

# 101f50d2afaa4a419ae62b44186d795f
#: ../../postgis/spatial_functions.rst:62
msgid "Install postgis.sql"
msgstr ""

# 97df0a98634a4c77995c068214a9c12e
#: ../../postgis/spatial_functions.rst:64
msgid ""
"PostGIS can be thought of as a collection of in database functions that "
"extend the core capabilities of PostgreSQL so that it can deal with spatial "
"data. By 'deal with', we mean store, retrieve, query and manipulate. In "
"order to do this, a number of functions are installed into the database. Do "
"this:"
msgstr ""

# 1e1dd777960e49f7a8e1055567f048dc
#: ../../postgis/spatial_functions.rst:73
msgid "or"
msgstr ""

# d0b677216bcd42c5bf37ee2df3d6512d
#: ../../postgis/spatial_functions.rst:79
msgid "depending on which PostGIS version you have installed. Now do:"
msgstr ""

# 4d46ac04e1e64b77a1a3b3318e1e3fa3
#: ../../postgis/spatial_functions.rst:85
msgid "and, once you're in the psql prompt:"
msgstr ""

# 17d57138ec9446eba93adda8f94333ff
#: ../../postgis/spatial_functions.rst:91
msgid ""
"We will discuss these functions in more detail as we proceed with this "
"course."
msgstr ""

# c636680c3edf45199e4855eff167a094
#: ../../postgis/spatial_functions.rst:94
msgid "Install spatial_refsys.sql"
msgstr ""

# 16dd45dd8edb4e78aba54bdd043f92df
#: ../../postgis/spatial_functions.rst:96
msgid ""
"In addition to the PostGIS functions, a second helper SQL script needs to be "
"run that will load the database with a collection of spatial reference "
"system (SRS) definitions as defined by the European Petroleum Survey Group "
"(EPSG). These are used during operations such as coordinate reference system "
"(CRS) conversions."
msgstr ""

# 9ac5a10714c24b3bb38e8a0aed0eda4f
#: ../../postgis/spatial_functions.rst:102
msgid ""
"You can add more to the SRS list later if needed, but the list provided "
"should cover just about every SRS you will need (Google Mercator and lo are "
"notable exceptions)."
msgstr ""

# 05816222bfb74b5e891032179157a367
#: ../../postgis/spatial_functions.rst:106
msgid ""
"To load the SRS table, first ensure that you're at a normal prompt (i.e., "
"quit the database first with :kbd:`\\q`), then do this:"
msgstr ""

# 694fb67b45d54d5ba5f1e53aeebc24f8
#: ../../postgis/spatial_functions.rst:113
msgid "replacing :kbd:`1.5` with :kbd:`2.0` if necessary."
msgstr ""

# 61f0212dc0334c3a88cadddbecdd1d92
#: ../../postgis/spatial_functions.rst:115
msgid ""
"The above command adds a table to our database. We can see the schema of "
"this table by entering the following command in the psql prompt:"
msgstr ""

# 888cbdf4a2e04ead9b844f307590323e
#: ../../postgis/spatial_functions.rst:122
msgid "The result should be this:"
msgstr ""

# aed978528a334f019d164d677c6cb51c
#: ../../postgis/spatial_functions.rst:137
msgid ""
"You can use standard SQL queries (as we have learned from our introductory "
"sections), to view and manipulate this table - though we suggest you do not "
"update or delete any records unless you know what you are doing."
msgstr ""

# 1c89b69926fa4187bc935f6198ee3a7e
#: ../../postgis/spatial_functions.rst:141
msgid ""
"One SRID you may be interested in is EPSG:4326 - the geographic / lat lon "
"reference system using the WGS 84 ellipsoid. Let's take a look at it:"
msgstr ""

# 0faaef9d4fd442a9b61104e442185375
#: ../../postgis/spatial_functions.rst:148
msgid "Result"
msgstr ""

# 80f08eb37c2c4f03bb6deb94c427935b
#: ../../postgis/spatial_functions.rst:162
msgid ""
"The srtext is the projection definition in well known text (you may "
"recognise this from .prj files in your shapefile collection)."
msgstr ""

# 27db29dae8c64f83a60c62f760331a72
#: ../../postgis/spatial_functions.rst:166
msgid "Looking at the installed PostGIS functions"
msgstr ""

# 38f5de72654849b7a803413b469e6b75
#: ../../postgis/spatial_functions.rst:168
msgid ""
"Good - our PostgreSQL database is now geospatially enabled, thanks to "
"PostGIS. We are going to delve a lot deeper into this in the coming days, "
"but let's give you a quick little taster. Let's say we want to create a "
"point from text. First we use the psql command to find functions relating to "
"point:"
msgstr ""

# ec0c0b4fead44a8891b1b788be0a7f7b
#: ../../postgis/spatial_functions.rst:177
msgid "Here is one that caught my eye: :kbd:`st_pointfromtext`"
msgstr ""

# 48bacf3be6854d61b83a36aa4055a95a
#: ../../postgis/spatial_functions.rst:179
msgid "So let's give that a try:"
msgstr ""

# a27e3bfaab104357b9288fd9823c89ed
# c987d16036b340f79881bbf434cbfb33
# fbffd3f712974d3cbbe69948c4a43a86
# 119918b03d834588b30a11993d32aea7
# a3d988ccc2dc4791b17c575217d0ce32
# 74c7a9227de74f2fbced38292eff9fb3
# 8b41781fd34c4bceab0be3a0db477003
#: ../../postgis/spatial_functions.rst:185
#: ../../postgis/spatial_functions.rst:219
#: ../../postgis/spatial_queries.rst:25 ../../postgis/spatial_queries.rst:58
#: ../../postgis/spatial_queries.rst:179 ../../postgis/spatial_queries.rst:219
#: ../../postgis/spatial_queries.rst:320
msgid "Result:"
msgstr ""

# 3aab66f9ffc34d27b6e467799db825ac
#: ../../postgis/spatial_functions.rst:194
msgid "So there are a couple of interesting things going on here:"
msgstr ""

# 155426a294be451f8eb41a66554bcf92
#: ../../postgis/spatial_functions.rst:196
msgid ""
"we defined a point at position 1,1 (EPSG:4326 is assumed) using :kbd:`POINT"
"(1 1)`"
msgstr ""

# 5b90c22bb9eb4c3babe1b75689993cd6
#: ../../postgis/spatial_functions.rst:198
msgid ""
"we ran an sql statement, but not on any table, just on data entered from the "
"SQL prompt"
msgstr ""

# e330f3c264a04bd3ade0fd25a5b4c230
#: ../../postgis/spatial_functions.rst:200
msgid "the resulting row looks kinda strange"
msgstr ""

# 8b5b029940684929ac02a8c1bf1c3e8d
#: ../../postgis/spatial_functions.rst:202
msgid ""
"The resulting row is looking strange because its in the OGC format called "
"'Well Known Binary' (WKB) - more on that coming in the next section."
msgstr ""

# 6c9ae8818f454705a7f83be423b2d115
#: ../../postgis/spatial_functions.rst:205
msgid ""
"To get the results back as text, I do a quick scan through the function list "
"for something that returns text:"
msgstr ""

# 0a2a3678538f4f2b98949177c498fc85
#: ../../postgis/spatial_functions.rst:212
msgid ""
"One that catches my eye is :kbd:`st_astext`. Let's combine it with the "
"previous query:"
msgstr ""

# d3198c0107134a72ac509cb3b913f026
#: ../../postgis/spatial_functions.rst:228
msgid ""
"So what's happened here? We entered the string :kbd:`POINT(1,1)`, turned it "
"into a point using :kbd:`st_pointfromtext()`, and turned it back into a "
"human-readable form with :kbd:`st_astext()`, which gave us back our original "
"string."
msgstr ""

# 989c546a7db74a7f88060d7866b84c80
#: ../../postgis/spatial_functions.rst:233
msgid "One last example before we really get into the detail of using PostGIS:"
msgstr ""

# 402b7395e6ca45b6aec358c2c7c2b310
#: ../../postgis/spatial_functions.rst:239
msgid ""
"What did that do? It created a buffer of 1 degree around our point, and "
"returned it as text. Nifty hey?"
msgstr ""

# ece46ca403ba4f3ca29f152f31ce1b29
#: ../../postgis/spatial_functions.rst:245
msgid ""
"You now have PostGIS functions installed in your copy of PostgreSQL. With "
"this you'll be able to make use of PostGIS' extensive spatial functions."
msgstr ""

# cf46ef96149f401f8bc420373500b9a5
#: ../../postgis/spatial_functions.rst:251
msgid "Next you'll learn how spatial features are represented in a database."
msgstr ""

# 873ae0cb9db44d889d945e4b0a6796a9
#: ../../postgis/spatial_queries.rst:2
msgid "|LS| Spatial Queries"
msgstr ""

# 96e0d5b836a843c3b07b19836e47b6a4
#: ../../postgis/spatial_queries.rst:4
msgid ""
"Spatial queries are no different from other database queries. You can use "
"the geometry column like any other database column. With the installation of "
"PostGIS in our database, we have additional functions to query our database."
msgstr ""

# 02405c6fa4d14580933f320cd6e443dc
#: ../../postgis/spatial_queries.rst:8
msgid ""
"**The goal for this lesson:** To see how spatial functions are implemented "
"similarly to \"normal\" non-spatial functions."
msgstr ""

# 752c463b431f474f8d33e31a5514baea
#: ../../postgis/spatial_queries.rst:14
msgid "Spatial Operators"
msgstr ""

# cef425460c3141a08eea3c7081bf32c8
#: ../../postgis/spatial_queries.rst:16
msgid ""
"When you want to know which points are within a distance of 2 degrees to a "
"point(X,Y) you can do this with:"
msgstr ""

# 722f7d42aab8436b8626dd9ddfd537a9
#: ../../postgis/spatial_queries.rst:34
msgid ""
"the_geom value above was truncated for space on this page. If you want to "
"see the point in human-readable coordinates, try something similar to what "
"you did in the section \"View a point as WKT\", above."
msgstr ""

# b475485bf2614447964bfb43d2175a0a
#: ../../postgis/spatial_queries.rst:38
msgid ""
"How do we know that the query above returns all the points within 2 "
"*degrees*? Why not 2 *meters*? Or any other unit, for that matter?"
msgstr ""

# 34d08932a8b34e5b9e1e5ce1c593e06a
#: ../../postgis/spatial_queries.rst:41
msgid ":ref:`Check your results <spatial-queries-1>`"
msgstr ""

# dd339dac4930420eb38219765a6205c7
#: ../../postgis/spatial_queries.rst:46
msgid "Spatial Indexes"
msgstr ""

# a237a35f5645470ebac1b850654b2bd0
#: ../../postgis/spatial_queries.rst:48
msgid ""
"We also can define spatial indexes. A spatial index makes your spatial "
"queries much faster. To create a spatial index on the geometry column use:"
msgstr ""

# efa6765caa22416fa951edc1b8cdc43b
#: ../../postgis/spatial_queries.rst:85
msgid ""
"Now you try - modify the cities table so its geometry column is spatially "
"indexed."
msgstr ""

# 54a28c380b3145be8587073eb3e775d8
#: ../../postgis/spatial_queries.rst:115
msgid ":ref:`Check your results <spatial-queries-2>`"
msgstr ""

# 1b2a993eafc5417a991d068bc40e0a81
#: ../../postgis/spatial_queries.rst:119
msgid "PostGIS Spatial Functions Demo"
msgstr ""

# 7cb1a1c24ff44261982f9723c67c6cf8
#: ../../postgis/spatial_queries.rst:121
msgid ""
"In order to demo PostGIS spatial functions, we'll create a new database "
"containing some (fictional) data."
msgstr ""

# 8600c549fc314fca99d0c5c1d5f538ca
#: ../../postgis/spatial_queries.rst:124
msgid "To start, create a new database:"
msgstr ""

# 1ccf21e86f594ce2b43330c533e2b986
#: ../../postgis/spatial_queries.rst:130
msgid "Remember to install PLPGSQL:"
msgstr ""

# 921d653e551c46928e6d479e51d512b0
#: ../../postgis/spatial_queries.rst:136
msgid ""
"Then install the PostGIS functions and the spatial reference system. For "
"example, on Linux with PostgreSQL 9.1 and PostGIS 1.5:"
msgstr ""

# 65a193dd2fb9469c90e12909a5a62302
#: ../../postgis/spatial_queries.rst:144
msgid ""
"Next, import the data provided in the :kbd:`exercise_data/postgis/` "
"directory. Refer back to the previous lesson for instructions. You can "
"import from the terminal or via SPIT. Import the files into the following "
"database tables:"
msgstr ""

# 89146be3cde14a54a21a835ea7cbf309
#: ../../postgis/spatial_queries.rst:148
msgid ":kbd:`points.shp` = :kbd:`building`"
msgstr ""

# e35419e5ed0244cf8691c26b8b6f92b4
#: ../../postgis/spatial_queries.rst:149
msgid ":kbd:`lines.shp` = :kbd:`road`"
msgstr ""

# 35620daa3ff44c3687ffc9f34723665d
#: ../../postgis/spatial_queries.rst:150
msgid ":kbd:`polygons.shp` = :kbd:`region`"
msgstr ""

# 5f2524b0c6284b128668988129225e64
#: ../../postgis/spatial_queries.rst:152
msgid ""
"Load these three database layers into QGIS via the :guilabel:`Add PostGIS "
"Layers` dialog, as usual. When you open their attribute tables, you'll note "
"that they have both an :kbd:`id` field and a :kbd:`gid` field created by the "
"PostGIS import."
msgstr ""

# d8db6d8d44104f76b629aec7c6647e3e
#: ../../postgis/spatial_queries.rst:157
msgid ""
"Now that the tables are imported, we can use PostGIS to query the data. Go "
"back to your terminal (command line) and enter the psql prompt by doing:"
msgstr ""

# 372076d48808467fadfe1cebd2c15212
#: ../../postgis/spatial_queries.rst:164
msgid ""
"We'll demo some of these select statements by creating views from them, so "
"that you can open them in QGIS and see the results."
msgstr ""

# 4e41eed5e9fa4cbf9394cb32f28a748c
#: ../../postgis/spatial_queries.rst:168
msgid "Select by location"
msgstr ""

# 2b9cd03ffd9a426897fdff316f0134c5
#: ../../postgis/spatial_queries.rst:170
msgid "Get all the buildings in the KwaZulu region."
msgstr ""

# f8750908d09b4beabc4ec9172e19737d
#: ../../postgis/spatial_queries.rst:192
msgid "Or, if we create a view from it:"
msgstr ""

# 61c61fb909144a0da39fe74db8014312
#: ../../postgis/spatial_queries.rst:202
msgid "And view it in QGIS:"
msgstr ""

# 53d85afb3725434097d2a8454bb1d322
#: ../../postgis/spatial_queries.rst:208
msgid "Select neighbors"
msgstr ""

# 73b39701faf046b8bbd6f4335a6957bd
#: ../../postgis/spatial_queries.rst:210
msgid "Show a list of all the names of regions adjoining the Hokkaido region."
msgstr ""

# 436cfc964a9747cd9b4126ff6b47cf1b
#: ../../postgis/spatial_queries.rst:230
msgid "As a view:"
msgstr ""

# c89a86cf2da742b1aa827fd754bfec78
# b2185155ae4b482a86e487b726d22618
#: ../../postgis/spatial_queries.rst:240 ../../postgis/spatial_queries.rst:285
msgid "In QGIS:"
msgstr ""

# fb02aa1a830f4cb184c9f2936ac14597
#: ../../postgis/spatial_queries.rst:245
msgid ""
"Note the missing region (Queensland). This may be due to a topology error. "
"Artifacts such as this can alert us to potential problems in the data. To "
"solve this enigma without getting caught up in the anomalies the data may "
"have, we could use a buffer intersect instead:"
msgstr ""

# 41e80fbf01144f9dafa7a36d05e75e50
#: ../../postgis/spatial_queries.rst:257
msgid "This creates a buffer of 100 meters around the region Hokkaido."
msgstr ""

# 55fe3a9ccc834e4b8b0178c174d29ead
#: ../../postgis/spatial_queries.rst:259
msgid "The darker area is the buffer:"
msgstr ""

# 437c638d38cb441aba50de19764015ae
#: ../../postgis/spatial_queries.rst:264
msgid "Select using the buffer:"
msgstr ""

# 138898cb52ea418fbe7fd6203e1becaf
#: ../../postgis/spatial_queries.rst:279
msgid ""
"In this query, the original buffer view is used as any other table would be. "
"It is given the alias :kbd:`a`, and its geometry field, :kbd:`a.the_geom`, "
"is used to select any polygon in the :kbd:`region` table (alias :kbd:`b`) "
"that intersects it. However, Hokkaido itself is excluded from this select "
"statement, because we don't want it; we only want the regions adjoining it."
msgstr ""

# 7c1035dd4a2f4efba36400f73e00475b
#: ../../postgis/spatial_queries.rst:290
msgid ""
"It is also possible to select all objects within a given distance, without "
"the extra step of creating a buffer:"
msgstr ""

# 0a0f9eefa362414ab35e4404c3c87722
#: ../../postgis/spatial_queries.rst:302
msgid ""
"This achieves the same result, without need for the interim buffer step:"
msgstr ""

# e1eafda6633b4fb59151633eda63df39
#: ../../postgis/spatial_queries.rst:309
msgid "Select uniques"
msgstr ""

# a21272b08306446198cf28590eea240e
#: ../../postgis/spatial_queries.rst:311
msgid ""
"Show a list of unique town names for all buildings in the Queensland region."
msgstr ""

# a9e62d1713cf41cea8889c8ed055cd11
#: ../../postgis/spatial_queries.rst:333
msgid "Further examples ..."
msgstr ""

# 95f1f97bdb9e45afb6ad8063eae192c7
#: ../../postgis/spatial_queries.rst:394
msgid ""
"You have seen how to query spatial objects using the new database functions "
"from PostGIS."
msgstr ""

# e8d056bd0f0d4da8a585d11fdab3f99e
#: ../../postgis/spatial_queries.rst:400
msgid ""
"Next we're going to investigate the structures of more complex geometries "
"and how to create them using PostGIS."
msgstr ""
