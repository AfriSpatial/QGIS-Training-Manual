# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-07-10 11:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../postgres/adding_data.rst:2
# 3d16689a7e7546ea9f1cfbe9e7169ae6
msgid "|LS| Adding Data to the Model"
msgstr ""

#: ../../../postgres/adding_data.rst:4
# 3a0260c31a0e428fb1abbe92a0a8c0e9
msgid "The models we've created will now need to be populated with the data they're intended to contain."
msgstr ""

#: ../../../postgres/adding_data.rst:7
# 8f8f35f75040422799ac7aa7e3c89360
msgid "**The goal for this lesson:** To learn how to insert new data into the database models."
msgstr ""

#: ../../../postgres/adding_data.rst:11
# fd0e4174053d40049dac815c7eefdaa0
msgid "Insert statement"
msgstr ""

#: ../../../postgres/adding_data.rst:13
# 106b1ef65bc441c99c190e9824f5c777
msgid "How do you add data to a table? The sql :kbd:`INSERT` statement provides the functionality for this:"
msgstr ""

#: ../../../postgres/adding_data.rst:20
# 1ba3b348f8f44b9d92f53cd4d2a10ab3
msgid "A couple of things to note:"
msgstr ""

#: ../../../postgres/adding_data.rst:22
# 12c06b8539b449da8745e979bede2602
msgid "after the table name (:kbd:`streets`), you list the column names that you will be populating (in this case only the :kbd:`name` column)."
msgstr ""

#: ../../../postgres/adding_data.rst:24
# 158b3e9b47fe4dac9c575de076231355
msgid "after the :kbd:`values` keyword, place the list of field values."
msgstr ""

#: ../../../postgres/adding_data.rst:25
# 5cff3b138b234e12a9fd8c2620ad8a32
msgid "strings should be quoted using single quotes."
msgstr ""

#: ../../../postgres/adding_data.rst:26
# 18d6a4a5ed094d69b058609358d42580
msgid "you will note that I did not insert a value for the :kbd:`id` column - that is because it is a sequence and will be autogenerated."
msgstr ""

#: ../../../postgres/adding_data.rst:28
# 41548b1331e0476f8aa6ebe25cff0d33
msgid "if you do manually set the :kbd:`id`, you may cause serious problems with the integrity of your database."
msgstr ""

#: ../../../postgres/adding_data.rst:31
# 8cd23166ff99453780e73a90855ea52f
msgid "You should see :kbd:`INSERT 0 1` if it is successful."
msgstr ""

#: ../../../postgres/adding_data.rst:33
# bd8fc8a462fb4f2db5f367d76b6f1739
msgid "You can see the result of your insert action by selecting all the data in the table:"
msgstr ""

#: ../../../postgres/adding_data.rst:40
# ba2496980a654704baf70effc4222df0
msgid "result:"
msgstr ""

#: ../../../postgres/adding_data.rst:50
# 3f1c97343f0b4726a35e29205c364a0b
msgid "Now you try:"
msgstr ""

#: ../../../postgres/adding_data.rst:52
# 0ba30d1cea3a415d90519f9101cb1e7c
msgid "Use the :kbd:`INSERT` command to add a new street to the :kbd:`streets` table."
msgstr ""

#: ../../../postgres/adding_data.rst:54
# f1e2bdebec6342a2b9a1fe2a1d42c8bb
msgid "Write the sql you used here:"
msgstr ""

#: ../../../postgres/adding_data.rst:70
# 157021663acc4b36a5dea61fc0e0eb47
msgid "Sequencing data addition according to constraints"
msgstr ""

#: ../../../postgres/adding_data.rst:72
# 4b4ebeebd206448081782146824f7fdb
msgid "Try to add a person to the people table with the following details:"
msgstr ""

#: ../../../postgres/adding_data.rst:81
# a9e5f122e9fe4bf19fc661138e7084fc
msgid "Remember, we defined phone numbers as strings."
msgstr ""

#: ../../../postgres/adding_data.rst:83
# b45f38820ecb4051ab49722671b3ff0e
msgid "What problems did you encounter?"
msgstr ""

#: ../../../postgres/adding_data.rst:104
# f738f704eb3445d599fa659333098892
msgid "You should have an error report if you try to do this without first creating a record for Main Street in the :kbd:`streets` table."
msgstr ""

#: ../../../postgres/adding_data.rst:107
# 9dfd3011aee14d45a80439a248f57893
msgid "What error did you get?"
msgstr ""

#: ../../../postgres/adding_data.rst:110
# 47fe44a8e843488f99341821b42e737c
msgid "You can't add the street using its name"
msgstr ""

#: ../../../postgres/adding_data.rst:111
# 057768ea18394a619474a92b79cd0c27
msgid "You can't add a street using a street :kbd:`id` before first creating the street record on the streets table"
msgstr ""

#: ../../../postgres/adding_data.rst:114
# aa790316ff3c4f00867b008e7a0f0b51
msgid "Remember that our two tables are linked via a Primary/Foreign Key pair. This means that no valid person can be created without there also being a valid corresponding street record."
msgstr ""

#: ../../../postgres/adding_data.rst:118
# 30a6cdb88aa142c09379ea4acdd550cb
msgid "Here is how we made our friend:"
msgstr ""

#: ../../../postgres/adding_data.rst:126
# ed273cb011bf4c21b0081dde5f64fe65
msgid "If you look at the streets table again (using a select statement as before), you'll see that the :kbd:`id` for the :kbd:`Main Street` entry is :kbd:`2`. That's why we could merely enter the number :kbd:`2` above. Even though we're not seeing :kbd:`Main Street` written out fully in the entry above, the database will be able to associate that with the :kbd:`street_id` value of :kbd:`2`."
msgstr ""

#: ../../../postgres/adding_data.rst:134
# ecddf3acc17842d19f524d569f6e3549
msgid "Select data"
msgstr ""

#: ../../../postgres/adding_data.rst:136
# 3951d4b0ac1043b49a51aca6c8a7fcdf
msgid "We have already shown you the syntax for selecting records. Lets look at a few more examples:"
msgstr ""

#: ../../../postgres/adding_data.rst:151
# b17b4723cdbe413c81a40d8b4f431881
msgid "In later sessions we will go into more detail on how to select and filter data."
msgstr ""

#: ../../../postgres/adding_data.rst:154
# e0b74debedfa405bbf193d7dac29c196
msgid "Update data"
msgstr ""

#: ../../../postgres/adding_data.rst:156
# abc6f09c7e62490786071216ca92eda1
msgid "What is you want to make a change to some existing data? For example a street name is changed:"
msgstr ""

#: ../../../postgres/adding_data.rst:163
# f40324ea0bcd46ca9789a902d416e6c7
msgid "Be very careful using such update statements - if more than one record matches your :kbd:`WHERE` clause, they will all be updated!"
msgstr ""

#: ../../../postgres/adding_data.rst:166
# 6bee79bbe3df43fea00067527f310a6d
msgid "A better solution is to use the primary key of the table to reference the record to be changed:"
msgstr ""

#: ../../../postgres/adding_data.rst:173
# 92d5072465784311be63811f0a594fc1
msgid "It should return :kbd:`UPDATE 1`."
msgstr ""

#: ../../../postgres/adding_data.rst:175
# 6abf42e4faef4307a265157b6ab2fc16
msgid "the :kbd:`WHERE` statement criteria are case sensitive :kbd:`Main Street` <> :kbd:`Main street`"
msgstr ""

#: ../../../postgres/adding_data.rst:179
# cd2a95d71f904f1586e731f305252657
msgid "Delete Data"
msgstr ""

#: ../../../postgres/adding_data.rst:181
# 98f88554345c467ca1b822cd062ab666
msgid "Some times you fall out of friendship with people. Sounds like a job for the :kbd:`DELETE` command!"
msgstr ""

#: ../../../postgres/adding_data.rst:188
# 73559c48852d44909b0cf3ce41b9f6eb
msgid "Let's look at our people table now:"
msgstr ""

#: ../../../postgres/adding_data.rst:197
# 4bdfe9e061b14ca8a86947e988bdbc91
msgid "**Exercise:** Use the skills you learned earlier to add some new friends to your database:"
msgstr ""

#: ../../../postgres/adding_data.rst:210
#: ../../../postgres/data_model.rst:483
#: ../../../postgres/db_intro.rst:425
#: ../../../postgres/queries.rst:314
#: ../../../postgres/rules.rst:58
#: ../../../postgres/views.rst:80
# 9c1f38ffaa9e437d847c8de6a03acf1a
# 4873d794f1174534b775cc660b75d3ec
# ded341e35b9c4b0c9add0422d755d465
# 49127ba0e0bd4efaac7148e52d4d72f5
# b1944f795d844ef6909081d4234c3f01
# d93eab64f87f4ac5b4f6ad6b83047fb2
msgid "|IC|"
msgstr ""

#: ../../../postgres/adding_data.rst:212
# 62e0b2e441084eb3bcce4cf2097d8e05
msgid "Now you know how to add new data to the existing models you created previously. Remember that if you want to add new kinds of data, you may want to modify and/or create new models to contain that data."
msgstr ""

#: ../../../postgres/adding_data.rst:217
#: ../../../postgres/data_model.rst:489
#: ../../../postgres/db_intro.rst:431
#: ../../../postgres/queries.rst:320
#: ../../../postgres/rules.rst:64
#: ../../../postgres/views.rst:85
# 86ec67ae0bba428781678dcd1fed24d4
# acb1a8fe37454e9e95179c14a0bf083f
# 79025364dfb640e1bd217513d0a3b6f5
# 488b364b42d04a8ab599c8d1b708dd22
# 5e78f2f7b2044d8caf003cc9ace59194
# ad8c05c4c4b84f88be16c6c927f57af3
msgid "|WN|"
msgstr ""

#: ../../../postgres/adding_data.rst:219
# 175d9120f908434993f43dfa926cb0e8
msgid "Now that you've added some data, you'll learn how to use queries to access this data in various ways."
msgstr ""

#: ../../../postgres/data_model.rst:2
# 8215d113dd9c488a8fa3e8dff7bbbf2a
msgid "|LS| Implementing the Data Model"
msgstr ""

#: ../../../postgres/data_model.rst:4
# 322daf83d2074c4a9918d513030aee44
msgid "Now that we've covered all the theory, let's create a new database. This database will be used for our exercises for the lessons that will follow afterwards."
msgstr ""

#: ../../../postgres/data_model.rst:8
# 14d28236ff40415ea2a3d8fff907d6df
msgid "**The goal for this lesson:** To install the required software and use it to implement our example database."
msgstr ""

#: ../../../postgres/data_model.rst:12
# bff340f2de5c462db78d298214ecb156
msgid "Install PostgreSQL"
msgstr ""

#: ../../../postgres/data_model.rst:14
#: ../../../postgres/data_model.rst:51
# d9c3e6604a3343eeb42b6ed9cb2bc8b7
# 94cf28d91c1b4d92af50cc93a8a0506e
msgid "Under Ubuntu:"
msgstr ""

#: ../../../postgres/data_model.rst:20
# 62f1383391e4408b9ea352cd4ecbb4f1
msgid "You should get a message like this:"
msgstr ""

#: ../../../postgres/data_model.rst:39
# df7001075ac1491693d5843e7049dbaa
msgid "Press :kbd:`Y` and :kbd:`Enter` and wait for the download and installation to finish."
msgstr ""

#: ../../../postgres/data_model.rst:43
# 2dd9fe758bee4f269b1c053ba0b4ddbe
msgid "Help"
msgstr ""

#: ../../../postgres/data_model.rst:45
# fc98437502414d14a427119fe6b7b3b9
msgid "PostgreSQL has very good `online <http://www.postgresql.org/docs/9.1/static/index.html>`_ documentation."
msgstr ""

#: ../../../postgres/data_model.rst:49
# 2428b649f33d44eeb94b6804ee9d996f
msgid "Create a database user"
msgstr ""

#: ../../../postgres/data_model.rst:53
# 7ce07d4262c64890ad550e2d38123950
msgid "After the installation is complete, run this command to become the postgres user and then create a new database user:"
msgstr ""

#: ../../../postgres/data_model.rst:60
# 05d3780317f84f9f9e26675badeb70a5
msgid "Type in your normal log in password when prompted (you need to have sudo rights)."
msgstr ""

#: ../../../postgres/data_model.rst:62
# ad2a840477b54f74a796ca1831d077ed
msgid "Now, at the postgres user's bash prompt, create the database user. Make sure the user name matches your unix login name: it will make your life much easier, as postgres will automatically authenticate you when you are logged in as that user."
msgstr ""

#: ../../../postgres/data_model.rst:71
# ae746ececdc142a2a2c4963999601884
msgid "Enter a password when prompted. I normally use a different password to my usual unix login."
msgstr ""

#: ../../../postgres/data_model.rst:74
# 0f6e82acbc06463192be4bd0a308d044
msgid "What do those options mean?"
msgstr ""

#: ../../../postgres/data_model.rst:86
# 3457914aabe14375956f087f82fed735
msgid "Now you should should leave the postgres user's bash shell environment by typing:"
msgstr ""

#: ../../../postgres/data_model.rst:94
# e32641d8ea864db78351c0e52c11e654
msgid "Verify the new account"
msgstr ""

#: ../../../postgres/data_model.rst:100
# 5828ae508c5644cc85d1c010b9925884
msgid "Should return something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:113
#: ../../../postgres/data_model.rst:144
# 56efb85d5d26497ebcf9ca8314b41d90
# 94f4dd7648db4977b5a14d8cf7fdc1a9
msgid "Type :kbd:`q` to exit."
msgstr ""

#: ../../../postgres/data_model.rst:116
# fb3d23c823a54590a63870728b726f9b
msgid "Create a database"
msgstr ""

#: ../../../postgres/data_model.rst:118
# a37d6d9f4f2a4d13bf5ad4381307940f
msgid "The :kbd:`createdb` command is used to create a new database. It should be run from the bash shell prompt."
msgstr ""

#: ../../../postgres/data_model.rst:125
# 028fdd0d6133438c8094d7bd1b0674f1
msgid "You can verify the existence of your new database by using this command:"
msgstr ""

#: ../../../postgres/data_model.rst:131
# 1bf6c412e8884e0186fa09dcae84d43a
msgid "Which should return something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:147
# 63c0f159b23e4417b42ac2d07713d0a6
msgid "Starting a database shell session"
msgstr ""

#: ../../../postgres/data_model.rst:149
# ee655b54ba5b441e962853cada1f5f0a
msgid "You can connect to your database easily like this:"
msgstr ""

#: ../../../postgres/data_model.rst:155
# a070703a259d486c849cd4e0cae948bb
msgid "To exit out of the psql database shell, type:"
msgstr ""

#: ../../../postgres/data_model.rst:161
# b13a494ad88e4246a0ac2f977a19b1e6
msgid "For help in using the shell, type:"
msgstr ""

#: ../../../postgres/data_model.rst:167
# 44e72f5ef623440184e2cd5da5123ee2
msgid "For help in using sql commands, type:"
msgstr ""

#: ../../../postgres/data_model.rst:173
# 512427b860564791a180f366f10a3a06
msgid "To get help on a specific command, type (for example):"
msgstr ""

#: ../../../postgres/data_model.rst:179
# ca650339265940fb92dd5a191fc9afdd
msgid "See also the `Psql cheat sheet <../_static/postgres/psql_cheatsheet.pdf>`_ - available online `here <http://www.postgresonline.com/special_feature.php?sf_name=postgresql83_psql_cheatsheet&outputformat=html>`_."
msgstr ""

#: ../../../postgres/data_model.rst:184
# 4746b0068e5b43639ff266f73c4cc52d
msgid "Make Tables in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:186
# f685b92eb0d443da970c6697bb392551
msgid "Let's start making some tables! We will use our ER Diagram as a guide. First, let's create a streets table:"
msgstr ""

#: ../../../postgres/data_model.rst:193
# dad912d9381d4f0abb57ed3fbe322de2
msgid ":kbd:`serial` and :kbd:`varchar` are **data types**. :kbd:`serial` tells PostgreSQL to start an integer sequence (autonumber) to populate the :kbd:`id` automatically for every new record. :kbd:`varchar(50)` tells PostgreSQL to create a character field of 50 characters in length."
msgstr ""

#: ../../../postgres/data_model.rst:198
# 14f91e3c32e1410fbeac7e0963778d11
msgid "You will notice that the command ends with a :kbd:`;` - all SQL commands should be terminated this way. When you press enter, psql will report something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:210
# 550d129735e547abb91def3a96179a32
msgid "That means your table was created successfully, with a primary key :kbd:`streets_pkey` using :kbd:`streets.id`."
msgstr ""

#: ../../../postgres/data_model.rst:213
# 41b4ce2357c04e3b9835c15d31dd1993
msgid "Note: If you hit return without entering a :kbd:`;`, then you will get a prompt like this: :kbd:`address-#`. This is because PG is expecting you to enter more. Enter :kbd:`;` to run your command."
msgstr ""

#: ../../../postgres/data_model.rst:217
# 7ab2de40cf9e441484697bfe71b9aa59
msgid "To view your table schema, you can do this:"
msgstr ""

#: ../../../postgres/data_model.rst:223
#: ../../../postgres/data_model.rst:242
# 80e31d049f9d4de196bb3885d392ce50
# 9ffab6249cce40fe9718447adb596466
msgid "Which should show something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:236
# 5fe1367529904709b548ebccf5cbee1a
msgid "To view your table contents, you can do this:"
msgstr ""

#: ../../../postgres/data_model.rst:250
# a77568ccb1d544ef99845e9fc5624784
msgid "As you can see, our table is empty!"
msgstr ""

#: ../../../postgres/data_model.rst:252
# 1742a7ded8e5496a8a23cd8059bcd324
msgid "Use the approach shown above to make a table called people: Add fields such as phone number, home address, name, etc. (these aren't all valid names: change them to make them valid)."
msgstr ""

#: ../../../postgres/data_model.rst:255
# 4677df3594a546eebaa1e1950683caf0
msgid "Write the SQL you create here:"
msgstr ""

#: ../../../postgres/data_model.rst:296
#: ../../../postgres/queries.rst:289
# d80f6073ef1b409cbb8f1f5d13d13579
# 9653a7309350452f94f1ad93c0538cd4
msgid "Solution:"
msgstr ""

#: ../../../postgres/data_model.rst:306
# 5d5063f7f45b4e22b2d12e7c638c9ee9
msgid "The schema for the table (enter :kbd:`\\\\d people`) looks like this:"
msgstr ""

#: ../../../postgres/data_model.rst:322
# 6455168eea0342f299ab2310f1ddac4d
msgid "For illustration purposes, we have purposely omitted the fkey constraint."
msgstr ""

#: ../../../postgres/data_model.rst:326
# 123942b8beaf4e94a7741c77e8026372
msgid "Create Keys in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:328
# de58f467ca5747e9a7eff9716508fbfe
msgid "The problem with our solution above is that the database doesn't know that people and streets have a logical relationship. To express this relationship, we have to define a foreign key that points to the primary key of the streets table."
msgstr ""

#: ../../../postgres/data_model.rst:337
# 7232649a8ed947d481ef614d0dbeb67b
msgid "adding the key after the table has been created"
msgstr ""

#: ../../../postgres/data_model.rst:338
# a5da4f332ce84d7ba064f065a921c80e
msgid "defining the key at time of table creation"
msgstr ""

#: ../../../postgres/data_model.rst:340
# 3e8514ff893142b2af1bb3f5c8bf93b2
msgid "Our table has already been created, so let's do it the first way:"
msgstr ""

#: ../../../postgres/data_model.rst:348
# 0346b58f3cec4737a115354f7675e413
msgid "That tells the :kbd:`people` table that its :kbd:`street_id` fields must match a valid street :kbd:`id` from the :kbd:`streets` table."
msgstr ""

#: ../../../postgres/data_model.rst:351
# 2b9982a95d64468b87418686b0b89f10
msgid "The more usual way to create a constraint is to do it when you create the table:"
msgstr ""

#: ../../../postgres/data_model.rst:361
# 32dcebe09dd9460da43e6d5f235f63db
msgid "After adding the constraint, our table schema looks like this now:"
msgstr ""

#: ../../../postgres/data_model.rst:381
# 1ba68c03dece4b3e82f0d2ee04d8713b
msgid "Create Indexes in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:383
# 1ea439816d1143d3af8d77679b179b8f
msgid "We want lightning fast searches on peoples names. To provide for this, we can create an index on the name column of our people table:"
msgstr ""

#: ../../../postgres/data_model.rst:409
# 47224ba3fad0433198af05c95632c691
msgid "Dropping Tables in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:411
# d9c980003231496084386fda58480e7c
msgid "If you want to get rid of a table you can use the :kbd:`drop` command:"
msgstr ""

#: ../../../postgres/data_model.rst:418
# 5abc28f8ea394dee9faa7ff6064a0699
msgid "In our example, this would not work - why?"
msgstr ""

#: ../../../postgres/data_model.rst:420
# f5609ff73a22442fac1dfa5d527c3d5a
msgid "Some deep and inspired thoughts as to why..."
msgstr ""

#: ../../../postgres/data_model.rst:436
# 9b4aa8416ff148b09e59ffb1378d30bd
msgid "Sometimes you just can't stand having a table any more. Maybe you are sick of all your friends. How can you get rid of them all in one easy step? Drop the table of course! Of course, right now too much hard work has gone into our table to get rid of it on a whim, but if you really hate your friends that much, nothing's stopping you from ridding yourself of them forever:"
msgstr ""

#: ../../../postgres/data_model.rst:446
# 3759d6c494ac42e5abb008783e926770
msgid "This time it works fine! Why? Are people less important than streets?"
msgstr ""

#: ../../../postgres/data_model.rst:448
# 418023a3a3e94297b446e2592b6066cb
msgid "Some thoughts on why you could drop people:"
msgstr ""

#: ../../../postgres/data_model.rst:464
# 156a8f6f6fa94677ac90c2cd2c4f1994
msgid "If you actually did enter that command and dropped the :kbd:`people` table, now would be a good time to rebuild it, as you will need it in the next exercises."
msgstr ""

#: ../../../postgres/data_model.rst:469
# c550fa738a1d44df9ae46135de9e8100
msgid "A word on PG Admin III"
msgstr ""

#: ../../../postgres/data_model.rst:471
# 4bc5f32dbac348a1b6a37274d33544c2
msgid "We are showing you the SQL commands from the psql prompt because it's a very useful way to learn about databases. However, there are quicker and easier ways to do a lot of what we are showing you. Install PGAdminIII and you can create, drop, alter etc tables using 'point and click' operations in a GUI."
msgstr ""

#: ../../../postgres/data_model.rst:476
# 53f23173edb141d89c438b2817963a51
msgid "Under Ubuntu, you can install it like this:"
msgstr ""

#: ../../../postgres/data_model.rst:485
# 04630f72cc5d4b7abea93a760198e1d0
msgid "You have now seen how to create a brand new database, starting completely from scratch."
msgstr ""

#: ../../../postgres/data_model.rst:491
# b0d16df2a4124a898df43e99407fec15
msgid "Next you'll learn how to use the DBMS to add new data."
msgstr ""

#: ../../../postgres/db_intro.rst:2
# ba03f8754ca3469c8ed8134efeb5a6ae
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../../postgres/db_intro.rst:4
# d4d32d084e4f4c3aae70dc637faddd46
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ../../../postgres/db_intro.rst:8
# 9205eece762540948b3a1db10fec7aee
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../../postgres/db_intro.rst:11
# 67cb6455f755400a8425b2bf05119039
msgid "What is a Database?"
msgstr ""

#: ../../../postgres/db_intro.rst:13
# 0ad4630acc14449ead1588850011875c
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:18
# 8c7b2118e22f4a4ca28f033d36ae7b45
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:23
# 2d46a23d25c7468ca6de38c280016ff8
msgid "Tables"
msgstr ""

#: ../../../postgres/db_intro.rst:25
# 143d572a7f2b4fc88f526d03d1d0c14a
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:40
# 8809d0c6db8c4427a00abee319d5159f
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../../postgres/db_intro.rst:43
# 5b64e575531a42e8b3510738b768d8a3
msgid "Columns / Fields"
msgstr ""

#: ../../../postgres/db_intro.rst:45
# 823f4e8b06174a54ac5a916f299daedb
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:52
# 3eb664014fc14d3cad3504504aa181f0
msgid "A column:"
msgstr ""

#: ../../../postgres/db_intro.rst:61
# 3d27397ad5d44ad88e88b6caf3c5d8ff
msgid "A field:"
msgstr ""

#: ../../../postgres/db_intro.rst:68
# 0e8c82bf5d69435b8987d8f639e7620e
msgid "Records"
msgstr ""

#: ../../../postgres/db_intro.rst:70
# ec03b12fc1384297a3ab2bde290f8e11
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ../../../postgres/db_intro.rst:78
# f9f27d7b315b4a3595b505ae2e91d14c
msgid "Datatypes"
msgstr ""

#: ../../../postgres/db_intro.rst:80
# dcd5ebdc92af4f02abe788c8abc42f60
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ../../../postgres/db_intro.rst:83
# 4bbf1d7e800441299b3982940bec7111
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../../postgres/db_intro.rst:85
# 52486e08c2d3475e9eb5d4982d390192
msgid "String - to store free-form text data"
msgstr ""

#: ../../../postgres/db_intro.rst:86
# 2caf45ddd153413eb021259036107bcb
msgid "Integer - to store whole numbers"
msgstr ""

#: ../../../postgres/db_intro.rst:87
# 18adf8bfc36c47eb88943148220994a5
msgid "Real - to store decimal numbers"
msgstr ""

#: ../../../postgres/db_intro.rst:88
# 25600cb735c8480991f375e300a2d67e
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../../postgres/db_intro.rst:89
# 894ac2b439d14486abff5e0a68307548
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ../../../postgres/db_intro.rst:91
# 6ac9e4cda8a04371a0932d3afdc3648e
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ../../../postgres/db_intro.rst:111
# e1a0bd87f337477b97f43dd39afb516d
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ../../../postgres/db_intro.rst:115
# 9ec81f62b3fd45c4aa4453f8b2dad0f8
msgid "Modelling an Address Database"
msgstr ""

#: ../../../postgres/db_intro.rst:117
# 032eceb9abbd4136b969bc40493e7d5d
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ../../../postgres/db_intro.rst:120
# c3562ee22a4b49849e8900adb6c524e0
msgid "Write some address properties in the space provided:"
msgstr ""

#: ../../../postgres/db_intro.rst:155
# 4074457fd6ea4669abdaff250bec1e8e
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ../../../postgres/db_intro.rst:160
# 8d251f5ed7ba44fab003216fd61b2717
msgid "Database Theory"
msgstr ""

#: ../../../postgres/db_intro.rst:162
# c0429db641db4b4985404b4a1a4a0126
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ../../../postgres/db_intro.rst:166
# 9e3759abe58a4b85b2a664e38f355721
msgid "Normalisation"
msgstr ""

#: ../../../postgres/db_intro.rst:168
# 02ff84f5c2fd42769be36a8b66be5794
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ../../../postgres/db_intro.rst:171
# a5573079cda6495daf47a11dd7a5e5dd
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:176
# 91d3375a9658412dbe0fcf683d8aed38
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../../postgres/db_intro.rst:178
# f1608a2538a04834aa09bd9f31268722
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../../postgres/db_intro.rst:203
# 322c79f44dc749d3be134dfc9f2add5b
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ../../../postgres/db_intro.rst:207
# 8e76e8b5c96942449c277713908b41c3
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ../../../postgres/db_intro.rst:237
# 692377e8590f499484e1ab74b8d1274e
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../../postgres/db_intro.rst:241
# ce60fc3a19284d28bae2df2f8bea2c79
msgid "Indexes"
msgstr ""

#: ../../../postgres/db_intro.rst:243
# bb1782b6d4d0485d93ae9abc202c6cda
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:246
# e1b0d36601804dfe8ee16e6823e26a91
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ../../../postgres/db_intro.rst:256
# fd5974d08d574dc7b400585c208f4369
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../../postgres/db_intro.rst:274
# fe8fc6b2980f496f98d3be834abdaf15
msgid "Sequences"
msgstr ""

#: ../../../postgres/db_intro.rst:276
# ccb91363b6fa4520b231376eb52cd7b5
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ../../../postgres/db_intro.rst:279
# 1a0b02d0cb8245cca413c06a540b6b51
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ../../../postgres/db_intro.rst:290
# eef39f4083744e94b92ede11c79e0972
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../../postgres/db_intro.rst:292
# 0276ba68c11c4699bc179a44db584787
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ../../../postgres/db_intro.rst:305
# 50c46b00c7f14a60be2ef958ede904cc
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../../postgres/db_intro.rst:316
# c11d521021d34290b6da857d247df023
msgid "and"
msgstr ""

#: ../../../postgres/db_intro.rst:326
# 15b717549cfc4022b86a3862ccf57cbd
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ../../../postgres/db_intro.rst:329
# 272ec8db927645eabaaf23446e1ed781
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ../../../postgres/db_intro.rst:335
# 68d694f1e49746e484d536e8d5b4ffdb
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ../../../postgres/db_intro.rst:338
# e9b0a040b39c4e759d4eecd72e108b9b
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ../../../postgres/db_intro.rst:370
# 5d3f6375116b48358a4a9807bd01f698
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../../postgres/db_intro.rst:372
# a302d9aeb8ec465e9b5322753f9d71d9
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../../postgres/db_intro.rst:377
# cd99469b7a39451f8b4cf94db0bdc415
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../../postgres/db_intro.rst:380
# 7c828093a2274fb98c680ec9afd3c454
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ../../../postgres/db_intro.rst:383
# 0ff457860f9e424c84fd502e9638623f
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ../../../postgres/db_intro.rst:386
# 03a2a28287bd422f91ed78341755ac96
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ../../../postgres/db_intro.rst:406
# 10585daf43f84e1886e0c1c3c1b18c98
msgid "Transactions"
msgstr ""

#: ../../../postgres/db_intro.rst:408
# 70572476ccc44b2f9258ae23430ed9d4
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ../../../postgres/db_intro.rst:414
# b7a8a588b1534d69af882a8105425f6a
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ../../../postgres/db_intro.rst:418
# c1b1640c1ac04f3aba78f5c677674886
msgid "remove R20 from Joe"
msgstr ""

#: ../../../postgres/db_intro.rst:419
# 50f0e55669d04abc8b5b7093a069b5f2
msgid "add R20 to Anne"
msgstr ""

#: ../../../postgres/db_intro.rst:421
# 6302684f1b3843969ceadf2c87e79c1a
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ../../../postgres/db_intro.rst:427
# 013bb0d9fb564bc6b6cb07dcf38e33de
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ../../../postgres/db_intro.rst:433
# a8e697610a784d85a5bf29d5faaa2b91
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

#: ../../../postgres/index.rst:3
# fbbeadd9b7aa47ec9b6bab4fcf6f3daa
msgid "|MOD| PostgreSQL"
msgstr ""

#: ../../../postgres/index.rst:5
# 483f33feac454c1d85b487acc3a274b0
msgid "PostgreSQL is a Database Management System (DBMS). In this module, you'll be shown how to use PostgreSQL to create a new database, as well as accessing other typical DBMS functions."
msgstr ""

#: ../../../postgres/queries.rst:2
# 5ce62394084b4e2093df8ad40b9d2b8a
msgid "|LS| Queries"
msgstr ""

#: ../../../postgres/queries.rst:4
# e07780bdff8c400cbc77307879a99e1d
msgid "When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information."
msgstr ""

#: ../../../postgres/queries.rst:7
# 5acf80f10e6c4ac5b689b194da28049e
msgid "**The goal of this lesson:** To learn how to create queries that will return useful information."
msgstr ""

#: ../../../postgres/queries.rst:11
# c6ad2329724b4886be531858fefe8fc9
msgid "Follow-up from previous lesson"
msgstr ""

#: ../../../postgres/queries.rst:13
# b3dc0ad86f804f208dcd5ea538aacb6c
msgid "Let's check that you added a few people to the database successfully:"
msgstr ""

#: ../../../postgres/queries.rst:27
# 89bb9a1674ca4c09866fe52ca3997655
msgid "Ordering results"
msgstr ""

#: ../../../postgres/queries.rst:29
# d95b1194332f4c26942576bb0aefe29a
msgid "Let's get a list of people ordered by their house numbers:"
msgstr ""

#: ../../../postgres/queries.rst:35
#: ../../../postgres/queries.rst:53
#: ../../../postgres/queries.rst:187
#: ../../../postgres/queries.rst:212
#: ../../../postgres/queries.rst:237
#: ../../../postgres/queries.rst:254
#: ../../../postgres/queries.rst:298
#: ../../../postgres/views.rst:30
# 56ea3e1b907f4846b1ef6caffb681627
# 5c29e69e019140a3a494e79b0fda6d77
# 2a4918b912d1491fb034b08f984a63da
# ca79a337f7d74156badf1962d97d537d
# d84d7b08bcd34baa80ecb8bd729a29e1
# 8f297b26fc264ac296ac34d76b851fd9
# f7aceac710aa4b1f84d1706bb917b96c
# 7d427b52ac304377b5580ed0b44b1f1e
msgid "Result:"
msgstr ""

#: ../../../postgres/queries.rst:47
# 5a7efefc9481411494df1f71a9ffbb1c
msgid "You can sort by more than one column:"
msgstr ""

#: ../../../postgres/queries.rst:66
# 3e3aab708efb4c739dd175a634f998d4
msgid "Filtering"
msgstr ""

#: ../../../postgres/queries.rst:68
# 6b4d3a996b164360b767b7e7867caeff
msgid "Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two. Never fear, you can filter the results!"
msgstr ""

#: ../../../postgres/queries.rst:72
# af4ca34aee394c3c869af3d40c0598ef
msgid "Here is an example of a numerical filter:"
msgstr ""

#: ../../../postgres/queries.rst:83
# 9fc7be788a324c08a110ddba8507509f
msgid "You can combine filters (defined using the :kbd:`WHERE` clause) with sorting (defined using the :kbd:`ORDER BY`)"
msgstr ""

#: ../../../postgres/queries.rst:96
# d65814267af44779b0c639ad0a0f0212
msgid "You can also filter based on text data:"
msgstr ""

#: ../../../postgres/queries.rst:107
# 1714ec2c9ee54a4bbf3898dd89d9f296
msgid "Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`i` in them. If you want to search for a string of letters regardless of case, you can do a case insensitive search using the :kbd:`ILIKE` clause:"
msgstr ""

#: ../../../postgres/queries.rst:120
# bb61ebefa17c4e139ebdee99b1f9236f
msgid "That found everyone with a :kbd:`k` or :kbd:`K` in their name. Using the normal :kbd:`ILIKE` clause, you'd get:"
msgstr ""

#: ../../../postgres/queries.rst:132
# 36a14c3e85554f6b8a9bfd7ad177eb08
msgid "Joins"
msgstr ""

#: ../../../postgres/queries.rst:134
# 85f14b56c65643b48260fd810d016db5
msgid "What if you want to see the person's details and their street name (not its id)? In order to do that, you need to join the two tables together in a single query. Lets look at an example:"
msgstr ""

#: ../../../postgres/queries.rst:144
# 14120d695f23486a8f46229f298e703e
msgid "With joins, you will always state the two tables the information is coming from, in this case people and streets.  You also need to specify which two keys must match (foreign key & primary key). If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!"
msgstr ""

#: ../../../postgres/queries.rst:150
# 2b97c2db93154bcdbb7571fa44ee6918
msgid "Here is what the correct output will look like:"
msgstr ""

#: ../../../postgres/queries.rst:162
# 9770103154924f7caa90dcb28ce91af6
msgid "We will revisit joins as we create more complex queries later. Just remember they provide a simple way to combine the information from two or more tables."
msgstr ""

#: ../../../postgres/queries.rst:166
# fa0f6354b9d44f7faf022016ae572b0f
msgid "Subselect"
msgstr ""

#: ../../../postgres/queries.rst:168
# 68a5c37040b44831861eab5def6ffb05
msgid "First, let's do a little tweaking to our data:"
msgstr ""

#: ../../../postgres/queries.rst:178
# a74b3432854941c89ebf904e92937635
msgid "Let's take a quick look at our data after those changes - we reuse our query from the previous section:"
msgstr ""

#: ../../../postgres/queries.rst:199
# dad65d3ce21549d6a95372f1a3014ad9
msgid "Now let's show you a subselection on this data. We want to show only people who live in :kbd:`street_id` number :kbd:`1`."
msgstr ""

#: ../../../postgres/queries.rst:222
# 54b261c532c946ed9169abe9337e8d45
msgid "This is a contrived example and in the above situations it may have been overkill. However when you have to filter based on a selection, subselects are really useful!"
msgstr ""

#: ../../../postgres/queries.rst:227
# ec66cbd10b5c4ac4827c81db0969c60d
msgid "Aggregate Queries"
msgstr ""

#: ../../../postgres/queries.rst:229
# 4130a789d26547fd8a6d71a3adfa4110
msgid "One of the powerful features of a database is its ability to summarise the data in its tables. These summaries are called aggregate queries. Here is a typical example:"
msgstr ""

#: ../../../postgres/queries.rst:246
# 8980158d11e948a1ab98f107055d5fd1
msgid "If we want the counts summarised by street name we can do this:"
msgstr ""

#: ../../../postgres/queries.rst:265
# 32f1c88af91c4724a5a0c8d01996aff3
msgid "Because there is no :kbd:`ORDER BY` clause, on your computer these data may not be in the same order as shown here."
msgstr ""

#: ../../../postgres/queries.rst:268
# 915323607b2e48e18016d1ef12d440a2
msgid "Exercise:"
msgstr ""

#: ../../../postgres/queries.rst:270
# e4120a44399742f4a3f55382a4c571fa
msgid "Summarise the people by street name and show the actual street names instead of the street_id's"
msgstr ""

#: ../../../postgres/queries.rst:309
# f3479ac26e0b489594dccf6371477cfa
msgid "You will notice that we have prefixed field names with table names (e.g. people.name and streets.name). This needs to be done whenever the field name is ambiguous."
msgstr ""

#: ../../../postgres/queries.rst:316
# c6f1abd9c9af4fc69294280fe19a4fb2
msgid "You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it."
msgstr ""

#: ../../../postgres/queries.rst:322
# ee7cce66df92463890117a3b111e967a
msgid "Next you'll see how to create views from the queries that you've written."
msgstr ""

#: ../../../postgres/rules.rst:2
# af2873a49d7f4aef8a73375bc22d2949
msgid "|LS| Rules"
msgstr ""

#: ../../../postgres/rules.rst:4
# 70e6fbd476074320ba4a31c04169e67f
msgid "Rules allow the \"query tree\" of an incoming query to be rewritten. One common usage is to implement views, including updatable view. *- Wikipedia*"
msgstr ""

#: ../../../postgres/rules.rst:7
# aca9726722ce4bd9bf19f1ce03cf9447
msgid "**The goal for this lesson:** To learn how to create new rules for the database."
msgstr ""

#: ../../../postgres/rules.rst:11
# 24ea177502a64957af3feea0e119bde0
msgid "Materialised Views (Rule based views)"
msgstr ""

#: ../../../postgres/rules.rst:13
# 4d0eb9f5f0884e4ba8df968d3fe28483
msgid "Say you want to log every change of phone_no in your people table in to a people_log table. So you set up a new table"
msgstr ""

#: ../../../postgres/rules.rst:20
# f6eda9f44be9460eb82622ca75330dbc
msgid "In the next step create a rule, that logs every change of a phone_no in the people table into the people_log table:"
msgstr ""

#: ../../../postgres/rules.rst:29
# 41f94b09a42a41df8cfa61aa77c943d5
msgid "To test that the rule works, let's modify a phone number:"
msgstr ""

#: ../../../postgres/rules.rst:35
# 6a8bc01aed3e4436bfc6defc4fcfe367
msgid "Check that the table was updated correctly:"
msgstr ""

#: ../../../postgres/rules.rst:44
# 5f425df0e80f4ef2a33c9cb06be423d6
msgid "Now, thanks to the rule we created, the :kbd:`people_log` table will look like this:"
msgstr ""

#: ../../../postgres/rules.rst:54
# dc2906d6b25647bca5ef3346c37dbf88
msgid "The value of the :kbd:`time` field will depend on the current date and time."
msgstr ""

#: ../../../postgres/rules.rst:60
# 7959de372e4a4f81a6b4bf47b8c16ac7
msgid "Rules allow you to automatically add or change data in your database to reflect changes in other parts of the database."
msgstr ""

#: ../../../postgres/rules.rst:66
# 79859fb2127143488c1cc46eb31a72e8
msgid "The next module will introduce you to PostGIS, which takes these database concepts and applies them to GIS data."
msgstr ""

#: ../../../postgres/views.rst:2
# a174e8b3ce034236a011ba13fca673c8
msgid "|LS| Views"
msgstr ""

#: ../../../postgres/views.rst:4
# 4b31904825fd4f4ca982fda26620e1bb
msgid "When you write a query, you need to spend a lot of time and effort formulating it. With views, you can save the definition of a sql query in a reusable 'virtual table'."
msgstr ""

#: ../../../postgres/views.rst:8
# e65d3d030139460b8772ec27ed49bcb5
msgid "**The goal for this lesson:** To save a query as a view."
msgstr ""

#: ../../../postgres/views.rst:11
# 6821208a1c6547e99dbd797d6f188e18
msgid "Creating a View"
msgstr ""

#: ../../../postgres/views.rst:13
# 2560cfd1473c40128f16ffcd229e2b09
msgid "You can treat a view just like a table, but its data is sourced from a query. Let's make a simple view based on the above."
msgstr ""

#: ../../../postgres/views.rst:23
# 911f9eb35bb649aaace981c81668ef9a
msgid "As you can see the only change is the :kbd:`create view roads_count_v as` part at the beginning. The nice thing is that we can now select data from that view:"
msgstr ""

#: ../../../postgres/views.rst:42
# d3c85a86e404442990117306599f0b6e
msgid "Modifying a View"
msgstr ""

#: ../../../postgres/views.rst:44
# e7c9121dec774d8a92f8550c223d573f
msgid "A view is not fixed, and it contains no 'real data'. This means you can easily change it without impacting on any data in your database."
msgstr ""

#: ../../../postgres/views.rst:55
# 7eb2766488924b1884933b37b396763d
msgid "(This example also shows the best practice convention of using UPPER CASE for all SQL keywords.)"
msgstr ""

#: ../../../postgres/views.rst:58
# e3e280190b9e479e95fecdccc360175f
msgid "You will see that we have added an :kbd:`ORDER BY` clause so that our view rows are nicely sorted:"
msgstr ""

#: ../../../postgres/views.rst:71
# bc0b46b6ccee4b58ac982855fe1d3399
msgid "Dropping a View"
msgstr ""

#: ../../../postgres/views.rst:73
# 193f60f8367e42a783e979a1bec137c5
msgid "If you no longer need a view, you can delete it like this:"
msgstr ""

#: ../../../postgres/views.rst:82
# b380bbe55a9849ddafa28ca804e72f7f
msgid "Using views, you can save a query and access its results as if it were a table."
msgstr ""

#: ../../../postgres/views.rst:87
# 6f49e8dd4cc6436fa14584c2b5b533fd
msgid "Sometimes, when changing data, you want your changes to have effects elsewhere in the database. The next lesson will show you how to do this."
msgstr ""

