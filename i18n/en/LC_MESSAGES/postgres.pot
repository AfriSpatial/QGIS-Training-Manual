# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-07-10 11:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../postgres/adding_data.rst:2
# f353722861d14cdfa04c5acbf07e7901
msgid "|LS| Adding Data to the Model"
msgstr ""

#: ../../../postgres/adding_data.rst:4
# 05c82e2fc83a4ab6811c184c55a67542
msgid "The models we've created will now need to be populated with the data they're intended to contain."
msgstr ""

#: ../../../postgres/adding_data.rst:7
# 9c6497afe42143ab8adfa8092ee1ef78
msgid "**The goal for this lesson:** To learn how to insert new data into the database models."
msgstr ""

#: ../../../postgres/adding_data.rst:11
# 7dd710abbceb4eaf8a97b19009c9cba6
msgid "Insert statement"
msgstr ""

#: ../../../postgres/adding_data.rst:13
# 0e553942846742dd8a0a134f98d3871d
msgid "How do you add data to a table? The sql :kbd:`INSERT` statement provides the functionality for this:"
msgstr ""

#: ../../../postgres/adding_data.rst:20
# c5fae5018b8043e5a0cc9daa95bbd146
msgid "A couple of things to note:"
msgstr ""

#: ../../../postgres/adding_data.rst:22
# 89413cdd90104675abb5c02216d565a8
msgid "after the table name (:kbd:`streets`), you list the column names that you will be populating (in this case only the :kbd:`name` column)."
msgstr ""

#: ../../../postgres/adding_data.rst:24
# 8b74fa880f7648a3b7aa13de832f1bb6
msgid "after the :kbd:`values` keyword, place the list of field values."
msgstr ""

#: ../../../postgres/adding_data.rst:25
# 7c5b08ac30394bac9a475863a825861e
msgid "strings should be quoted using single quotes."
msgstr ""

#: ../../../postgres/adding_data.rst:26
# f0b3fc8cbb9a4f8686f79f49dc98a4c3
msgid "you will note that I did not insert a value for the :kbd:`id` column - that is because it is a sequence and will be autogenerated."
msgstr ""

#: ../../../postgres/adding_data.rst:28
# d811001ffeb249a8a5950f3c6ba1dc0e
msgid "if you do manually set the :kbd:`id`, you may cause serious problems with the integrity of your database."
msgstr ""

#: ../../../postgres/adding_data.rst:31
# f9cfc540d596430bb29d77908e4b7efb
msgid "You should see :kbd:`INSERT 0 1` if it is successful."
msgstr ""

#: ../../../postgres/adding_data.rst:33
# 9f11ecbaf1b54014bdcdbc0503a6788e
msgid "You can see the result of your insert action by selecting all the data in the table:"
msgstr ""

#: ../../../postgres/adding_data.rst:40
# 20cd0a81ae3347cc942a61ed4cda53db
msgid "result:"
msgstr ""

#: ../../../postgres/adding_data.rst:50
# c4933bfea3884fd6aa4c33053f83627f
msgid "Now you try:"
msgstr ""

#: ../../../postgres/adding_data.rst:52
# aa672e92afb44f5fa638ad75e18ada09
msgid "Use the :kbd:`INSERT` command to add a new street to the :kbd:`streets` table."
msgstr ""

#: ../../../postgres/adding_data.rst:54
# edf10fcf75774cc28b48716dbd0b385f
msgid "Write the sql you used here:"
msgstr ""

#: ../../../postgres/adding_data.rst:70
# dfe280171651419096a4e85a4f3f1060
msgid "Sequencing data addition according to constraints"
msgstr ""

#: ../../../postgres/adding_data.rst:72
# 1792828776da460592aa69fd33ceb679
msgid "Try to add a person to the people table with the following details:"
msgstr ""

#: ../../../postgres/adding_data.rst:81
# c399fe32043f4db9a1c17c4d7a87d682
msgid "Remember, we defined phone numbers as strings."
msgstr ""

#: ../../../postgres/adding_data.rst:83
# 44ad5dd343ad415c89e7438893776e5a
msgid "What problems did you encounter?"
msgstr ""

#: ../../../postgres/adding_data.rst:104
# 95d33002a93b4e33a59c5fe2362231de
msgid "You should have an error report if you try to do this without first creating a record for Main Street in the :kbd:`streets` table."
msgstr ""

#: ../../../postgres/adding_data.rst:107
# c3ca1d6437f64badbacae901af73f955
msgid "What error did you get?"
msgstr ""

#: ../../../postgres/adding_data.rst:110
# 9903985ced714608a118ee885b33cb04
msgid "You can't add the street using its name"
msgstr ""

#: ../../../postgres/adding_data.rst:111
# 95d8bb14a1ef4deaae7897af51adecab
msgid "You can't add a street using a street :kbd:`id` before first creating the street record on the streets table"
msgstr ""

#: ../../../postgres/adding_data.rst:114
# 424dfc14b7844411a81db6664dc2fc64
msgid "Remember that our two tables are linked via a Primary/Foreign Key pair. This means that no valid person can be created without there also being a valid corresponding street record."
msgstr ""

#: ../../../postgres/adding_data.rst:118
# 1c63a56cea2c452ea73cf4d1f5fa0fb1
msgid "Here is how we made our friend:"
msgstr ""

#: ../../../postgres/adding_data.rst:126
# f4b35e1065cd4bab9637f984a642f259
msgid "If you look at the streets table again (using a select statement as before), you'll see that the :kbd:`id` for the :kbd:`Main Street` entry is :kbd:`2`. That's why we could merely enter the number :kbd:`2` above. Even though we're not seeing :kbd:`Main Street` written out fully in the entry above, the database will be able to associate that with the :kbd:`street_id` value of :kbd:`2`."
msgstr ""

#: ../../../postgres/adding_data.rst:134
# 38ff936ef2ef46e28619785b279eacf4
msgid "Select data"
msgstr ""

#: ../../../postgres/adding_data.rst:136
# 2da3833e342e4629a9013057a57b3b4c
msgid "We have already shown you the syntax for selecting records. Lets look at a few more examples:"
msgstr ""

#: ../../../postgres/adding_data.rst:151
# 79acf16a29d342c0b7d0b1029141703d
msgid "In later sessions we will go into more detail on how to select and filter data."
msgstr ""

#: ../../../postgres/adding_data.rst:154
# 6215edbe43904030baf0af67e2193a06
msgid "Update data"
msgstr ""

#: ../../../postgres/adding_data.rst:156
# 7ac114aac63b4305a93186f3e5355f5a
msgid "What is you want to make a change to some existing data? For example a street name is changed:"
msgstr ""

#: ../../../postgres/adding_data.rst:163
# bcf3605ac28b4009b5b25e1646b9abb3
msgid "Be very careful using such update statements - if more than one record matches your :kbd:`WHERE` clause, they will all be updated!"
msgstr ""

#: ../../../postgres/adding_data.rst:166
# 5a65873df4584160a21d6a5ff58896f2
msgid "A better solution is to use the primary key of the table to reference the record to be changed:"
msgstr ""

#: ../../../postgres/adding_data.rst:173
# 037b9e6ffddb4e1c98c6a6adf0b901ec
msgid "It should return :kbd:`UPDATE 1`."
msgstr ""

#: ../../../postgres/adding_data.rst:175
# eaba902689ae474ba36a59159fd0c3c6
msgid "the :kbd:`WHERE` statement criteria are case sensitive :kbd:`Main Street` <> :kbd:`Main street`"
msgstr ""

#: ../../../postgres/adding_data.rst:179
# cc26085b78b74b2e87bd30df5d21493f
msgid "Delete Data"
msgstr ""

#: ../../../postgres/adding_data.rst:181
# 357b9b6ac34048d7b317e86731e1084b
msgid "Some times you fall out of friendship with people. Sounds like a job for the :kbd:`DELETE` command!"
msgstr ""

#: ../../../postgres/adding_data.rst:188
# 79f25809bb7346a29cfcd5b6b0ceb5d0
msgid "Let's look at our people table now:"
msgstr ""

#: ../../../postgres/adding_data.rst:197
# e74139c4e60248d6a6a9daa117e4f146
msgid "**Exercise:** Use the skills you learned earlier to add some new friends to your database:"
msgstr ""

#: ../../../postgres/adding_data.rst:210
#: ../../../postgres/data_model.rst:483
#: ../../../postgres/db_intro.rst:425
#: ../../../postgres/queries.rst:314
#: ../../../postgres/rules.rst:58
#: ../../../postgres/views.rst:80
# 4415636ceeca4dee83af6d480e4cfb5c
# 57da8dc3f2eb4ed3870a535a0c96d2e0
# 66655f1eb94743d58eba13abc11901e5
# a8c46a27f8aa4901a1fa4cf1251a8a84
# a27b1dc3182a470c80d2f9e700d8798e
# be10536b61b54271aa336915b8000a75
msgid "|IC|"
msgstr ""

#: ../../../postgres/adding_data.rst:212
# b9716afe5828449cad04a3da7a4aec19
msgid "Now you know how to add new data to the existing models you created previously. Remember that if you want to add new kinds of data, you may want to modify and/or create new models to contain that data."
msgstr ""

#: ../../../postgres/adding_data.rst:217
#: ../../../postgres/data_model.rst:489
#: ../../../postgres/db_intro.rst:431
#: ../../../postgres/queries.rst:320
#: ../../../postgres/rules.rst:64
#: ../../../postgres/views.rst:85
# 28b2e32c0c93498ea36d0671b5c23d55
# 2b26e3dd917145aa99b6e97492dee796
# 1d13f2a31fa947908b19b445a2140eab
# 53fffb9ae32744a8b96952ba89baca16
# 18973ee7a4ca406c8da66b2415dfd1ce
# beb205616b304ec889f88c324dd9ebe7
msgid "|WN|"
msgstr ""

#: ../../../postgres/adding_data.rst:219
# 490f419f03f441d797805ddbc5152ba4
msgid "Now that you've added some data, you'll learn how to use queries to access this data in various ways."
msgstr ""

#: ../../../postgres/data_model.rst:2
# f2bf06e5f9944dbe81484b4a83f380df
msgid "|LS| Implementing the Data Model"
msgstr ""

#: ../../../postgres/data_model.rst:4
# 75aa953ef07e4e4081bdfda99b298b59
msgid "Now that we've covered all the theory, let's create a new database. This database will be used for our exercises for the lessons that will follow afterwards."
msgstr ""

#: ../../../postgres/data_model.rst:8
# 5398aaf99ad146a085cd9e3bc9b00cdd
msgid "**The goal for this lesson:** To install the required software and use it to implement our example database."
msgstr ""

#: ../../../postgres/data_model.rst:12
# 9ac448b592f447acbc791ca835991fa2
msgid "Install PostgreSQL"
msgstr ""

#: ../../../postgres/data_model.rst:14
#: ../../../postgres/data_model.rst:51
# c4972d1211964f35aa2a716aa4c80298
# 7adffb1bad1b46e99db982db0c66ec88
msgid "Under Ubuntu:"
msgstr ""

#: ../../../postgres/data_model.rst:20
# f192cf32b4e948f78f341d5980c29bc0
msgid "You should get a message like this:"
msgstr ""

#: ../../../postgres/data_model.rst:39
# 47903a5fe1cd4c1d9ed58ac8890df7ba
msgid "Press :kbd:`Y` and :kbd:`Enter` and wait for the download and installation to finish."
msgstr ""

#: ../../../postgres/data_model.rst:43
# a4ccaf7911134a4282c89207b6a4f618
msgid "Help"
msgstr ""

#: ../../../postgres/data_model.rst:45
# 184b01addcf34ff494509033a5b011a9
msgid "PostgreSQL has very good `online <http://www.postgresql.org/docs/9.1/static/index.html>`_ documentation."
msgstr ""

#: ../../../postgres/data_model.rst:49
# 5700f22f1efb4a29a20ea68ced7eeb86
msgid "Create a database user"
msgstr ""

#: ../../../postgres/data_model.rst:53
# c3bd8d4dac664498bff2f5f38e2ad8c9
msgid "After the installation is complete, run this command to become the postgres user and then create a new database user:"
msgstr ""

#: ../../../postgres/data_model.rst:60
# cb8b5232eda945a1a572da9cefdd1f76
msgid "Type in your normal log in password when prompted (you need to have sudo rights)."
msgstr ""

#: ../../../postgres/data_model.rst:62
# 8869d01268e74bc88faa60b6ecd413db
msgid "Now, at the postgres user's bash prompt, create the database user. Make sure the user name matches your unix login name: it will make your life much easier, as postgres will automatically authenticate you when you are logged in as that user."
msgstr ""

#: ../../../postgres/data_model.rst:71
# c7b27aac9b344d0b81b83a38ac4b7b9a
msgid "Enter a password when prompted. I normally use a different password to my usual unix login."
msgstr ""

#: ../../../postgres/data_model.rst:74
# 10ccc297b9654f23a9a8431c443a07a0
msgid "What do those options mean?"
msgstr ""

#: ../../../postgres/data_model.rst:86
# b68a01fc00f142c2beba68e5aa7ec269
msgid "Now you should should leave the postgres user's bash shell environment by typing:"
msgstr ""

#: ../../../postgres/data_model.rst:94
# 00e089ca5fe04f5aaa5bf92076fca78d
msgid "Verify the new account"
msgstr ""

#: ../../../postgres/data_model.rst:100
# 59a8165a05fe4cca99c9622507065ceb
msgid "Should return something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:113
#: ../../../postgres/data_model.rst:144
# a4418916292f44ccb9cde892f3a57e87
# 98d09162eb6b41b68de76a2612bd5e6a
msgid "Type :kbd:`q` to exit."
msgstr ""

#: ../../../postgres/data_model.rst:116
# 885db0b86f434137a5fe9e2cb2f06310
msgid "Create a database"
msgstr ""

#: ../../../postgres/data_model.rst:118
# caf749ea17fa491d969755f5214ebd3d
msgid "The :kbd:`createdb` command is used to create a new database. It should be run from the bash shell prompt."
msgstr ""

#: ../../../postgres/data_model.rst:125
# 92f6820d7b1e49708460758cb32586ba
msgid "You can verify the existence of your new database by using this command:"
msgstr ""

#: ../../../postgres/data_model.rst:131
# 99fce45043e64e4cb94a49d683bc775a
msgid "Which should return something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:147
# 63e2f53aa4274699808025d97d151b9e
msgid "Starting a database shell session"
msgstr ""

#: ../../../postgres/data_model.rst:149
# 7691fa5907204804ab9ecb785a231062
msgid "You can connect to your database easily like this:"
msgstr ""

#: ../../../postgres/data_model.rst:155
# da661419590242f89f392c471853d9fd
msgid "To exit out of the psql database shell, type:"
msgstr ""

#: ../../../postgres/data_model.rst:161
# 5d9bf7a48fb040fd91360613562f0be1
msgid "For help in using the shell, type:"
msgstr ""

#: ../../../postgres/data_model.rst:167
# eb4e649713784ceb80aa8c2d4832e18f
msgid "For help in using sql commands, type:"
msgstr ""

#: ../../../postgres/data_model.rst:173
# d5993ca15f924551bb04b7104fa30438
msgid "To get help on a specific command, type (for example):"
msgstr ""

#: ../../../postgres/data_model.rst:179
# 8e10f8555bfa4d77b10193e2c782d484
msgid "See also the `Psql cheat sheet <../_static/postgres/psql_cheatsheet.pdf>`_ - available online `here <http://www.postgresonline.com/special_feature.php?sf_name=postgresql83_psql_cheatsheet&outputformat=html>`_."
msgstr ""

#: ../../../postgres/data_model.rst:184
# 65465398b6f740af90f05a1397674400
msgid "Make Tables in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:186
# b9ad062642d34683aa99bac7c83ed072
msgid "Let's start making some tables! We will use our ER Diagram as a guide. First, let's create a streets table:"
msgstr ""

#: ../../../postgres/data_model.rst:193
# 8c3009d54253422abba29aced9c79991
msgid ":kbd:`serial` and :kbd:`varchar` are **data types**. :kbd:`serial` tells PostgreSQL to start an integer sequence (autonumber) to populate the :kbd:`id` automatically for every new record. :kbd:`varchar(50)` tells PostgreSQL to create a character field of 50 characters in length."
msgstr ""

#: ../../../postgres/data_model.rst:198
# 0884927a05dd4ebda8b73cdeb7c4fa5b
msgid "You will notice that the command ends with a :kbd:`;` - all SQL commands should be terminated this way. When you press enter, psql will report something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:210
# 89ea74bcbab5414cbb28327d093a09f2
msgid "That means your table was created successfully, with a primary key :kbd:`streets_pkey` using :kbd:`streets.id`."
msgstr ""

#: ../../../postgres/data_model.rst:213
# d28d8994a2da4b698bb752d28202ce68
msgid "Note: If you hit return without entering a :kbd:`;`, then you will get a prompt like this: :kbd:`address-#`. This is because PG is expecting you to enter more. Enter :kbd:`;` to run your command."
msgstr ""

#: ../../../postgres/data_model.rst:217
# 8f9092d0dfdf47b18b58ba9c301807dc
msgid "To view your table schema, you can do this:"
msgstr ""

#: ../../../postgres/data_model.rst:223
#: ../../../postgres/data_model.rst:242
# 527875fe99cd432f9c63f17d5bd8096f
# b0450b32fbcd457cbac22d4693229b74
msgid "Which should show something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:236
# 88fe1c85ff774156af3f565cc01b9bdb
msgid "To view your table contents, you can do this:"
msgstr ""

#: ../../../postgres/data_model.rst:250
# 437753b5553847b2b9e4506b3c996276
msgid "As you can see, our table is empty!"
msgstr ""

#: ../../../postgres/data_model.rst:252
# 6139193a973c4833aa9df6c45116122d
msgid "Use the approach shown above to make a table called people: Add fields such as phone number, home address, name, etc. (these aren't all valid names: change them to make them valid)."
msgstr ""

#: ../../../postgres/data_model.rst:255
# 5103aeaa431542d7a1d02fe0ff67c828
msgid "Write the SQL you create here:"
msgstr ""

#: ../../../postgres/data_model.rst:296
#: ../../../postgres/queries.rst:289
# 9613d51985fd4d6fbc82c82d8a798453
# 9516b7edd38b431b8be1ccf181f71576
msgid "Solution:"
msgstr ""

#: ../../../postgres/data_model.rst:306
# a5e8aec5fbd24b269d8a1f81f3970c0f
msgid "The schema for the table (enter :kbd:`\\\\d people`) looks like this:"
msgstr ""

#: ../../../postgres/data_model.rst:322
# 86fade5c0ee744249aca9146ba614244
msgid "For illustration purposes, we have purposely omitted the fkey constraint."
msgstr ""

#: ../../../postgres/data_model.rst:326
# 66dd6bc629d3479f86a16e0d1de28928
msgid "Create Keys in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:328
# 8869bc1dcf514a8dad635c796bfe7b8b
msgid "The problem with our solution above is that the database doesn't know that people and streets have a logical relationship. To express this relationship, we have to define a foreign key that points to the primary key of the streets table."
msgstr ""

#: ../../../postgres/data_model.rst:337
# f7f05fe81d7e4031af96317e264cbbf7
msgid "adding the key after the table has been created"
msgstr ""

#: ../../../postgres/data_model.rst:338
# 435bc1036f53437690c72f7596b14543
msgid "defining the key at time of table creation"
msgstr ""

#: ../../../postgres/data_model.rst:340
# 35ee16efba654d1e93771823ec2828f3
msgid "Our table has already been created, so let's do it the first way:"
msgstr ""

#: ../../../postgres/data_model.rst:348
# 3cbf344166d941509e51f45d9346531a
msgid "That tells the :kbd:`people` table that its :kbd:`street_id` fields must match a valid street :kbd:`id` from the :kbd:`streets` table."
msgstr ""

#: ../../../postgres/data_model.rst:351
# 5960e533390944059e19adf26b15066a
msgid "The more usual way to create a constraint is to do it when you create the table:"
msgstr ""

#: ../../../postgres/data_model.rst:361
# ed5d6797805c4569b88a23ca02c5403e
msgid "After adding the constraint, our table schema looks like this now:"
msgstr ""

#: ../../../postgres/data_model.rst:381
# e8fd482c63d24eb19699abcdf6febf73
msgid "Create Indexes in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:383
# 46121bb70cca4ea7baa214bbe7c865b1
msgid "We want lightning fast searches on peoples names. To provide for this, we can create an index on the name column of our people table:"
msgstr ""

#: ../../../postgres/data_model.rst:409
# fd215f61c7004e2ea65eceb67241c210
msgid "Dropping Tables in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:411
# f1bfe6ecc2594f089267f029a4a1cf38
msgid "If you want to get rid of a table you can use the :kbd:`drop` command:"
msgstr ""

#: ../../../postgres/data_model.rst:418
# 2ec18990c2c74d83b978941c717f7b5c
msgid "In our example, this would not work - why?"
msgstr ""

#: ../../../postgres/data_model.rst:420
# a7821642714c4d858c36dce559a41fc7
msgid "Some deep and inspired thoughts as to why..."
msgstr ""

#: ../../../postgres/data_model.rst:436
# 616267296a4c410a9f5701105af252ec
msgid "Sometimes you just can't stand having a table any more. Maybe you are sick of all your friends. How can you get rid of them all in one easy step? Drop the table of course! Of course, right now too much hard work has gone into our table to get rid of it on a whim, but if you really hate your friends that much, nothing's stopping you from ridding yourself of them forever:"
msgstr ""

#: ../../../postgres/data_model.rst:446
# 90f42314a26f4f0596c555ffb3f4df1d
msgid "This time it works fine! Why? Are people less important than streets?"
msgstr ""

#: ../../../postgres/data_model.rst:448
# 9730c919b8754543b1ca96a4774150d4
msgid "Some thoughts on why you could drop people:"
msgstr ""

#: ../../../postgres/data_model.rst:464
# 56e391a5379d428caa7c3faf3c89b5ef
msgid "If you actually did enter that command and dropped the :kbd:`people` table, now would be a good time to rebuild it, as you will need it in the next exercises."
msgstr ""

#: ../../../postgres/data_model.rst:469
# 394cf9169b95447e9fec72bd14c2450f
msgid "A word on PG Admin III"
msgstr ""

#: ../../../postgres/data_model.rst:471
# 7971b9096182448b90151c1894ddaffb
msgid "We are showing you the SQL commands from the psql prompt because it's a very useful way to learn about databases. However, there are quicker and easier ways to do a lot of what we are showing you. Install PGAdminIII and you can create, drop, alter etc tables using 'point and click' operations in a GUI."
msgstr ""

#: ../../../postgres/data_model.rst:476
# 11f2121342754a29be4d19557f7c862f
msgid "Under Ubuntu, you can install it like this:"
msgstr ""

#: ../../../postgres/data_model.rst:485
# b2a3c10b0b69427585f6b122edcb3e5f
msgid "You have now seen how to create a brand new database, starting completely from scratch."
msgstr ""

#: ../../../postgres/data_model.rst:491
# 8978fcfa23f348918558d073a85fabe2
msgid "Next you'll learn how to use the DBMS to add new data."
msgstr ""

#: ../../../postgres/db_intro.rst:2
# 7eae16b0c8e340d9973046978f7e33db
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../../postgres/db_intro.rst:4
# 0ad5c43194744379bab87610ed716e55
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ../../../postgres/db_intro.rst:8
# 96ca9a79cb554a1ca2b2f502c2601d53
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../../postgres/db_intro.rst:11
# 63c76011c2c44f9e9913cc1e55b55bbd
msgid "What is a Database?"
msgstr ""

#: ../../../postgres/db_intro.rst:13
# cfe5faf6727d42ba90fc22a1f657f0ee
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:18
# 0074aabce0e04ec391cebe78b5521feb
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:23
# cec68fe08c1f41d9ad4f26f4ff0a8508
msgid "Tables"
msgstr ""

#: ../../../postgres/db_intro.rst:25
# d52475c247ba48269383246bd254e6cf
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:40
# b322922f25494fbc85e444c8b71ed1c6
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../../postgres/db_intro.rst:43
# 8432edc20c464ccc95b54b88d64f4e8a
msgid "Columns / Fields"
msgstr ""

#: ../../../postgres/db_intro.rst:45
# 5a4a145f423a4b4bb0a31eec80128b93
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:52
# 51a9a6badbd44025af293e38945c6e38
msgid "A column:"
msgstr ""

#: ../../../postgres/db_intro.rst:61
# 6377622b9d5248c1801782a3bfe8f3a5
msgid "A field:"
msgstr ""

#: ../../../postgres/db_intro.rst:68
# 37bdaad867a24f4e904ef5f15137f1e4
msgid "Records"
msgstr ""

#: ../../../postgres/db_intro.rst:70
# 05d79872acf74173ae9ced3ec3ef70ff
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ../../../postgres/db_intro.rst:78
# 1608a1066ef7425288a8828051602720
msgid "Datatypes"
msgstr ""

#: ../../../postgres/db_intro.rst:80
# f66d054c7edc4d0ca5d7107615a95569
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ../../../postgres/db_intro.rst:83
# 0c78aaf243934f3d828b83d2dd1c86f0
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../../postgres/db_intro.rst:85
# 2e367fe1d9c74902bea6fb5d18497abb
msgid "String - to store free-form text data"
msgstr ""

#: ../../../postgres/db_intro.rst:86
# 8557cab437e04e76880ee62d1c29c8f4
msgid "Integer - to store whole numbers"
msgstr ""

#: ../../../postgres/db_intro.rst:87
# b2f005a703d646c8b59648c60da503bb
msgid "Real - to store decimal numbers"
msgstr ""

#: ../../../postgres/db_intro.rst:88
# 772d0115bde046d1bc906d3dac2d8e98
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../../postgres/db_intro.rst:89
# 6875354f0bfb44a9bfb60678bc569848
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ../../../postgres/db_intro.rst:91
# a91911f221074b0eb070867d8e7b5e3c
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ../../../postgres/db_intro.rst:111
# b2b9dc112fda4c098069900110e621e6
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ../../../postgres/db_intro.rst:115
# d3612ba5f3554d55a63883b4b5ef4841
msgid "Modelling an Address Database"
msgstr ""

#: ../../../postgres/db_intro.rst:117
# feb3c93b7e924353b1fe23c64a4f5152
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ../../../postgres/db_intro.rst:120
# 79e3041e6fb6409ab4287e854abcc6e2
msgid "Write some address properties in the space provided:"
msgstr ""

#: ../../../postgres/db_intro.rst:155
# c31862dec8bc427e852065bf710577ce
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ../../../postgres/db_intro.rst:160
# c9cde5d29292404aa9fec5e3fab5f063
msgid "Database Theory"
msgstr ""

#: ../../../postgres/db_intro.rst:162
# f8e7fcd904bc40f294bebf7aab22d0c2
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ../../../postgres/db_intro.rst:166
# 0fa1f7c5213f4a82abc6420f44bf4d89
msgid "Normalisation"
msgstr ""

#: ../../../postgres/db_intro.rst:168
# 8f69e9f5090645e88a19cdd113c32db0
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ../../../postgres/db_intro.rst:171
# eef14ea73bd84b648964657f533d51df
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:176
# 6181d8da0b914daca62802411e319d63
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../../postgres/db_intro.rst:178
# b0819fe7048343f6adae4e30fa7be724
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../../postgres/db_intro.rst:203
# b0eb899d1cca4c31ae2d1fb3219174d1
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ../../../postgres/db_intro.rst:207
# da60c5d25cc74199a1cfa363c0f8009c
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ../../../postgres/db_intro.rst:237
# fc81b0c12cd146be82a7bfbc811da072
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../../postgres/db_intro.rst:241
# ee39bc4287774b1f914923499d651d5b
msgid "Indexes"
msgstr ""

#: ../../../postgres/db_intro.rst:243
# 58210454620f429b9e5534941532779d
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:246
# dda4313b022249ec874e548647886df9
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ../../../postgres/db_intro.rst:256
# e3f7d9a655194f04b5d511120fc23fb1
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../../postgres/db_intro.rst:274
# a04d35a1246d43ada10c9fa60b9470e0
msgid "Sequences"
msgstr ""

#: ../../../postgres/db_intro.rst:276
# 2402562082824a2a94cef29a1270110a
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ../../../postgres/db_intro.rst:279
# d61b8c7df5864b2992b41d67a01ee861
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ../../../postgres/db_intro.rst:290
# e8219873c3e84a4babe6dd3a9865ab9b
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../../postgres/db_intro.rst:292
# 91bee35f7fb243cbbf3f80c2fd1d9f4d
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ../../../postgres/db_intro.rst:305
# 0b9b7628c8b84d1992f8ddb602bbe654
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../../postgres/db_intro.rst:316
# 0bbac26e73664e42a3999b650be99445
msgid "and"
msgstr ""

#: ../../../postgres/db_intro.rst:326
# 42fca5529c614289ac195383d755f701
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ../../../postgres/db_intro.rst:329
# 5b1e3a95c01f417babda37a382500afc
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ../../../postgres/db_intro.rst:335
# 8eaa91a3159941528cced539e6b25e3b
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ../../../postgres/db_intro.rst:338
# 2414511531b54e8698c38124ad48a1cd
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ../../../postgres/db_intro.rst:370
# 95a701b0c9f1478a802cfacd758e8e58
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../../postgres/db_intro.rst:372
# ca6ee41062754c9c87e699feb42b9234
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../../postgres/db_intro.rst:377
# b8ec1503b4dc454ea9d81a461d961bf2
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../../postgres/db_intro.rst:380
# 5f1410398abe4142a2bd812ff2fa5117
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ../../../postgres/db_intro.rst:383
# 92dfce6ef8d84110a27cab93833fbe49
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ../../../postgres/db_intro.rst:386
# d2ce63bfd68145499e133f3fc8b4b571
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ../../../postgres/db_intro.rst:406
# 015f04b3951c464ea3278d1ea48b28e8
msgid "Transactions"
msgstr ""

#: ../../../postgres/db_intro.rst:408
# 5c8e029e51a7428699a9cf83351d3e66
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ../../../postgres/db_intro.rst:414
# ec011d12ca70424b8aeb0c31a2b9e768
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ../../../postgres/db_intro.rst:418
# eff38c03e8af455e8af1fc954c4f8c9d
msgid "remove R20 from Joe"
msgstr ""

#: ../../../postgres/db_intro.rst:419
# bc54090bd3e741f9897ddef923a9c921
msgid "add R20 to Anne"
msgstr ""

#: ../../../postgres/db_intro.rst:421
# f3e15a45c1404f3b95c242d1cbbef30a
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ../../../postgres/db_intro.rst:427
# 0cd2169c73c24611835594ab9ead441a
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ../../../postgres/db_intro.rst:433
# 932dc4b9cb384aefae8835c39d6c6009
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

#: ../../../postgres/index.rst:3
# 4692c4654bd7458db2fb0444d70ed832
msgid "|MOD| PostgreSQL"
msgstr ""

#: ../../../postgres/index.rst:5
# e192bc03f79348ccb33674013e1b59d7
msgid "PostgreSQL is a Database Management System (DBMS). In this module, you'll be shown how to use PostgreSQL to create a new database, as well as accessing other typical DBMS functions."
msgstr ""

#: ../../../postgres/queries.rst:2
# efddfe95b21a4ddea5ca13e9df251bd6
msgid "|LS| Queries"
msgstr ""

#: ../../../postgres/queries.rst:4
# d26b112e6c1047998f61b5ded849c4e7
msgid "When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information."
msgstr ""

#: ../../../postgres/queries.rst:7
# de9fdd22cdf04753be4ac86c721478ce
msgid "**The goal of this lesson:** To learn how to create queries that will return useful information."
msgstr ""

#: ../../../postgres/queries.rst:11
# 4133d6e080a2410ba80b211d1739153a
msgid "Follow-up from previous lesson"
msgstr ""

#: ../../../postgres/queries.rst:13
# 75b979caadf846779330273bc104c7a8
msgid "Let's check that you added a few people to the database successfully:"
msgstr ""

#: ../../../postgres/queries.rst:27
# ab3c3a285ab9492c9d6aecd9cb884a42
msgid "Ordering results"
msgstr ""

#: ../../../postgres/queries.rst:29
# d43ad2e76c8343579cd8d400a8c5ece0
msgid "Let's get a list of people ordered by their house numbers:"
msgstr ""

#: ../../../postgres/queries.rst:35
#: ../../../postgres/queries.rst:53
#: ../../../postgres/queries.rst:187
#: ../../../postgres/queries.rst:212
#: ../../../postgres/queries.rst:237
#: ../../../postgres/queries.rst:254
#: ../../../postgres/queries.rst:298
#: ../../../postgres/views.rst:30
# 5a2c4eb2ac8243c79649cf58caedc13a
# 017f943fd9d24f30bd5a81b15767ed06
# b3ab18fd5e424f12a76d5561e3f1d931
# dc8b2b2371f545d0a59b6942919d419e
# 0b3f8b119e964fafb599651a1419c39c
# a04a0004eb8f4f72839f59051ccf5a7f
# ee9ac0fd3f6f46ba9636987d229e3551
# ee2bcf4e96a84a91971e512723c25d3f
msgid "Result:"
msgstr ""

#: ../../../postgres/queries.rst:47
# 008662cb3681436487a4845cfd358abf
msgid "You can sort by more than one column:"
msgstr ""

#: ../../../postgres/queries.rst:66
# 532ebc811873472c965abab7323ca3a6
msgid "Filtering"
msgstr ""

#: ../../../postgres/queries.rst:68
# 63f1c3ef3cf3483dacdc84e4545805e6
msgid "Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two. Never fear, you can filter the results!"
msgstr ""

#: ../../../postgres/queries.rst:72
# e2b4fdf83bf9487bb24c8fdded7877f7
msgid "Here is an example of a numerical filter:"
msgstr ""

#: ../../../postgres/queries.rst:83
# 39e5ee0838d64adc9805f4b02eb51e26
msgid "You can combine filters (defined using the :kbd:`WHERE` clause) with sorting (defined using the :kbd:`ORDER BY`)"
msgstr ""

#: ../../../postgres/queries.rst:96
# 4be06b6d3710412f8f8c80cf4c3ba49a
msgid "You can also filter based on text data:"
msgstr ""

#: ../../../postgres/queries.rst:107
# 62852218fce944f2aac01ddea90b89eb
msgid "Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`i` in them. If you want to search for a string of letters regardless of case, you can do a case insensitive search using the :kbd:`ILIKE` clause:"
msgstr ""

#: ../../../postgres/queries.rst:120
# 60cc224d36974fa49216e58c34efdaa2
msgid "That found everyone with a :kbd:`k` or :kbd:`K` in their name. Using the normal :kbd:`ILIKE` clause, you'd get:"
msgstr ""

#: ../../../postgres/queries.rst:132
# 6c82b4edad234f06a671d6b2b7ee6f5e
msgid "Joins"
msgstr ""

#: ../../../postgres/queries.rst:134
# 451abf6c4ca9466daa514c5502ac2efd
msgid "What if you want to see the person's details and their street name (not its id)? In order to do that, you need to join the two tables together in a single query. Lets look at an example:"
msgstr ""

#: ../../../postgres/queries.rst:144
# cd8119afd6c7465ea921df45290e92f4
msgid "With joins, you will always state the two tables the information is coming from, in this case people and streets.  You also need to specify which two keys must match (foreign key & primary key). If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!"
msgstr ""

#: ../../../postgres/queries.rst:150
# 0373bb00cec14c85b6183bd7b41b27b6
msgid "Here is what the correct output will look like:"
msgstr ""

#: ../../../postgres/queries.rst:162
# 1fd52432921b4a3ba0a179a053459aab
msgid "We will revisit joins as we create more complex queries later. Just remember they provide a simple way to combine the information from two or more tables."
msgstr ""

#: ../../../postgres/queries.rst:166
# 98ecc36116944c88b0a94f4ce29bc75e
msgid "Subselect"
msgstr ""

#: ../../../postgres/queries.rst:168
# cde01315920a45998b014f58862a6f97
msgid "First, let's do a little tweaking to our data:"
msgstr ""

#: ../../../postgres/queries.rst:178
# 821a5d1c8a8741d8b985fd82f5cfaaaf
msgid "Let's take a quick look at our data after those changes - we reuse our query from the previous section:"
msgstr ""

#: ../../../postgres/queries.rst:199
# 9897c80fe25a459598cc887d00ef829d
msgid "Now let's show you a subselection on this data. We want to show only people who live in :kbd:`street_id` number :kbd:`1`."
msgstr ""

#: ../../../postgres/queries.rst:222
# 741a8506b0a14e6cb0ae7873b787da30
msgid "This is a contrived example and in the above situations it may have been overkill. However when you have to filter based on a selection, subselects are really useful!"
msgstr ""

#: ../../../postgres/queries.rst:227
# 9479b8e710b24e09b8cda80d2918e5d8
msgid "Aggregate Queries"
msgstr ""

#: ../../../postgres/queries.rst:229
# cc6e8a897c7541119814af0cf5f45e52
msgid "One of the powerful features of a database is its ability to summarise the data in its tables. These summaries are called aggregate queries. Here is a typical example:"
msgstr ""

#: ../../../postgres/queries.rst:246
# 04bf8a13873341f4887b4b0fc3652bed
msgid "If we want the counts summarised by street name we can do this:"
msgstr ""

#: ../../../postgres/queries.rst:265
# ff201e72801c4184be982c48bc9b7fe2
msgid "Because there is no :kbd:`ORDER BY` clause, on your computer these data may not be in the same order as shown here."
msgstr ""

#: ../../../postgres/queries.rst:268
# 2c87afefa0424559a54e3f19e9c6b396
msgid "Exercise:"
msgstr ""

#: ../../../postgres/queries.rst:270
# 4d30ea230af64271b33fb85abd1aae39
msgid "Summarise the people by street name and show the actual street names instead of the street_id's"
msgstr ""

#: ../../../postgres/queries.rst:309
# bd4c0c08b70c4319b4814021fd6685c2
msgid "You will notice that we have prefixed field names with table names (e.g. people.name and streets.name). This needs to be done whenever the field name is ambiguous."
msgstr ""

#: ../../../postgres/queries.rst:316
# 083cb43f375f4fe98ca4893177e46304
msgid "You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it."
msgstr ""

#: ../../../postgres/queries.rst:322
# a55ee0584ada4cfbbec1fae0e8caea63
msgid "Next you'll see how to create views from the queries that you've written."
msgstr ""

#: ../../../postgres/rules.rst:2
# f426d56649d2403c851e624ec4f53357
msgid "|LS| Rules"
msgstr ""

#: ../../../postgres/rules.rst:4
# d9e68ed7eee346e79a13c6b73fa0d9ea
msgid "Rules allow the \"query tree\" of an incoming query to be rewritten. One common usage is to implement views, including updatable view. *- Wikipedia*"
msgstr ""

#: ../../../postgres/rules.rst:7
# 00292d79bfa5446a826a48ecd787a4e5
msgid "**The goal for this lesson:** To learn how to create new rules for the database."
msgstr ""

#: ../../../postgres/rules.rst:11
# a8d351084e514b69bf6a94781110dc46
msgid "Materialised Views (Rule based views)"
msgstr ""

#: ../../../postgres/rules.rst:13
# 05ac023482c547f8ba5ccf081a7a7756
msgid "Say you want to log every change of phone_no in your people table in to a people_log table. So you set up a new table"
msgstr ""

#: ../../../postgres/rules.rst:20
# a136d56a638e49d99feaf0e60e46217d
msgid "In the next step create a rule, that logs every change of a phone_no in the people table into the people_log table:"
msgstr ""

#: ../../../postgres/rules.rst:29
# f9f3cae9f7844baebf5fe620514ca015
msgid "To test that the rule works, let's modify a phone number:"
msgstr ""

#: ../../../postgres/rules.rst:35
# 5b4b515cc93144f9ba6c5c025b0c8ed7
msgid "Check that the table was updated correctly:"
msgstr ""

#: ../../../postgres/rules.rst:44
# dc59b7ec36cf41cbbc70f9e265480d66
msgid "Now, thanks to the rule we created, the :kbd:`people_log` table will look like this:"
msgstr ""

#: ../../../postgres/rules.rst:54
# 200e322592fd4917bb8dd8eb51e5115b
msgid "The value of the :kbd:`time` field will depend on the current date and time."
msgstr ""

#: ../../../postgres/rules.rst:60
# 9cb088ac23a84a7ba4be3423cc7d066d
msgid "Rules allow you to automatically add or change data in your database to reflect changes in other parts of the database."
msgstr ""

#: ../../../postgres/rules.rst:66
# 8cc3fbee1d2f42db9f7f1e2214ab5035
msgid "The next module will introduce you to PostGIS, which takes these database concepts and applies them to GIS data."
msgstr ""

#: ../../../postgres/views.rst:2
# 038db7c8faef4624b6f09eb3d7705f05
msgid "|LS| Views"
msgstr ""

#: ../../../postgres/views.rst:4
# 5ba94ff049e44f4f8ae2b0a969027346
msgid "When you write a query, you need to spend a lot of time and effort formulating it. With views, you can save the definition of a sql query in a reusable 'virtual table'."
msgstr ""

#: ../../../postgres/views.rst:8
# 51373c02ad06469997b9b2a44a2f7bdb
msgid "**The goal for this lesson:** To save a query as a view."
msgstr ""

#: ../../../postgres/views.rst:11
# f0fafa66e7bb4b7aa0f4d42880db29d4
msgid "Creating a View"
msgstr ""

#: ../../../postgres/views.rst:13
# 6e58a7975fd54734814cb6936ebcf835
msgid "You can treat a view just like a table, but its data is sourced from a query. Let's make a simple view based on the above."
msgstr ""

#: ../../../postgres/views.rst:23
# 327f0487eabc4894880e1239a18d14a6
msgid "As you can see the only change is the :kbd:`create view roads_count_v as` part at the beginning. The nice thing is that we can now select data from that view:"
msgstr ""

#: ../../../postgres/views.rst:42
# 26a2b58d40364cdfb3cc3de03c050759
msgid "Modifying a View"
msgstr ""

#: ../../../postgres/views.rst:44
# 8394971084b24320b8d118d4bf5d1412
msgid "A view is not fixed, and it contains no 'real data'. This means you can easily change it without impacting on any data in your database."
msgstr ""

#: ../../../postgres/views.rst:55
# 283817e221d241fabc99bfe0ed7ecd53
msgid "(This example also shows the best practice convention of using UPPER CASE for all SQL keywords.)"
msgstr ""

#: ../../../postgres/views.rst:58
# 64aaeec61c134b209c728e50c7f910ce
msgid "You will see that we have added an :kbd:`ORDER BY` clause so that our view rows are nicely sorted:"
msgstr ""

#: ../../../postgres/views.rst:71
# a5afdf99c94e41b283caba2e3ebd738e
msgid "Dropping a View"
msgstr ""

#: ../../../postgres/views.rst:73
# 2332d74218594a48abe7372a46ba6ce3
msgid "If you no longer need a view, you can delete it like this:"
msgstr ""

#: ../../../postgres/views.rst:82
# 3dfe3fbc02e74d6286135f010654c236
msgid "Using views, you can save a query and access its results as if it were a table."
msgstr ""

#: ../../../postgres/views.rst:87
# 44e7fc9e5e534008aaf95a06297ea55d
msgid "Sometimes, when changing data, you want your changes to have effects elsewhere in the database. The next lesson will show you how to do this."
msgstr ""

