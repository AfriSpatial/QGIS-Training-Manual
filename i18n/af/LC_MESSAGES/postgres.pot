# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-07-10 11:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../postgres/adding_data.rst:2
# 9e2afd82551c40adb646a23ecd4d6cbf
msgid "|LS| Adding Data to the Model"
msgstr ""

#: ../../../postgres/adding_data.rst:4
# f682c09976ae49c38899e34613882398
msgid "The models we've created will now need to be populated with the data they're intended to contain."
msgstr ""

#: ../../../postgres/adding_data.rst:7
# b1c6d18948534a5582897d37bb7b966f
msgid "**The goal for this lesson:** To learn how to insert new data into the database models."
msgstr ""

#: ../../../postgres/adding_data.rst:11
# 129fcd38adf84d94b20b75882f30e9b7
msgid "Insert statement"
msgstr ""

#: ../../../postgres/adding_data.rst:13
# fafe682de3154089bf12dc9b9f8fe9e1
msgid "How do you add data to a table? The sql :kbd:`INSERT` statement provides the functionality for this:"
msgstr ""

#: ../../../postgres/adding_data.rst:20
# 1ebeda48f12849e58430243c46c23556
msgid "A couple of things to note:"
msgstr ""

#: ../../../postgres/adding_data.rst:22
# 66087dd715474ae8bba88ecccea8009e
msgid "after the table name (:kbd:`streets`), you list the column names that you will be populating (in this case only the :kbd:`name` column)."
msgstr ""

#: ../../../postgres/adding_data.rst:24
# 272c86aa1047465fab7d64dce0089db3
msgid "after the :kbd:`values` keyword, place the list of field values."
msgstr ""

#: ../../../postgres/adding_data.rst:25
# 1f739cdf9ce740d1a23958271e57996f
msgid "strings should be quoted using single quotes."
msgstr ""

#: ../../../postgres/adding_data.rst:26
# 2a96c5de6d004816844945f3b4cacf3c
msgid "you will note that I did not insert a value for the :kbd:`id` column - that is because it is a sequence and will be autogenerated."
msgstr ""

#: ../../../postgres/adding_data.rst:28
# 078e3cf8ed0e406b93d06d40aba7e918
msgid "if you do manually set the :kbd:`id`, you may cause serious problems with the integrity of your database."
msgstr ""

#: ../../../postgres/adding_data.rst:31
# 5d520881f6a945fd9a4f1fb3af802a9b
msgid "You should see :kbd:`INSERT 0 1` if it is successful."
msgstr ""

#: ../../../postgres/adding_data.rst:33
# 431096dad0c7421cbf3c5fa30750ecba
msgid "You can see the result of your insert action by selecting all the data in the table:"
msgstr ""

#: ../../../postgres/adding_data.rst:40
# ff54a99f3b514fc191b4e41e32656ee2
msgid "result:"
msgstr ""

#: ../../../postgres/adding_data.rst:50
# f2efc8729a404e379aaeaf974f4cf750
msgid "Now you try:"
msgstr ""

#: ../../../postgres/adding_data.rst:52
# 729f54999d664b9ea41f7edd6133fd5f
msgid "Use the :kbd:`INSERT` command to add a new street to the :kbd:`streets` table."
msgstr ""

#: ../../../postgres/adding_data.rst:54
# 65d32f97839841bcb20cffe081d5c156
msgid "Write the sql you used here:"
msgstr ""

#: ../../../postgres/adding_data.rst:70
# c02367ca0ec14b3e84838501b9f94ad9
msgid "Sequencing data addition according to constraints"
msgstr ""

#: ../../../postgres/adding_data.rst:72
# 248d1754d65b42eaa39dd145292df3ac
msgid "Try to add a person to the people table with the following details:"
msgstr ""

#: ../../../postgres/adding_data.rst:81
# e769e5f6a7184888aa8949b14e4d8483
msgid "Remember, we defined phone numbers as strings."
msgstr ""

#: ../../../postgres/adding_data.rst:83
# 1f9226e651d843288c842744013152d9
msgid "What problems did you encounter?"
msgstr ""

#: ../../../postgres/adding_data.rst:104
# 8aa242c934e742f7978aaa76c8128842
msgid "You should have an error report if you try to do this without first creating a record for Main Street in the :kbd:`streets` table."
msgstr ""

#: ../../../postgres/adding_data.rst:107
# f6befe192f7a4828ab26b8f2aa9a2a45
msgid "What error did you get?"
msgstr ""

#: ../../../postgres/adding_data.rst:110
# f936b1bf0405409793268a723dd01b79
msgid "You can't add the street using its name"
msgstr ""

#: ../../../postgres/adding_data.rst:111
# be00f1a6b5ba4e1da35b073072fe3caa
msgid "You can't add a street using a street :kbd:`id` before first creating the street record on the streets table"
msgstr ""

#: ../../../postgres/adding_data.rst:114
# 3d355b16c759471abb3a6236c181a80a
msgid "Remember that our two tables are linked via a Primary/Foreign Key pair. This means that no valid person can be created without there also being a valid corresponding street record."
msgstr ""

#: ../../../postgres/adding_data.rst:118
# b765316a3cdf40ed824d5405cef9bc8a
msgid "Here is how we made our friend:"
msgstr ""

#: ../../../postgres/adding_data.rst:126
# e2578a4e99c8492ba5cbbb566425b095
msgid "If you look at the streets table again (using a select statement as before), you'll see that the :kbd:`id` for the :kbd:`Main Street` entry is :kbd:`2`. That's why we could merely enter the number :kbd:`2` above. Even though we're not seeing :kbd:`Main Street` written out fully in the entry above, the database will be able to associate that with the :kbd:`street_id` value of :kbd:`2`."
msgstr ""

#: ../../../postgres/adding_data.rst:134
# cde59da108134e8db14c0a2d9b33f737
msgid "Select data"
msgstr ""

#: ../../../postgres/adding_data.rst:136
# f27006da169c48849d19ab0ed5de9a41
msgid "We have already shown you the syntax for selecting records. Lets look at a few more examples:"
msgstr ""

#: ../../../postgres/adding_data.rst:151
# b28cb372c0a34500a749f593f7eafcfc
msgid "In later sessions we will go into more detail on how to select and filter data."
msgstr ""

#: ../../../postgres/adding_data.rst:154
# 005e202b47f941dc9e9759eb3012c24b
msgid "Update data"
msgstr ""

#: ../../../postgres/adding_data.rst:156
# 8b92c26aa368462d9a43898007608858
msgid "What is you want to make a change to some existing data? For example a street name is changed:"
msgstr ""

#: ../../../postgres/adding_data.rst:163
# b4f2889e412d4398be9ef17e907e4c47
msgid "Be very careful using such update statements - if more than one record matches your :kbd:`WHERE` clause, they will all be updated!"
msgstr ""

#: ../../../postgres/adding_data.rst:166
# deefdb68fad447578d373c8faa7dd995
msgid "A better solution is to use the primary key of the table to reference the record to be changed:"
msgstr ""

#: ../../../postgres/adding_data.rst:173
# 3944529ee2294df29a451bc955f8659b
msgid "It should return :kbd:`UPDATE 1`."
msgstr ""

#: ../../../postgres/adding_data.rst:175
# 750f44918be54fdea4d80b1b21bf8dc4
msgid "the :kbd:`WHERE` statement criteria are case sensitive :kbd:`Main Street` <> :kbd:`Main street`"
msgstr ""

#: ../../../postgres/adding_data.rst:179
# 42deaf6e19b54ed7833b5fa1ea3d6a41
msgid "Delete Data"
msgstr ""

#: ../../../postgres/adding_data.rst:181
# afe6fb98bca44c529cab4538079a1f44
msgid "Some times you fall out of friendship with people. Sounds like a job for the :kbd:`DELETE` command!"
msgstr ""

#: ../../../postgres/adding_data.rst:188
# 7f2912a9748e48b890f12408c073c1a0
msgid "Let's look at our people table now:"
msgstr ""

#: ../../../postgres/adding_data.rst:197
# 4086e3c402ce43438e074d123fe5d454
msgid "**Exercise:** Use the skills you learned earlier to add some new friends to your database:"
msgstr ""

#: ../../../postgres/adding_data.rst:210
#: ../../../postgres/data_model.rst:483
#: ../../../postgres/db_intro.rst:425
#: ../../../postgres/queries.rst:314
#: ../../../postgres/rules.rst:58
#: ../../../postgres/views.rst:80
# 58194353349e47afb3cbf918cd83b913
# 733246b424d24e2d87e8dbde4de8bcf7
# 5788af136b35424b95a5d2fbe3a7c555
# fb10bb5452ac45cb93bd013b83adef9d
# 2add3d6affdb43b0bc4f3f431a0464b6
# 03cd6afbaa7442f69edc1af69ca6ecc7
msgid "|IC|"
msgstr ""

#: ../../../postgres/adding_data.rst:212
# 3a66ff6e6c134ea3aa4815b84e8af2dc
msgid "Now you know how to add new data to the existing models you created previously. Remember that if you want to add new kinds of data, you may want to modify and/or create new models to contain that data."
msgstr ""

#: ../../../postgres/adding_data.rst:217
#: ../../../postgres/data_model.rst:489
#: ../../../postgres/db_intro.rst:431
#: ../../../postgres/queries.rst:320
#: ../../../postgres/rules.rst:64
#: ../../../postgres/views.rst:85
# bbe7c06df43843ce982fc2b7af4f78ee
# 6d176128749142bf91a6051813b3c30c
# 6941fef908bd4269a926dd113e2775a1
# 8d09e55b47f245f8a3d4da00f4c47b0c
# 21cb3dd224b947be858bf0cac8496c36
# 7e4146e997da440ca1aa12629d78457e
msgid "|WN|"
msgstr ""

#: ../../../postgres/adding_data.rst:219
# 410ed80daf214554b83a92ccef209093
msgid "Now that you've added some data, you'll learn how to use queries to access this data in various ways."
msgstr ""

#: ../../../postgres/data_model.rst:2
# bc7211d63ec54d51983aa1685d8ed43c
msgid "|LS| Implementing the Data Model"
msgstr ""

#: ../../../postgres/data_model.rst:4
# 3b0c4d9298ec4d09ab58f1b34384c9ce
msgid "Now that we've covered all the theory, let's create a new database. This database will be used for our exercises for the lessons that will follow afterwards."
msgstr ""

#: ../../../postgres/data_model.rst:8
# 3fdcb6eeaaa14d72a5dab7e1d91be9dc
msgid "**The goal for this lesson:** To install the required software and use it to implement our example database."
msgstr ""

#: ../../../postgres/data_model.rst:12
# 46948cf8630343fc8c79151b53ec6e2d
msgid "Install PostgreSQL"
msgstr ""

#: ../../../postgres/data_model.rst:14
#: ../../../postgres/data_model.rst:51
# 5408f065a79c47878592c0e83b3b7d8b
# 3bf7e6a1b8024a88b9d84d0c0f0b2d75
msgid "Under Ubuntu:"
msgstr ""

#: ../../../postgres/data_model.rst:20
# ded821743ef34e6ab2627d68c69af2df
msgid "You should get a message like this:"
msgstr ""

#: ../../../postgres/data_model.rst:39
# 8ba353e4e84b4923ad0b88735df11018
msgid "Press :kbd:`Y` and :kbd:`Enter` and wait for the download and installation to finish."
msgstr ""

#: ../../../postgres/data_model.rst:43
# f9648bf6031a42bda07becef2d92e6b0
msgid "Help"
msgstr ""

#: ../../../postgres/data_model.rst:45
# 7f2429a762794742b967c55f3493d727
msgid "PostgreSQL has very good `online <http://www.postgresql.org/docs/9.1/static/index.html>`_ documentation."
msgstr ""

#: ../../../postgres/data_model.rst:49
# cbe1f31cc9ca419faa8b6ad5712d50f4
msgid "Create a database user"
msgstr ""

#: ../../../postgres/data_model.rst:53
# 2018117fccc643fabfd4c9f390258df7
msgid "After the installation is complete, run this command to become the postgres user and then create a new database user:"
msgstr ""

#: ../../../postgres/data_model.rst:60
# b7ecd61f9ede4326a5d100408b1e8565
msgid "Type in your normal log in password when prompted (you need to have sudo rights)."
msgstr ""

#: ../../../postgres/data_model.rst:62
# d948e8bd9d0a4d458815e170baf4378f
msgid "Now, at the postgres user's bash prompt, create the database user. Make sure the user name matches your unix login name: it will make your life much easier, as postgres will automatically authenticate you when you are logged in as that user."
msgstr ""

#: ../../../postgres/data_model.rst:71
# 696dbdd8d1294768978fd2f78cc2c67e
msgid "Enter a password when prompted. I normally use a different password to my usual unix login."
msgstr ""

#: ../../../postgres/data_model.rst:74
# ac0eabd6c8794ed1a824ecdd081fead7
msgid "What do those options mean?"
msgstr ""

#: ../../../postgres/data_model.rst:86
# e2f8067fc64c4274ba5f132575b7b319
msgid "Now you should should leave the postgres user's bash shell environment by typing:"
msgstr ""

#: ../../../postgres/data_model.rst:94
# bd4c848f8abb42358f22581e3275193f
msgid "Verify the new account"
msgstr ""

#: ../../../postgres/data_model.rst:100
# b74e2737ab8f4f1385c596f476027802
msgid "Should return something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:113
#: ../../../postgres/data_model.rst:144
# 1748cf6a5f35424a99a21caad14bab2c
# 51e361680fad4f58be8b424766b739fc
msgid "Type :kbd:`q` to exit."
msgstr ""

#: ../../../postgres/data_model.rst:116
# 15a9176043cd4b32a082eba7fff09c32
msgid "Create a database"
msgstr ""

#: ../../../postgres/data_model.rst:118
# b69c0dfa574f44c386eff399e22aab58
msgid "The :kbd:`createdb` command is used to create a new database. It should be run from the bash shell prompt."
msgstr ""

#: ../../../postgres/data_model.rst:125
# 2ccd553342924267ad6ac3e2fc2c11ab
msgid "You can verify the existence of your new database by using this command:"
msgstr ""

#: ../../../postgres/data_model.rst:131
# c7dc8c82d6a14cb2a24f6f1d4c104944
msgid "Which should return something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:147
# 17e7778eefb847d89788c91cd6544221
msgid "Starting a database shell session"
msgstr ""

#: ../../../postgres/data_model.rst:149
# 1f236fe66ed042a6aefb71b9cd664991
msgid "You can connect to your database easily like this:"
msgstr ""

#: ../../../postgres/data_model.rst:155
# bf7888f3f30c4b2baf998dd1b9c1cfb5
msgid "To exit out of the psql database shell, type:"
msgstr ""

#: ../../../postgres/data_model.rst:161
# 2ef62967808c421fa070ab63b82e5dc4
msgid "For help in using the shell, type:"
msgstr ""

#: ../../../postgres/data_model.rst:167
# 6f1a3071056f43339383303ea19220aa
msgid "For help in using sql commands, type:"
msgstr ""

#: ../../../postgres/data_model.rst:173
# af7ff1bf4db445c7807c699f74208354
msgid "To get help on a specific command, type (for example):"
msgstr ""

#: ../../../postgres/data_model.rst:179
# 4b36e7ffda9d478b9f0cbb3dfff75db8
msgid "See also the `Psql cheat sheet <../_static/postgres/psql_cheatsheet.pdf>`_ - available online `here <http://www.postgresonline.com/special_feature.php?sf_name=postgresql83_psql_cheatsheet&outputformat=html>`_."
msgstr ""

#: ../../../postgres/data_model.rst:184
# f6da7cb24c3e4a768aba76a87ed9e421
msgid "Make Tables in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:186
# ebb8f7f0d3e04a948b6dd6aef01b0f6e
msgid "Let's start making some tables! We will use our ER Diagram as a guide. First, let's create a streets table:"
msgstr ""

#: ../../../postgres/data_model.rst:193
# 7dc0785f9ddc46d49132f672ff3602dc
msgid ":kbd:`serial` and :kbd:`varchar` are **data types**. :kbd:`serial` tells PostgreSQL to start an integer sequence (autonumber) to populate the :kbd:`id` automatically for every new record. :kbd:`varchar(50)` tells PostgreSQL to create a character field of 50 characters in length."
msgstr ""

#: ../../../postgres/data_model.rst:198
# 42e1f88b4f584bb5b0f7641973e65693
msgid "You will notice that the command ends with a :kbd:`;` - all SQL commands should be terminated this way. When you press enter, psql will report something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:210
# 89179de624cd4475abbb33be23b7ccb6
msgid "That means your table was created successfully, with a primary key :kbd:`streets_pkey` using :kbd:`streets.id`."
msgstr ""

#: ../../../postgres/data_model.rst:213
# 5c47f5d086c547f1bda3055d9cbf9765
msgid "Note: If you hit return without entering a :kbd:`;`, then you will get a prompt like this: :kbd:`address-#`. This is because PG is expecting you to enter more. Enter :kbd:`;` to run your command."
msgstr ""

#: ../../../postgres/data_model.rst:217
# 933bfb2f9a0d44489a3bd28ddff52955
msgid "To view your table schema, you can do this:"
msgstr ""

#: ../../../postgres/data_model.rst:223
#: ../../../postgres/data_model.rst:242
# 0ff7498a2d014bda8b2e2c723a86b4e2
# d812a3e9d3664ad59613827dbfcc50ec
msgid "Which should show something like this:"
msgstr ""

#: ../../../postgres/data_model.rst:236
# b75058df16714c4490647c9741a66d57
msgid "To view your table contents, you can do this:"
msgstr ""

#: ../../../postgres/data_model.rst:250
# 9947fa7949904f438421232abf805016
msgid "As you can see, our table is empty!"
msgstr ""

#: ../../../postgres/data_model.rst:252
# 15414aae09e44e59916d4c64abbf1b9a
msgid "Use the approach shown above to make a table called people: Add fields such as phone number, home address, name, etc. (these aren't all valid names: change them to make them valid)."
msgstr ""

#: ../../../postgres/data_model.rst:255
# 46ad6015e82048f1ae97cf65d0106bec
msgid "Write the SQL you create here:"
msgstr ""

#: ../../../postgres/data_model.rst:296
#: ../../../postgres/queries.rst:289
# 60809806881440799c3d13b72d54c523
# ea49c11b1b4a43e08039216cb4f6d6db
msgid "Solution:"
msgstr ""

#: ../../../postgres/data_model.rst:306
# 37bc51d7b2284817ac4259d0cd1b01f7
msgid "The schema for the table (enter :kbd:`\\\\d people`) looks like this:"
msgstr ""

#: ../../../postgres/data_model.rst:322
# 9a1fb3fb98574408b75b921118910bbb
msgid "For illustration purposes, we have purposely omitted the fkey constraint."
msgstr ""

#: ../../../postgres/data_model.rst:326
# 9f711ddb5c9443c9aed7f711b3fd43f4
msgid "Create Keys in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:328
# 7fc837afcbf94661beeb7ca31cf3b6f3
msgid "The problem with our solution above is that the database doesn't know that people and streets have a logical relationship. To express this relationship, we have to define a foreign key that points to the primary key of the streets table."
msgstr ""

#: ../../../postgres/data_model.rst:337
# 972f328903b1435182281fb633e64ca8
msgid "adding the key after the table has been created"
msgstr ""

#: ../../../postgres/data_model.rst:338
# 32916a2a21c241c49881276f791b13d1
msgid "defining the key at time of table creation"
msgstr ""

#: ../../../postgres/data_model.rst:340
# b183c1203e5f4889a5cb8d875c05cd5c
msgid "Our table has already been created, so let's do it the first way:"
msgstr ""

#: ../../../postgres/data_model.rst:348
# 2c74e258b2554a40846e3424fc1db4f3
msgid "That tells the :kbd:`people` table that its :kbd:`street_id` fields must match a valid street :kbd:`id` from the :kbd:`streets` table."
msgstr ""

#: ../../../postgres/data_model.rst:351
# 028a9b1fe79c47e193e45c9f7c50d94b
msgid "The more usual way to create a constraint is to do it when you create the table:"
msgstr ""

#: ../../../postgres/data_model.rst:361
# de93b91747214e24a13fd483f8cb9734
msgid "After adding the constraint, our table schema looks like this now:"
msgstr ""

#: ../../../postgres/data_model.rst:381
# cce691c7edf54ff4a7711be05b471edd
msgid "Create Indexes in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:383
# b8156b9fe3fd441aa74ff0aae9a2ef44
msgid "We want lightning fast searches on peoples names. To provide for this, we can create an index on the name column of our people table:"
msgstr ""

#: ../../../postgres/data_model.rst:409
# 493787071d2549de923bc99d47bfc0e8
msgid "Dropping Tables in SQL"
msgstr ""

#: ../../../postgres/data_model.rst:411
# 9bd86871da7c4f0b82cdd2903c49533d
msgid "If you want to get rid of a table you can use the :kbd:`drop` command:"
msgstr ""

#: ../../../postgres/data_model.rst:418
# 474b22b9d5704fb3aeee540af08ad4a8
msgid "In our example, this would not work - why?"
msgstr ""

#: ../../../postgres/data_model.rst:420
# 1415888b2ca94f9fb1e6c0f284be75a9
msgid "Some deep and inspired thoughts as to why..."
msgstr ""

#: ../../../postgres/data_model.rst:436
# 224b9bfd0985452190196a38043ee9af
msgid "Sometimes you just can't stand having a table any more. Maybe you are sick of all your friends. How can you get rid of them all in one easy step? Drop the table of course! Of course, right now too much hard work has gone into our table to get rid of it on a whim, but if you really hate your friends that much, nothing's stopping you from ridding yourself of them forever:"
msgstr ""

#: ../../../postgres/data_model.rst:446
# c4db224ae39e4bbe84c298a6926c2251
msgid "This time it works fine! Why? Are people less important than streets?"
msgstr ""

#: ../../../postgres/data_model.rst:448
# b6172067132c445aa5d297638dd3b499
msgid "Some thoughts on why you could drop people:"
msgstr ""

#: ../../../postgres/data_model.rst:464
# 690721fa87a448e2bc42d16042d80764
msgid "If you actually did enter that command and dropped the :kbd:`people` table, now would be a good time to rebuild it, as you will need it in the next exercises."
msgstr ""

#: ../../../postgres/data_model.rst:469
# 0bb2a0d29e504a0b8ac1c855e480a9d8
msgid "A word on PG Admin III"
msgstr ""

#: ../../../postgres/data_model.rst:471
# 92907399f9214e83a6754909da8daf44
msgid "We are showing you the SQL commands from the psql prompt because it's a very useful way to learn about databases. However, there are quicker and easier ways to do a lot of what we are showing you. Install PGAdminIII and you can create, drop, alter etc tables using 'point and click' operations in a GUI."
msgstr ""

#: ../../../postgres/data_model.rst:476
# 962d899a990941ecb627a4dcf9a09b7d
msgid "Under Ubuntu, you can install it like this:"
msgstr ""

#: ../../../postgres/data_model.rst:485
# eb699b43a9884f7ba4b9e5235ea0c84e
msgid "You have now seen how to create a brand new database, starting completely from scratch."
msgstr ""

#: ../../../postgres/data_model.rst:491
# bc86a1156d534c8595696b64795b620c
msgid "Next you'll learn how to use the DBMS to add new data."
msgstr ""

#: ../../../postgres/db_intro.rst:2
# dd6f879630a248e9b68dd5b0ac8cb97f
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../../postgres/db_intro.rst:4
# 4a6899617b6e4440a84bdc7261735c3b
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ../../../postgres/db_intro.rst:8
# 7965d4c888334e4ca22b5cec8a53d6eb
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../../postgres/db_intro.rst:11
# a336cb64fbb14ece9b0076ef0cde1ac2
msgid "What is a Database?"
msgstr ""

#: ../../../postgres/db_intro.rst:13
# 2f94b920de9143d5864a244ee94a7f96
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:18
# a2c9573c16fa4e3894a29c5359929db7
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:23
# d4cd59a02d8f4f5bad4a0d15cdab1541
msgid "Tables"
msgstr ""

#: ../../../postgres/db_intro.rst:25
# 89ad69c2e8af49f7ba4c030a382da9e3
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:40
# d133b077a8fb46719ccaac2649a9c1a5
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../../postgres/db_intro.rst:43
# 81f527b94f0b4b1b8e52056a19e9bd6c
msgid "Columns / Fields"
msgstr ""

#: ../../../postgres/db_intro.rst:45
# e26599485bfe4406bf3393a0ec6db095
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:52
# ae84c118f81540b7bbc755329a6b4e41
msgid "A column:"
msgstr ""

#: ../../../postgres/db_intro.rst:61
# a2536d38af0c41f798849821f192fe2d
msgid "A field:"
msgstr ""

#: ../../../postgres/db_intro.rst:68
# 51ba79fb20e4437fa73f623d1a314620
msgid "Records"
msgstr ""

#: ../../../postgres/db_intro.rst:70
# 690f59841b8c4791a88dc7486873b0c1
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ../../../postgres/db_intro.rst:78
# 74aef5ef884840d8bd5bd70598551162
msgid "Datatypes"
msgstr ""

#: ../../../postgres/db_intro.rst:80
# 0dd983c550554d77acb7d81001ac6b83
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ../../../postgres/db_intro.rst:83
# 12254afe762c446c916b2598544cfc5e
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../../postgres/db_intro.rst:85
# 98d46a46b8064009b60e341061e2f40a
msgid "String - to store free-form text data"
msgstr ""

#: ../../../postgres/db_intro.rst:86
# cc3879c2944e4aa9ba0c7d5b5d482042
msgid "Integer - to store whole numbers"
msgstr ""

#: ../../../postgres/db_intro.rst:87
# 8f26dd8753194125a17ae0c0b8e5c9b8
msgid "Real - to store decimal numbers"
msgstr ""

#: ../../../postgres/db_intro.rst:88
# 41ae536a2b1841d58f920b37b72681bf
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../../postgres/db_intro.rst:89
# f928f02b85de4521b7afd3aeb5861b46
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ../../../postgres/db_intro.rst:91
# 86ad8b53f2d2420890b88d6e7b1a94e9
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ../../../postgres/db_intro.rst:111
# 1422e684b83d4432851aef85312703a2
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ../../../postgres/db_intro.rst:115
# 7f956a022a03422db735a0598bfe1f04
msgid "Modelling an Address Database"
msgstr ""

#: ../../../postgres/db_intro.rst:117
# c64df8284921415e8c30eaf820a5eaa7
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ../../../postgres/db_intro.rst:120
# 8ddf1b8a8d644820ad3325dcd62f809e
msgid "Write some address properties in the space provided:"
msgstr ""

#: ../../../postgres/db_intro.rst:155
# af1909df442744eeac85a09dfb5628e7
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ../../../postgres/db_intro.rst:160
# 75dec54f23844c6ba56bec699c88168f
msgid "Database Theory"
msgstr ""

#: ../../../postgres/db_intro.rst:162
# 74eae191d6b145a48e0e7d2c7e9e4667
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ../../../postgres/db_intro.rst:166
# 1f529f92bb1b49ce82c0484d501d3a6c
msgid "Normalisation"
msgstr ""

#: ../../../postgres/db_intro.rst:168
# 32066b8d89a645789a909c1efe782dce
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ../../../postgres/db_intro.rst:171
# efe7576e42aa48af8fe59d360f50b231
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:176
# 71ac4566af2b4da59da2f81e64633642
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../../postgres/db_intro.rst:178
# 089b7a07c6af4a4cb4c464645144ec1f
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../../postgres/db_intro.rst:203
# 9e01e8551dcb45719ccc6f5f44fe58c2
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ../../../postgres/db_intro.rst:207
# e1e5216fd9604756b9c5486a40df49b9
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ../../../postgres/db_intro.rst:237
# 5b401e88167844b5a72585694ac4cdcd
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../../postgres/db_intro.rst:241
# 89b42ce5075249b2ab5d1853a5d62bb1
msgid "Indexes"
msgstr ""

#: ../../../postgres/db_intro.rst:243
# 624ff2c5d9e245a390c9f2fa517821c3
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../../postgres/db_intro.rst:246
# fedb99b41f25440e8b82ed2e5a9ef20f
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ../../../postgres/db_intro.rst:256
# b301c15626d94687939b520930127851
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../../postgres/db_intro.rst:274
# 4a06fbfb7ff4406ebef018b4b4693f16
msgid "Sequences"
msgstr ""

#: ../../../postgres/db_intro.rst:276
# fa7fcccd3aa64fc9aa67f15139309aa9
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ../../../postgres/db_intro.rst:279
# 8341b637002e4d379924883e9405a0b0
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ../../../postgres/db_intro.rst:290
# 2dbd898367fe4aa6a9ac008357e4f261
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../../postgres/db_intro.rst:292
# 7a4c80942b284cfba91b4249ed0fc00b
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ../../../postgres/db_intro.rst:305
# bd3ad968757b4347966cc8229dcbc3da
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../../postgres/db_intro.rst:316
# 1dbc3025c4494432b19b44d8675cf872
msgid "and"
msgstr ""

#: ../../../postgres/db_intro.rst:326
# f719283eab26406bb34384068e65127a
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ../../../postgres/db_intro.rst:329
# bce8f509dfa14a2797687dfcd1a6ec7d
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ../../../postgres/db_intro.rst:335
# 2075dcae77a744bbabf57c2d17789918
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ../../../postgres/db_intro.rst:338
# 94dbc30f10ba409992c2a5bbfdd993a1
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ../../../postgres/db_intro.rst:370
# 646ec63905ee4b1eab6233c20b420406
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../../postgres/db_intro.rst:372
# bd108e7a7b4c497b99c0a58786404d38
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../../postgres/db_intro.rst:377
# 95243c0f6ceb4f0a8602275249245ba9
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../../postgres/db_intro.rst:380
# c297005cc6584ecfad3757685dec3b41
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ../../../postgres/db_intro.rst:383
# 694ea2337569476cbf9c50d123da770f
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ../../../postgres/db_intro.rst:386
# 154b4d4be7c0484581f4fb0254b5b378
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ../../../postgres/db_intro.rst:406
# 6a176b9d19a34cadb93d950776a8706b
msgid "Transactions"
msgstr ""

#: ../../../postgres/db_intro.rst:408
# 2f8f1def236443a382c32e050cd8871a
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ../../../postgres/db_intro.rst:414
# b9f684ce4e5d45fd8198f8a120976599
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ../../../postgres/db_intro.rst:418
# 3d7d4c0c38f045a9b4fd7cf6ea137fcd
msgid "remove R20 from Joe"
msgstr ""

#: ../../../postgres/db_intro.rst:419
# edee200d544a4b1995c1d3d5469e71e9
msgid "add R20 to Anne"
msgstr ""

#: ../../../postgres/db_intro.rst:421
# 5d639eba45d0494393694f8871154304
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ../../../postgres/db_intro.rst:427
# 8b5a1ae15ff046f8a6581b37476d229a
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ../../../postgres/db_intro.rst:433
# 0da4b94c79e74f68b0744006408d5ec1
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

#: ../../../postgres/index.rst:3
# edda525e03f84fc2821719fa55617886
msgid "|MOD| PostgreSQL"
msgstr ""

#: ../../../postgres/index.rst:5
# e5826297549243988c12ebefe2fa61ba
msgid "PostgreSQL is a Database Management System (DBMS). In this module, you'll be shown how to use PostgreSQL to create a new database, as well as accessing other typical DBMS functions."
msgstr ""

#: ../../../postgres/queries.rst:2
# 1073f9533d79440f98d2ab7a158f27cf
msgid "|LS| Queries"
msgstr ""

#: ../../../postgres/queries.rst:4
# c7d60ed3e64045aa9b44bc4c16bebff4
msgid "When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information."
msgstr ""

#: ../../../postgres/queries.rst:7
# a1ac395eade14766a5e48666b47b3f65
msgid "**The goal of this lesson:** To learn how to create queries that will return useful information."
msgstr ""

#: ../../../postgres/queries.rst:11
# 8067cf5b9340451284d9f45a8a32f3d9
msgid "Follow-up from previous lesson"
msgstr ""

#: ../../../postgres/queries.rst:13
# 2b2a8a6672434eac91e40b11f5d23ba4
msgid "Let's check that you added a few people to the database successfully:"
msgstr ""

#: ../../../postgres/queries.rst:27
# 5d3fe1710d0c4bb1830309dbef3b24f6
msgid "Ordering results"
msgstr ""

#: ../../../postgres/queries.rst:29
# 54a6f876885b428a8faa12924198f648
msgid "Let's get a list of people ordered by their house numbers:"
msgstr ""

#: ../../../postgres/queries.rst:35
#: ../../../postgres/queries.rst:53
#: ../../../postgres/queries.rst:187
#: ../../../postgres/queries.rst:212
#: ../../../postgres/queries.rst:237
#: ../../../postgres/queries.rst:254
#: ../../../postgres/queries.rst:298
#: ../../../postgres/views.rst:30
# 7425af87c19a4c6ebfef427612bdf51a
# 9ad3fc7ec81641f2bc8380da318279e3
# fd00736be18746faa05204553d8f7289
# 75a7708bd60a47e5ac18ba242fee9b42
# 45a93788b4cd4075911814e9d9da680e
# 05931d6407514284a969a76463abd3af
# 2a2d69051d774d5591fd34808cd0c1e6
# f989f6d9591e4c3db0c569853eea9cb8
msgid "Result:"
msgstr ""

#: ../../../postgres/queries.rst:47
# 82df6b250dbc4ef08b95a75feb8aa310
msgid "You can sort by more than one column:"
msgstr ""

#: ../../../postgres/queries.rst:66
# 37eb82c911ae41a2904e5b7ab7dde8dd
msgid "Filtering"
msgstr ""

#: ../../../postgres/queries.rst:68
# 64e415b929de4fb7a2d7d5dd0cf2af1b
msgid "Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two. Never fear, you can filter the results!"
msgstr ""

#: ../../../postgres/queries.rst:72
# 9218586894f2437d92c1ef4f352b4c1f
msgid "Here is an example of a numerical filter:"
msgstr ""

#: ../../../postgres/queries.rst:83
# 6fc53ca5f41b41a6b56515910a8b233c
msgid "You can combine filters (defined using the :kbd:`WHERE` clause) with sorting (defined using the :kbd:`ORDER BY`)"
msgstr ""

#: ../../../postgres/queries.rst:96
# d2f49bb67b254b91b4c5cff50330513c
msgid "You can also filter based on text data:"
msgstr ""

#: ../../../postgres/queries.rst:107
# 7b8aa106973140608c002d8588785034
msgid "Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`i` in them. If you want to search for a string of letters regardless of case, you can do a case insensitive search using the :kbd:`ILIKE` clause:"
msgstr ""

#: ../../../postgres/queries.rst:120
# 9bd98d12abb343e8a9472dac6986dc19
msgid "That found everyone with a :kbd:`k` or :kbd:`K` in their name. Using the normal :kbd:`ILIKE` clause, you'd get:"
msgstr ""

#: ../../../postgres/queries.rst:132
# 55d51a24a06a4bb8b650c08a71e01fcf
msgid "Joins"
msgstr ""

#: ../../../postgres/queries.rst:134
# 162e30617d6b47afa6b5fbeb3c3e03a7
msgid "What if you want to see the person's details and their street name (not its id)? In order to do that, you need to join the two tables together in a single query. Lets look at an example:"
msgstr ""

#: ../../../postgres/queries.rst:144
# 00168ea91f5347c28174b8aa94ae47f1
msgid "With joins, you will always state the two tables the information is coming from, in this case people and streets.  You also need to specify which two keys must match (foreign key & primary key). If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!"
msgstr ""

#: ../../../postgres/queries.rst:150
# af5ac81d47f74f988ee0baa460e4cf92
msgid "Here is what the correct output will look like:"
msgstr ""

#: ../../../postgres/queries.rst:162
# a677176a2c904ab0b316ec448d5a0297
msgid "We will revisit joins as we create more complex queries later. Just remember they provide a simple way to combine the information from two or more tables."
msgstr ""

#: ../../../postgres/queries.rst:166
# 14f149dbac274d07a036742b2d20ea90
msgid "Subselect"
msgstr ""

#: ../../../postgres/queries.rst:168
# a7e3e939fc9b4f5aadc6356ed3dd5c4f
msgid "First, let's do a little tweaking to our data:"
msgstr ""

#: ../../../postgres/queries.rst:178
# 5d1adc7cfd344411ad089d8db8cd0482
msgid "Let's take a quick look at our data after those changes - we reuse our query from the previous section:"
msgstr ""

#: ../../../postgres/queries.rst:199
# 0c8007f3b37f46198351035f95d30847
msgid "Now let's show you a subselection on this data. We want to show only people who live in :kbd:`street_id` number :kbd:`1`."
msgstr ""

#: ../../../postgres/queries.rst:222
# d06ddabef00240e18576c0851fd2db0e
msgid "This is a contrived example and in the above situations it may have been overkill. However when you have to filter based on a selection, subselects are really useful!"
msgstr ""

#: ../../../postgres/queries.rst:227
# daae57eb728d4766a0a94b1ddb8fb9ab
msgid "Aggregate Queries"
msgstr ""

#: ../../../postgres/queries.rst:229
# 98d46c468a10439ebdb66223781a6b74
msgid "One of the powerful features of a database is its ability to summarise the data in its tables. These summaries are called aggregate queries. Here is a typical example:"
msgstr ""

#: ../../../postgres/queries.rst:246
# c1a962ad7c314236bd076f33ec01d85c
msgid "If we want the counts summarised by street name we can do this:"
msgstr ""

#: ../../../postgres/queries.rst:265
# fa86a8813b9d49eba96afb71223b38ae
msgid "Because there is no :kbd:`ORDER BY` clause, on your computer these data may not be in the same order as shown here."
msgstr ""

#: ../../../postgres/queries.rst:268
# 46f3a0b59dc547409bf138c4db5725e8
msgid "Exercise:"
msgstr ""

#: ../../../postgres/queries.rst:270
# 4a3127465a474af29b4fb2995ed93782
msgid "Summarise the people by street name and show the actual street names instead of the street_id's"
msgstr ""

#: ../../../postgres/queries.rst:309
# 9ac4c34700634e4cb3858d1c8b4bb104
msgid "You will notice that we have prefixed field names with table names (e.g. people.name and streets.name). This needs to be done whenever the field name is ambiguous."
msgstr ""

#: ../../../postgres/queries.rst:316
# ca41b2f573b8481b8b2376f2474e977b
msgid "You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it."
msgstr ""

#: ../../../postgres/queries.rst:322
# 45ef208f735946e7b5bf30d55d2ea504
msgid "Next you'll see how to create views from the queries that you've written."
msgstr ""

#: ../../../postgres/rules.rst:2
# 40130ca734e44f2bacdba203d1bfaac2
msgid "|LS| Rules"
msgstr ""

#: ../../../postgres/rules.rst:4
# ca06b434a9db4be8964747946be8bc6d
msgid "Rules allow the \"query tree\" of an incoming query to be rewritten. One common usage is to implement views, including updatable view. *- Wikipedia*"
msgstr ""

#: ../../../postgres/rules.rst:7
# a31cc887ae4b4d4b812f626282884134
msgid "**The goal for this lesson:** To learn how to create new rules for the database."
msgstr ""

#: ../../../postgres/rules.rst:11
# ea9011b296b148e997200ee823e43aaf
msgid "Materialised Views (Rule based views)"
msgstr ""

#: ../../../postgres/rules.rst:13
# f625cc6f63784b8cae9936a316986216
msgid "Say you want to log every change of phone_no in your people table in to a people_log table. So you set up a new table"
msgstr ""

#: ../../../postgres/rules.rst:20
# 980d67dcc2844156833552419de30fc8
msgid "In the next step create a rule, that logs every change of a phone_no in the people table into the people_log table:"
msgstr ""

#: ../../../postgres/rules.rst:29
# 54c5fa8a920545ca991cf2093bcbd534
msgid "To test that the rule works, let's modify a phone number:"
msgstr ""

#: ../../../postgres/rules.rst:35
# 2703812758e849158a817f3c6657e951
msgid "Check that the table was updated correctly:"
msgstr ""

#: ../../../postgres/rules.rst:44
# 24d258edb2ca4c1d98c192feffd37a13
msgid "Now, thanks to the rule we created, the :kbd:`people_log` table will look like this:"
msgstr ""

#: ../../../postgres/rules.rst:54
# bc50c314da454c4d8bc8a282e4bbc626
msgid "The value of the :kbd:`time` field will depend on the current date and time."
msgstr ""

#: ../../../postgres/rules.rst:60
# df87c490de3e4a7c9c902a0f425af440
msgid "Rules allow you to automatically add or change data in your database to reflect changes in other parts of the database."
msgstr ""

#: ../../../postgres/rules.rst:66
# a289ee876cd04d828af87d9cb835f9f3
msgid "The next module will introduce you to PostGIS, which takes these database concepts and applies them to GIS data."
msgstr ""

#: ../../../postgres/views.rst:2
# 3d801356643348f598ccb24d38c6288c
msgid "|LS| Views"
msgstr ""

#: ../../../postgres/views.rst:4
# bf548808974541829ce6d8142b8b4c4a
msgid "When you write a query, you need to spend a lot of time and effort formulating it. With views, you can save the definition of a sql query in a reusable 'virtual table'."
msgstr ""

#: ../../../postgres/views.rst:8
# 44ce3dbe81c44bdc925b99e0a083c955
msgid "**The goal for this lesson:** To save a query as a view."
msgstr ""

#: ../../../postgres/views.rst:11
# c3c7570ab6de417694e1693ae27d72e3
msgid "Creating a View"
msgstr ""

#: ../../../postgres/views.rst:13
# 903c0103bb6f452ab95c7469afa82c1e
msgid "You can treat a view just like a table, but its data is sourced from a query. Let's make a simple view based on the above."
msgstr ""

#: ../../../postgres/views.rst:23
# 1fea28ee7eee4d13af06f31b2061524a
msgid "As you can see the only change is the :kbd:`create view roads_count_v as` part at the beginning. The nice thing is that we can now select data from that view:"
msgstr ""

#: ../../../postgres/views.rst:42
# 72242bf3f0c140148ef4da9f87d50bf1
msgid "Modifying a View"
msgstr ""

#: ../../../postgres/views.rst:44
# da3ae813f26b42879c1cecea8e14d2bf
msgid "A view is not fixed, and it contains no 'real data'. This means you can easily change it without impacting on any data in your database."
msgstr ""

#: ../../../postgres/views.rst:55
# 28a0601e86cb46e7852ce834adc36a51
msgid "(This example also shows the best practice convention of using UPPER CASE for all SQL keywords.)"
msgstr ""

#: ../../../postgres/views.rst:58
# e897e4b25c954a46be0e3eeb89f42057
msgid "You will see that we have added an :kbd:`ORDER BY` clause so that our view rows are nicely sorted:"
msgstr ""

#: ../../../postgres/views.rst:71
# b18abc1e53944faba8d7c2cc0c89ea32
msgid "Dropping a View"
msgstr ""

#: ../../../postgres/views.rst:73
# 0d84fe399e7d44a5b985f9461f0805a5
msgid "If you no longer need a view, you can delete it like this:"
msgstr ""

#: ../../../postgres/views.rst:82
# f03e9ef8f3e84495bf3805e3138745e7
msgid "Using views, you can save a query and access its results as if it were a table."
msgstr ""

#: ../../../postgres/views.rst:87
# 19a9066c82724c44b4f776191eecc212
msgid "Sometimes, when changing data, you want your changes to have effects elsewhere in the database. The next lesson will show you how to do this."
msgstr ""

