# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-07-10 11:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../postgis/geometry.rst:2
# 1a2e310410cf4fa5b9c5aaf4bdbf3c49
msgid "|LS| Geometry Construction"
msgstr ""

#: ../../../postgis/geometry.rst:4
# 7486c822b17445c4b6af3373a8eb624c
msgid "In this section we are going to delve a little deeper into how simple geometries are constructed in SQL. In reality, you will probably use a GIS like QGIS to create complex geometries using their digitising tools; however, understanding how they are formulated can be handy for writing queries and understanding how the database is assembled."
msgstr ""

#: ../../../postgis/geometry.rst:10
# e7f8d00612404deaaff7aeb30f2dd9eb
msgid "**The goal of this lesson:** To better understand how to create spatial entities directly in PostgreSQL/PostGIS."
msgstr ""

#: ../../../postgis/geometry.rst:16
# b072186a873a4ce19cd3f1210509100b
msgid "Creating Linestrings"
msgstr ""

#: ../../../postgis/geometry.rst:18
# 3b44f533a72c47a38be9cb5286406cc9
msgid "Before we start, let's get our streets table matching the others; i.e., having a constraint on the geometry, an index and an entry in the geometry_columns table."
msgstr ""

#: ../../../postgis/geometry.rst:22
# 6ca5fd6ad509415287430ba6bbaae264
msgid "Exercise:"
msgstr ""

#: ../../../postgis/geometry.rst:24
# d8dac961a2cb47609c18ade77101dae6
msgid "Modify the streets table so that it has a geometry column of type ST_LineString."
msgstr ""

#: ../../../postgis/geometry.rst:26
# 34074bba031a44709bc29fd24d31d12d
msgid "Don't forget to do the accompanying update to the geometry columns table!"
msgstr ""

#: ../../../postgis/geometry.rst:28
# d614ea35b12f45cb87e5558cff2838e7
msgid "Also add a constraint to prevent any geometries being added that are not LINESTRINGS or null."
msgstr ""

#: ../../../postgis/geometry.rst:30
# 6c2614c8440d4e038d8933b8d1193c52
msgid "Create a spatial index on the new geometry column"
msgstr ""

#: ../../../postgis/geometry.rst:57
# 8c4f5c7c5fe0416a88a8b254fc9fa567
msgid ":ref:`Check your results <geometry-1>`"
msgstr ""

#: ../../../postgis/geometry.rst:59
# aa3e446df7f44aa5846a54fcf513fcf9
msgid "Now let's insert a linestring into our streets table. In this case I am going to update an existing street record:"
msgstr ""

#: ../../../postgis/geometry.rst:67
# 9681152a8b8248bb9981d6d388706168
msgid "Take a look at the results in QGIS. (You may need to right-click on the streets layer in the 'Layers' panel, and choose 'Zoom to layer extent'.)"
msgstr ""

#: ../../../postgis/geometry.rst:70
# 7e441d5ce37b4ad8a6eb718d0196bb64
msgid "Now create some more streets entries - some in QGIS and some from the command line."
msgstr ""

#: ../../../postgis/geometry.rst:75
# adf027214f024501b5851adae5844ec0
msgid "Creating Polygons"
msgstr ""

#: ../../../postgis/geometry.rst:77
# f1f50fc4c554410c9b36db625e686216
msgid "Creating polygons is just as easy. One thing to remember is that by definition, polygons have at least four vertices, with the last and first being co-located."
msgstr ""

#: ../../../postgis/geometry.rst:85
# 2e27173c578b4429a4302e3b94018803
msgid "A polygon requires double brackets around its coordinate list; this is to allow you to add complex polygons with multiple unconnected areas. For instance:"
msgstr ""

#: ../../../postgis/geometry.rst:95
# b0f55c048690482693534fdbdef6d1b9
msgid "If you followed this step, you can check what it did by loading the cities dataset into QGIS, opening its attribute table, and selecting the new entry. Note how the two new polygons behave like one polygon."
msgstr ""

#: ../../../postgis/geometry.rst:103
# 068ed9a55067407a8d24abc7f47ba483
msgid "Exercise: Linking Cities to People"
msgstr ""

#: ../../../postgis/geometry.rst:105
# 9f5fda19a1564e569f8a1cf87d7a8266
msgid "For this exercise you should do the following:"
msgstr ""

#: ../../../postgis/geometry.rst:107
# 3ea63aafb267434e8e9f173c68698d75
msgid "Delete all data from your people table. Add a foreign key column to people that references the primary key of the cities table. Use QGIS to capture some cities. Use SQL to insert some new people records, ensuring that each has an associated street and city."
msgstr ""

#: ../../../postgis/geometry.rst:114
# 19619ed804704ad18b22ae4b0c5d959c
msgid "Your updated people schema should look something like this:"
msgstr ""

#: ../../../postgis/geometry.rst:171
# 6572a451a96448028b5a9558edb5159e
msgid ":ref:`Check your results <geometry-2>`"
msgstr ""

#: ../../../postgis/geometry.rst:175
# b3b7f889043d4b65be835ffbc24730ba
msgid "Looking at our schema"
msgstr ""

#: ../../../postgis/geometry.rst:177
# 7ecbfeb1aaa947c8a3624e27814c3f6a
msgid "By now our schema should be looking like this:"
msgstr ""

#: ../../../postgis/geometry.rst:196
# 112d83202310443da4daf117cc71f9f3
msgid "Access Subobjects"
msgstr ""

#: ../../../postgis/geometry.rst:198
# 15f6f449db114a699fa7817c9c41253c
msgid "With the SFS-Model functions, you have a wide variety of options to access subobjects of SFS Geometries. When you want to select the first vertex point of every polygon geometry in the table myPolygonTable, you have to do this in this way:"
msgstr ""

#: ../../../postgis/geometry.rst:203
# 95f2c8a9ef524c23b48debb717919cbf
msgid "Transform the polygon boundary to a linestring:"
msgstr ""

#: ../../../postgis/geometry.rst:209
# 8893168b3db640dd9f09a8909b6889d4
msgid "select the first vertex point of the resultant linestring:"
msgstr ""

#: ../../../postgis/geometry.rst:219
# 8a53528d3c7a4d959b18ac2e3440a4e4
msgid "Data Processing"
msgstr ""

#: ../../../postgis/geometry.rst:221
# f9deb500b5f24cbd8269d86580a8fdb5
msgid "PostGIS supports all OGC SFS/MM standard conform functions. All these functions start with ``ST_``."
msgstr ""

#: ../../../postgis/geometry.rst:225
# 011a4873e8494a17b4abd0166c9b4831
msgid "Clipping"
msgstr ""

#: ../../../postgis/geometry.rst:227
# 8cc1b1a564d14a1f8532650314c4a683
msgid "To clip a subpart of your data you can use the :kbd:`ST_INTERSECT()` function. To avoid empty geometries, use:"
msgstr ""

#: ../../../postgis/geometry.rst:248
# d991f776ac364dd1864a5002bccabf5f
msgid "Building Geometries from Other Geometries"
msgstr ""

#: ../../../postgis/geometry.rst:250
# fe43611acf7642469bb24bf61fefa5d3
msgid "From a given point table, you want to generate a linestring. The order of the points is defined by their :kbd:`id`. Another ordering method could be a timestamp, such as the one you get when you capture waypoints with a GPS receiver."
msgstr ""

#: ../../../postgis/geometry.rst:258
# bb350f6def81443ab89d987a96201b20
msgid "To create a linestring from a new point layer called 'points', you can run the following command:"
msgstr ""

#: ../../../postgis/geometry.rst:270
# 5759c9946119418bb3d054aee3f0b8ce
msgid "To see how it works without creating a new layer, you could also run this command on the 'people' layer, although of course it would make little real-world sense to do this."
msgstr ""

#: ../../../postgis/geometry.rst:278
# 5f0e66dd922443e193d03e974bf63130
msgid "Geometry Cleaning"
msgstr ""

#: ../../../postgis/geometry.rst:280
# ab97008a1a0f41158820422753d56c41
msgid "You can get more information for this topic in `this blog entry <http://linfiniti.com/?s=cleangeometry>`_."
msgstr ""

#: ../../../postgis/geometry.rst:284
# 6390b6368dca43e6a44154a8ba083c01
msgid "Differences between tables"
msgstr ""

#: ../../../postgis/geometry.rst:286
# d5af3951060d46c6bc74c1dff6188ad2
msgid "To detect the difference between two tables with the same structure, you can use the PostgreSQL keyword :kbd:`EXCEPT`."
msgstr ""

#: ../../../postgis/geometry.rst:295
# 8ea4340449a645518f6f26095698e4aa
msgid "As the result, you will get all records from table_a which are not stored in table_b."
msgstr ""

#: ../../../postgis/geometry.rst:299
# 9b09593453384f429cbb0dd738652042
msgid "Tablespaces"
msgstr ""

#: ../../../postgis/geometry.rst:301
# f2bd94dcdd9845deb7e696d5c03cb78d
msgid "You can define where postgres should store its data on disk by creating tablespaces."
msgstr ""

#: ../../../postgis/geometry.rst:308
# 69d8ebbb3a3e4ebba9c79a7acd3b9516
msgid "When you create a database, you can then specify which tablespace to use e.g.:"
msgstr ""

#: ../../../postgis/geometry.rst:315
#: ../../../postgis/import_export.rst:91
#: ../../../postgis/simple_feature_model.rst:251
#: ../../../postgis/spatial_functions.rst:243
#: ../../../postgis/spatial_queries.rst:392
# 5c866bae62c8412ba25aa12d5f4bba7f
# 4637df3392c9443fb04e8341f31a631f
# ff2f56817299483db0432a87cae04205
# c706910e062b4a39bfae60ba77a175f8
# f0352e75ac074cc8b616a4f97895a5b3
msgid "|IC|"
msgstr ""

#: ../../../postgis/geometry.rst:317
# f3fa647a25d04ac2b6480be14c9f626a
msgid "You've learned how to create more complex geometries using PostGIS statements. Keep in mind that this is mostly to improve your tacit knowledge when working with geo-enabled databases through a GIS frontend. You usually won't need to actually enter these statements manually, but having a general idea of their structure will help you when using a GIS, especially if you encounter errors that would otherwise seem cryptic."
msgstr ""

#: ../../../postgis/import_export.rst:2
# aa6bd987284142fab6bbc75948037c39
msgid "|LS| Import and Export"
msgstr ""

#: ../../../postgis/import_export.rst:4
# 0a02919b37ff488fb223c17fd971b862
msgid "Of course, a database with no easy way to migrate data into it and out of it would be no fun. Even more so for spatial data! Fortunately, there are a number of tools that will let you easily move data into and out of PostGIS."
msgstr ""

#: ../../../postgis/import_export.rst:9
# 0979eaa116684ca39ef99273e1316810
msgid "shp2pgsql"
msgstr ""

#: ../../../postgis/import_export.rst:11
# f6ceee3d8c254745aa47b6c18e06471a
msgid "shp2pgsql is a commandline tool to import ESRI shapefiles to the database. Under Unix, you can use the following command for importing a new PostGIS table:"
msgstr ""

#: ../../../postgis/import_export.rst:20
# df9d82dbb4eb4a5ab2abd57b56342e42
msgid "Under Windows, you have to perform the import process in two steps:"
msgstr ""

#: ../../../postgis/import_export.rst:27
# e9207ced4485417b80631c2ebc922bb6
msgid "You may encounter this error:"
msgstr ""

#: ../../../postgis/import_export.rst:34
# fb6ca357ccf242cd8f74213cc0f2fd9f
msgid "This is a known issue regarding the creation *in situ* of a spatial index for the data you're importing. To avoid the error, exclude the :kbd:`-I` parameter. This will mean that no spatial index is being created directly, and you'll need to create it in the database after the data have been imported. (The creation of a spatial index will be covered in the next lesson.)"
msgstr ""

#: ../../../postgis/import_export.rst:41
# 8b58462a3a8d4a2dbbeb1631478aa304
msgid "pgsql2shp"
msgstr ""

#: ../../../postgis/import_export.rst:43
# 455e30e00b9f49eea8993c3e1170d5ed
msgid "pgsql2shp is a commandline tool to export PostGIS Tables, Views or SQL select queries. To do this under Unix:"
msgstr ""

#: ../../../postgis/import_export.rst:51
# 48d5269de56f4644b6d2b6aea0dfef81
msgid "To export the data using a query:"
msgstr ""

#: ../../../postgis/import_export.rst:59
# 63202ede9caf432496ce3a22389f2cc0
msgid "ogr2ogr"
msgstr ""

#: ../../../postgis/import_export.rst:61
# 4f25ef5b2c22458b8d957965fe00471c
msgid "ogr2ogr is a very powerful tool to convert data into and from postgis to many data formats. ogr2ogr is part of the GDAL/OGR Software and has to be installed separately. To export a table from PostGIS to GML, you can use this command:"
msgstr ""

#: ../../../postgis/import_export.rst:71
# 82d0b20bfdba456aafdf435675d55889
msgid "SPIT"
msgstr ""

#: ../../../postgis/import_export.rst:73
# 979f8770e9374211a629ca23c55102b6
msgid "SPIT is a QGIS plugin which is delivered with QGIS. You can use SPIT for uploading ESRI shapefiles to PostGIS."
msgstr ""

#: ../../../postgis/import_export.rst:76
# d6681942bd3e4f52a8f1b80900319ab0
msgid "Once you've added the SPIT plugin via the :guilabel:`Plugin Manager`, look for this button:"
msgstr ""

#: ../../../postgis/import_export.rst:82
# 5159dfcdf74a47fdb45a6f8d140424fc
msgid "Clicking on it will give you the SPIT dialog:"
msgstr ""

#: ../../../postgis/import_export.rst:87
# 33ce559ff3414dabaa3aa1786325f385
msgid "You can add shapefiles to the database by clicking the :guilabel:`Add` button, which will give you a file browser window."
msgstr ""

#: ../../../postgis/import_export.rst:93
# 39d93e93eae94f168680ec48bf1ddc38
msgid "Importing and exporting data to and from the database can be done in many various ways. Especially when using disparate data sources, you will probably use these functions (or others like them) on a regular basis."
msgstr ""

#: ../../../postgis/import_export.rst:98
#: ../../../postgis/simple_feature_model.rst:257
#: ../../../postgis/spatial_functions.rst:249
#: ../../../postgis/spatial_queries.rst:398
# 0a3519ede9ba433e9f200a9efbd76d0e
# a91970097fe349a2bd3396c236e6f594
# 17d88f5cd87e4680941fa50091a99119
# c5c0d56ce45548f59c8f1b05240bdd36
msgid "|WN|"
msgstr ""

#: ../../../postgis/import_export.rst:100
# 13c56c0fd83d4248a7dc3f662f4b46bb
msgid "Next we'll look at how to query the data we've created before."
msgstr ""

#: ../../../postgis/index.rst:3
# d01b9b68492843f3b3a66cbfeea78d9c
msgid "|MOD| PostGIS"
msgstr ""

#: ../../../postgis/index.rst:5
# 1924b30ca3644b7787c2046a95f2dd46
msgid "PostGIS is an extension to PostgreSQL which allows it to handle and process geographic data. In this module, we'll learn how to set up and use the geographic functions that PostGIS offers."
msgstr ""

#: ../../../postgis/index.rst:9
# 72e9eb0c9934472f93ff9836cae9be16
msgid "While working through this section, you may want to keep a copy of the `PostGIS cheat sheet <../_static/postgis/postgis_cheatsheet.pdf>`_ available at `Boston GIS user group <http://www.bostongis.com/postgis_quickguide.bqg>`_. Another good friend is the `online <http://postgis.refractions.net/documentation/manual-1.5/>`_ PostGIS documentation."
msgstr ""

#: ../../../postgis/index.rst:16
# fbe741b8d6f84fea9408ec94f4cf74c4
msgid "See also `PostGIS online <http://postgisonline.org/>`_."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:2
# 9360fc764e6f4de7b517526cdbc00ec8
msgid "|LS| Simple Feature Model"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:4
# 3d649ffb5c8a42829917c4e0b32f9ddb
msgid "How can we store and represent geographic features in a database? In this lesson we'll cover one approach, the Simple Feature Model as defined by the OGC."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:8
# 284e2764a43649ceb2275b77c107b88b
msgid "**The goal for this lesson:** To learn what the SFS Model is and how to use it."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:11
# 65ee6c56357448839e7697fdb3b8ed77
msgid "What is OGC"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:13
# 43f3873f48c644919d219196bcddd3e1
msgid "The Open Geospatial Consortium (OGC), an international voluntary consensus standards organization, originated in 1994. In the OGC, more than 370+ commercial, governmental, nonprofit and research organizations worldwide collaborate in an open consensus process encouraging development and implementation of standards for geospatial content and services, GIS data processing and data sharing. *- Wikipedia*"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:21
# 1453d16f1c8448cdb81e521d72d791c0
msgid "What is the SFS Model"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:23
# 0c2a7b450f1349159a1c21b3b576b51b
msgid "The Simple Feature for SQL (SFS) Model is a *non-topological* way to store geospatial data in a database and defines functions for accessing, operating, and constructing these data."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:30
# 79b9eea791e34f988e5614fdf60b4eca
msgid "The model defines geospatial data from Point, Linestring, and Polygon types (and aggregations of them to Multi objects)."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:33
# 14530149cfb34ef49dc20f51bc2a99dd
msgid "For further information, have a look at the `OGC Simple Feature for SQL <http://www.opengeospatial.org/standards/sfs>`_ standard."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:37
# 47a5341bc1c14321ab0b465b1577c477
msgid "Add a geometry field to table"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:39
# 06b8da4c87fd4feeadaf673ca3ca4ac6
msgid "Let's add a point field to our people table:"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:49
# 8cfb058f5aef4d7f981e80d16f121d02
msgid "Add a constraint based on geometry type"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:51
# da97058417904fe4b06f6a9f8b8c7e2d
msgid "You will notice that the geometry field type does not implicitly specify what *type* of geometry for the field - for that we need a constraint."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:60
# 52ef5a86b9bc4cbfb4e3d24bd3008818
msgid "What does that do? It adds a constraint to the table that prevents anything except a point geometry or a null."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:63
# 2dd128551ec84d108295325bb755525c
msgid "Now you try:"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:65
# 393e28beefbc42ff8ef1bdda5052f930
msgid "Create a new table called cities and give it some appropriate columns, including a geometry field for storing polygons (the city boundaries). Make sure it has a constraint enforcing geometries to be polygons."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:98
# 909889f5474446baab817539e604cdaa
msgid ":ref:`Check your results <simple-feature-1>`"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:104
# c9f7abd193ab43879e20bb47baf1f54c
msgid "Populate geometry_columns table"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:106
# 647047f18dd940799c6137b57d3090a3
msgid "At this point you should also add an entry into the :kbd:`geometry_columns` table:"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:114
# a249224b92bd4b7284b4a5d1b40362f0
msgid "Why? :kbd:`geometry_columns` is used by certain applications to be aware of which tables in the database contain geometry data."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:117
# 58e85086808345c19077faecec7e7495
msgid "If the above :kbd:`INSERT` statement causes a complaint, run this query first:"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:124
# 22c69ba4c6144451a2a136f6366e0f42
msgid "If the column :kbd:`f_table_name` contains the value :kbd:`people`, then this table has already been registered and you don't need to do anything more."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:128
# 2a65d63a06a342c499efeab4c870ed13
msgid "The value :kbd:`2` refers to the number of dimensions; in this case, two: **x** and **y**."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:131
# ad34d90fc3e740fa946fd71cb715ce24
msgid "The value :kbd:`4326` refers to the projection we are using; in this case, WGS 84, which is referred to by the number 4326 (refer to the earlier discussion about the EPSG)."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:135
# 0634f8ea6bf44f0490bddb3fc97ced34
msgid "Add an appropriate geometry_columns entry for your new cities layer"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:156
# 043a76ec62b2405284ce7d91c3f5ec66
msgid ":ref:`Check your results <simple-feature-2>`"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:162
# f777f0a5553840ca8b38497fc85bc6d9
msgid "Add geometry record to table using SQL"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:164
# 0489fb65d2db4b08ba66764c1a6708ec
msgid "Now that our tables are geo-enabled, we can store geometries in them!"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:175
# b813e7bc8b3146c29c8acbb640761dd8
msgid "In the new entry above, you will need to specify which projection (SRID) you want to use. This is because you entered the geometry of the new point using a plain string of text, which does not automatically add the correct projection information. Obviously, the new point needs to use the same SRID as the dataset it is being added to, so you need to specify it."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:181
# 9040bc7804ce4322b58b419f0320c4b3
msgid "If at this point you were using a graphical interface, for example, specifying the projection for each point would be automatic. In other words, you usually won't need to worry about using the correct projection for every point you want to add if you've already specified it for that dataset, as we did earlier."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:187
# b257805715834470ac4947e28b947f5a
msgid "Now is probably a good time to fire up QGIS and try to view your :kbd:`people` table. Also, we should try editing / adding / deleting records and then performing select queries in the database to see how the data has changed."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:191
# ee72217c4b494b2da45961dfb077cd0f
msgid "To load a PostGIS layer in QGIS, use the :menuselection:`Layer --> Add PostGIS Layers` menu option or toolbar button:"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:197
# 08e55b0eac44449596c12cb95d85fe67
msgid "This will open the dialog:"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:202
# b60e046d7dc249ef9e96434df1ec2d06
msgid "Click on the :guilabel:`New` button to open this dialog:"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:207
# dff1b1e334f348bb96f9cd03de941760
msgid "Then define a new connection, e.g.:"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:219
# c58ebe2b31bf436b90265fb30b262255
msgid "To see whether QGIS has found the :kbd:`address` database and that your username and password are correct, click :guilabel:`Test Connect`. If it works, check the boxes next to :guilabel:`Save Username` and :guilabel:`Save Password`. Then click :guilabel:`OK` to create this connection."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:224
# f2d99183889b4c74bec52a564e98cfb7
msgid "Back in the :guilabel:`Add PostGIS Layers` dialog, click :guilabel:`Connect` and add layers to your project as usual."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:227
# e7bf7139fb9542d5b85864300815267d
msgid "Formulate a query that shows a person's name, street name and position (from the the_geom column) as plain text."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:248
# 931ffb6499e44d108aae10393be807c1
msgid ":ref:`Check your results <simple-feature-3>`"
msgstr ""

#: ../../../postgis/simple_feature_model.rst:253
# 5c934be531dd4dfca6ffcef6ef00fa0e
msgid "You have seen how to add spatial objects to your database and view them in GIS software."
msgstr ""

#: ../../../postgis/simple_feature_model.rst:259
# d08006ff86924e9caf7fe7740f07e178
msgid "Next you'll see how to import data into, and export data from, your database."
msgstr ""

#: ../../../postgis/spatial_functions.rst:2
# f95038f38bd64678a9e71cb4e3bea58c
msgid "|LS| PostGIS Setup"
msgstr ""

#: ../../../postgis/spatial_functions.rst:4
# d3e623444f8f4cb79ea3aa1f6533b8d8
msgid "Setting up PostGIS functions will allow you to access spatial functions from within PostgreSQL."
msgstr ""

#: ../../../postgis/spatial_functions.rst:7
# 017991f96d8743049d0209b174a629e4
msgid "**The goal for this lesson:** To install spatial functions and briefly demo their effects."
msgstr ""

#: ../../../postgis/spatial_functions.rst:11
# a1d53f82a9434744bdc806fff086ac34
msgid "Installing under Ubuntu"
msgstr ""

#: ../../../postgis/spatial_functions.rst:13
# 672f8d7e983649d6b2f7456265479708
msgid "Postgis is easily installed from apt."
msgstr ""

#: ../../../postgis/spatial_functions.rst:20
# fe29cc8c060c44cea25ad1e240f9e2be
msgid "Really, it's that easy..."
msgstr ""

#: ../../../postgis/spatial_functions.rst:23
# 283dba8e98c24ff386b8ef10c5ec52b4
msgid "Installing under Windows"
msgstr ""

#: ../../../postgis/spatial_functions.rst:25
# 4ada61cbb83343759659442f602221e1
msgid "Visit `the download page <http://www.postgresql.org/download/>`_."
msgstr ""

#: ../../../postgis/spatial_functions.rst:27
# bff55ac953884bb5b9fd83430cb1021c
msgid "Now follow `this guide <http://www.bostongis.com/PrinterFriendly.aspx?content_name=postgis_tut01>`_."
msgstr ""

#: ../../../postgis/spatial_functions.rst:30
# 4b90f7031ade4504bb7b4419ffe274ee
msgid "A little more complicated, but still not hard. Note that you need to be online to install the postgis stack."
msgstr ""

#: ../../../postgis/spatial_functions.rst:34
# c3472f0d2fce4941b0b5e538e308f9f5
msgid "Install plpgsql"
msgstr ""

#: ../../../postgis/spatial_functions.rst:36
# bec3c3304e8a4967a2d94ce0fad2d4f9
msgid "You can ensure that any database created on your system automatically gets these spatial extensions by running these commands (from this and the next two sections) on the :kbd:`template1` system database *before* you create any of your own databases."
msgstr ""

#: ../../../postgis/spatial_functions.rst:41
# 5fd83ef171bf474a93639c7fdaad51b9
msgid "PostgreSQL can use various procedural languages. What is a procedural language? It is an 'in database' language that can be used to extend the functionality of the database. For example you can write database functions that are called when events happen - such as when a record is inserted into the database. (Recall when this was done in the previous module.)"
msgstr ""

#: ../../../postgis/spatial_functions.rst:47
# ee00b8154dff4abb9fefd75a882ec1fb
msgid "PostGIS requires the PLPGSQL procedural language to be installed. So do this:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:55
# fb482954e28e432abf49287730ad0eff
msgid "Where the third argument is the name of the database that the procedural language should be installed into."
msgstr ""

#: ../../../postgis/spatial_functions.rst:58
# 7813838c49a742d9b3b3a38bbbe6cc22
msgid "You will need administrative permissions for your database to be able to do this."
msgstr ""

#: ../../../postgis/spatial_functions.rst:62
# 3aa0a20db7b74f8db3dbd5d828338383
msgid "Install postgis.sql"
msgstr ""

#: ../../../postgis/spatial_functions.rst:64
# 2a5ec34d5d69498ba09d315d2be92ba7
msgid "PostGIS can be thought of as a collection of in database functions that extend the core capabilities of PostgreSQL so that it can deal with spatial data. By 'deal with', we mean store, retrieve, query and manipulate. In order to do this, a number of functions are installed into the database. Do this:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:73
# 21f32bdd29154d4596fc838c72ad4d2b
msgid "or"
msgstr ""

#: ../../../postgis/spatial_functions.rst:79
# a7e6eed40e3e4fafab7b48733a24033e
msgid "depending on which PostGIS version you have installed. Now do:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:85
# 7ad95c33992f4a0aad3c4d88847cf105
msgid "and, once you're in the psql prompt:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:91
# d0328a6289b14f7a8baadd40d0f14872
msgid "We will discuss these functions in more detail as we proceed with this course."
msgstr ""

#: ../../../postgis/spatial_functions.rst:94
# 631a4c71c0ed4ff693140d8f09290ed9
msgid "Install spatial_refsys.sql"
msgstr ""

#: ../../../postgis/spatial_functions.rst:96
# 2ae54506ee06402890a5a943b388df53
msgid "In addition to the PostGIS functions, a second helper SQL script needs to be run that will load the database with a collection of spatial reference system (SRS) definitions as defined by the European Petroleum Survey Group (EPSG). These are used during operations such as coordinate reference system (CRS) conversions."
msgstr ""

#: ../../../postgis/spatial_functions.rst:102
# 7ce44c1c682f4348a8737b5a07356472
msgid "You can add more to the SRS list later if needed, but the list provided should cover just about every SRS you will need (Google Mercator and lo are notable exceptions)."
msgstr ""

#: ../../../postgis/spatial_functions.rst:106
# d652dab7a9d34808be3da0e2b08a8240
msgid "To load the SRS table, first ensure that you're at a normal prompt (i.e., quit the database first with :kbd:`\\q`), then do this:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:113
# b27f97be51da4625ae82fa08ba663ce5
msgid "replacing :kbd:`1.5` with :kbd:`2.0` if necessary."
msgstr ""

#: ../../../postgis/spatial_functions.rst:115
# 8f0d5147dfaf4c77a4335b4169c31b9a
msgid "The above command adds a table to our database. We can see the schema of this table by entering the following command in the psql prompt:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:122
# 653a0552ea804c7d9aaedd7a8cf2de5e
msgid "The result should be this:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:137
# 0c2582b9c5844d73bb155eaf9ef1c55a
msgid "You can use standard SQL queries (as we have learned from our introductory sections), to view and manipulate this table - though we suggest you do not update or delete any records unless you know what you are doing."
msgstr ""

#: ../../../postgis/spatial_functions.rst:141
# 043ede7766f245649848f675cd9311b4
msgid "One SRID you may be interested in is EPSG:4326 - the geographic / lat lon reference system using the WGS 84 ellipsoid. Let's take a look at it:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:148
# 8bfa25df956b4ed78d019b695afe2329
msgid "Result"
msgstr ""

#: ../../../postgis/spatial_functions.rst:162
# ebc2ce31373b448b9ffeab3e89ed58c3
msgid "The srtext is the projection definition in well known text (you may recognise this from .prj files in your shapefile collection)."
msgstr ""

#: ../../../postgis/spatial_functions.rst:166
# b7b539a9cc89484e889f1764e0f8b4db
msgid "Looking at the installed PostGIS functions"
msgstr ""

#: ../../../postgis/spatial_functions.rst:168
# 1567875eefb74e81a8e23157235afec0
msgid "Good - our PostgreSQL database is now geospatially enabled, thanks to PostGIS. We are going to delve a lot deeper into this in the coming days, but let's give you a quick little taster. Let's say we want to create a point from text. First we use the psql command to find functions relating to point:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:177
# b3f848d11c9b4fd3b2156f54ea08dd4e
msgid "Here is one that caught my eye: :kbd:`st_pointfromtext`"
msgstr ""

#: ../../../postgis/spatial_functions.rst:179
# 96239016979545ab9f7dd7351ad3fed6
msgid "So let's give that a try:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:185
#: ../../../postgis/spatial_functions.rst:219
#: ../../../postgis/spatial_queries.rst:25
#: ../../../postgis/spatial_queries.rst:58
#: ../../../postgis/spatial_queries.rst:179
#: ../../../postgis/spatial_queries.rst:219
#: ../../../postgis/spatial_queries.rst:320
# e05250ed2f3d400d8f974594ea89b908
# fbf602a7fce242aebfae69afd8503304
# c81aa973c29b4ca698083a8beb2e485d
# 8e2543428b544772a0bc6d65eda06f28
# 1dca3e9f2cbd4d848533c84e084cfa65
# 755af62f530446c9a467b8e5a20c090d
# d4b1e250ed1044789d703ed66b7c573f
msgid "Result:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:194
# 1077496296284acd8cde6f7a048800e1
msgid "So there are a couple of interesting things going on here:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:196
# cdb460f98eb843e8a9226cbb5f082e98
msgid "we defined a point at position 1,1 (EPSG:4326 is assumed) using :kbd:`POINT(1 1)`"
msgstr ""

#: ../../../postgis/spatial_functions.rst:198
# fb0c3f4b0fab4677969191dcbaa24a97
msgid "we ran an sql statement, but not on any table, just on data entered from the SQL prompt"
msgstr ""

#: ../../../postgis/spatial_functions.rst:200
# 0727a2af84b54fafbba80d7bdfd75410
msgid "the resulting row looks kinda strange"
msgstr ""

#: ../../../postgis/spatial_functions.rst:202
# 23abd03ea1f241ab9e2f3bbaf8abfe2f
msgid "The resulting row is looking strange because its in the OGC format called 'Well Known Binary' (WKB) - more on that coming in the next section."
msgstr ""

#: ../../../postgis/spatial_functions.rst:205
# cfd13e5266f147ebb5772ff2f68ccb79
msgid "To get the results back as text, I do a quick scan through the function list for something that returns text:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:212
# 50486cf534cc43d0a901f5bb1b22321f
msgid "One that catches my eye is :kbd:`st_astext`. Let's combine it with the previous query:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:228
# ae0f29ea48dd4876b647fb71f796c834
msgid "So what's happened here? We entered the string :kbd:`POINT(1,1)`, turned it into a point using :kbd:`st_pointfromtext()`, and turned it back into a human-readable form with :kbd:`st_astext()`, which gave us back our original string."
msgstr ""

#: ../../../postgis/spatial_functions.rst:233
# 6388737fbf5749dda11ad116c908ff56
msgid "One last example before we really get into the detail of using PostGIS:"
msgstr ""

#: ../../../postgis/spatial_functions.rst:239
# 26601a05a3d34222b5e2e5c85f74b5c2
msgid "What did that do? It created a buffer of 1 degree around our point, and returned it as text. Nifty hey?"
msgstr ""

#: ../../../postgis/spatial_functions.rst:245
# 7daa745edaa944b59a7650f43647f462
msgid "You now have PostGIS functions installed in your copy of PostgreSQL. With this you'll be able to make use of PostGIS' extensive spatial functions."
msgstr ""

#: ../../../postgis/spatial_functions.rst:251
# d909b3cfcb314468a4a5886f1127b7de
msgid "Next you'll learn how spatial features are represented in a database."
msgstr ""

#: ../../../postgis/spatial_queries.rst:2
# 6cd80ab937d5463bb9c1eeb41d1ed439
msgid "|LS| Spatial Queries"
msgstr ""

#: ../../../postgis/spatial_queries.rst:4
# 3f9f4eb08372413e9ce5eca5769b7e5c
msgid "Spatial queries are no different from other database queries. You can use the geometry column like any other database column. With the installation of PostGIS in our database, we have additional functions to query our database."
msgstr ""

#: ../../../postgis/spatial_queries.rst:8
# 6d45d562ca624b70a09c5d9a5d3705c5
msgid "**The goal for this lesson:** To see how spatial functions are implemented similarly to \"normal\" non-spatial functions."
msgstr ""

#: ../../../postgis/spatial_queries.rst:14
# 1273d07b77a940f18d3aa82f22a1d9e0
msgid "Spatial Operators"
msgstr ""

#: ../../../postgis/spatial_queries.rst:16
# 0228dc6ba61d4a6eb7d6ad7d61b55447
msgid "When you want to know which points are within a distance of 2 degrees to a point(X,Y) you can do this with:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:34
# 326787239d0940cca2dcdfdf34405509
msgid "the_geom value above was truncated for space on this page. If you want to see the point in human-readable coordinates, try something similar to what you did in the section \"View a point as WKT\", above."
msgstr ""

#: ../../../postgis/spatial_queries.rst:38
# 88565836da50446b9d585ee6bcefee79
msgid "How do we know that the query above returns all the points within 2 *degrees*? Why not 2 *meters*? Or any other unit, for that matter?"
msgstr ""

#: ../../../postgis/spatial_queries.rst:41
# 18446c26e0d5424a92755b9e8d650398
msgid ":ref:`Check your results <spatial-queries-1>`"
msgstr ""

#: ../../../postgis/spatial_queries.rst:46
# 3a2b30223e9d4125b750ea70e1632bef
msgid "Spatial Indexes"
msgstr ""

#: ../../../postgis/spatial_queries.rst:48
# 26f7d6b648894fa38372ff90852b55b5
msgid "We also can define spatial indexes. A spatial index makes your spatial queries much faster. To create a spatial index on the geometry column use:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:85
# 6bc83322361447e4955c32e4bc46b2a4
msgid "Now you try - modify the cities table so its geometry column is spatially indexed."
msgstr ""

#: ../../../postgis/spatial_queries.rst:115
# 6c56652dd0374bb7b65f78f9a781ba63
msgid ":ref:`Check your results <spatial-queries-2>`"
msgstr ""

#: ../../../postgis/spatial_queries.rst:119
# 1c968d56f145453fbd938ee11ec1ce25
msgid "PostGIS Spatial Functions Demo"
msgstr ""

#: ../../../postgis/spatial_queries.rst:121
# 2f951c7680f4456493ed49f92a1378f2
msgid "In order to demo PostGIS spatial functions, we'll create a new database containing some (fictional) data."
msgstr ""

#: ../../../postgis/spatial_queries.rst:124
# 493838161d0d41df8db95210c73592b3
msgid "To start, create a new database:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:130
# a5f73941cd8c4ca5bd64ebea0ee3f5d7
msgid "Remember to install PLPGSQL:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:136
# 7a3860cb7f494302831638562eb1d192
msgid "Then install the PostGIS functions and the spatial reference system. For example, on Linux with PostgreSQL 9.1 and PostGIS 1.5:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:144
# bb31ebba97d641dc938da853cf919fd1
msgid "Next, import the data provided in the :kbd:`exercise_data/postgis/` directory. Refer back to the previous lesson for instructions. You can import from the terminal or via SPIT. Import the files into the following database tables:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:148
# f562a2a6e64f4ec9b8ef28ac5ab9d050
msgid ":kbd:`points.shp` = :kbd:`building`"
msgstr ""

#: ../../../postgis/spatial_queries.rst:149
# ccc7b17a53e64417a5326e7b063001dc
msgid ":kbd:`lines.shp` = :kbd:`road`"
msgstr ""

#: ../../../postgis/spatial_queries.rst:150
# 45e2099f8dfb4de7bb5698dc0bb6223e
msgid ":kbd:`polygons.shp` = :kbd:`region`"
msgstr ""

#: ../../../postgis/spatial_queries.rst:152
# 2390c62166484a1bb90e7c25bcfef46f
msgid "Load these three database layers into QGIS via the :guilabel:`Add PostGIS Layers` dialog, as usual. When you open their attribute tables, you'll note that they have both an :kbd:`id` field and a :kbd:`gid` field created by the PostGIS import."
msgstr ""

#: ../../../postgis/spatial_queries.rst:157
# d0e5508bcb7f40d480efce103aed776c
msgid "Now that the tables are imported, we can use PostGIS to query the data. Go back to your terminal (command line) and enter the psql prompt by doing:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:164
# cfed1e1018a543349730b0f613afaa17
msgid "We'll demo some of these select statements by creating views from them, so that you can open them in QGIS and see the results."
msgstr ""

#: ../../../postgis/spatial_queries.rst:168
# daade87cc2504ab1a9b8598d9870ec7d
msgid "Select by location"
msgstr ""

#: ../../../postgis/spatial_queries.rst:170
# 0955dd99fd844f45ac0b44f822395a7f
msgid "Get all the buildings in the KwaZulu region."
msgstr ""

#: ../../../postgis/spatial_queries.rst:192
# eb18be2e46c6426db40070ef7231fb8d
msgid "Or, if we create a view from it:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:202
# fdb2c8600d78414bbca11276d381540f
msgid "And view it in QGIS:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:208
# 3c96ef8674b841a484e29903b2ff1599
msgid "Select neighbors"
msgstr ""

#: ../../../postgis/spatial_queries.rst:210
# a71a0e7be4a14c999187171d4a1e9008
msgid "Show a list of all the names of regions adjoining the Hokkaido region."
msgstr ""

#: ../../../postgis/spatial_queries.rst:230
# 6e1194181cc8402981e1efa36058d1c8
msgid "As a view:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:240
#: ../../../postgis/spatial_queries.rst:285
# 9ad3d989f3454a9893032bc7b0efb45b
# eff4e95fa4744d41a5f564c22b7d2d88
msgid "In QGIS:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:245
# c31ace3541544c83b87c48b78c25c9ea
msgid "Note the missing region (Queensland). This may be due to a topology error. Artifacts such as this can alert us to potential problems in the data. To solve this enigma without getting caught up in the anomalies the data may have, we could use a buffer intersect instead:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:257
# 4dd62e78ab194b38b7969a8e4c762061
msgid "This creates a buffer of 100 meters around the region Hokkaido."
msgstr ""

#: ../../../postgis/spatial_queries.rst:259
# 37e2279b2a0a4f6fa169834be5789004
msgid "The darker area is the buffer:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:264
# f709f74591dc4098990fa221ad23e86b
msgid "Select using the buffer:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:279
# c9431493df874682967438e2ae5b613c
msgid "In this query, the original buffer view is used as any other table would be. It is given the alias :kbd:`a`, and its geometry field, :kbd:`a.the_geom`, is used to select any polygon in the :kbd:`region` table (alias :kbd:`b`) that intersects it. However, Hokkaido itself is excluded from this select statement, because we don't want it; we only want the regions adjoining it."
msgstr ""

#: ../../../postgis/spatial_queries.rst:290
# c51f91be60c2461ab14b23ab46b5a990
msgid "It is also possible to select all objects within a given distance, without the extra step of creating a buffer:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:302
# 035f5ed9106a4e46abc451d60559e12a
msgid "This achieves the same result, without need for the interim buffer step:"
msgstr ""

#: ../../../postgis/spatial_queries.rst:309
# 451f7a25c3584522b45e05cf60f709eb
msgid "Select uniques"
msgstr ""

#: ../../../postgis/spatial_queries.rst:311
# f893ae4819ee469aaf628d8b842379c6
msgid "Show a list of unique town names for all buildings in the Queensland region."
msgstr ""

#: ../../../postgis/spatial_queries.rst:333
# 3ce2abd2585b4e3e9930b50a9246ce80
msgid "Further examples ..."
msgstr ""

#: ../../../postgis/spatial_queries.rst:394
# 6d5b6e337a8d44ddbf64d91f17445a1e
msgid "You have seen how to query spatial objects using the new database functions from PostGIS."
msgstr ""

#: ../../../postgis/spatial_queries.rst:400
# 6b9958b825d14177bca3a739de7b13de
msgid "Next we're going to investigate the structures of more complex geometries and how to create them using PostGIS."
msgstr ""

